
MeduzosMotorai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800abb8  0800abb8  0001abb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afc4  0800afc4  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800afc4  0800afc4  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afc4  0800afc4  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afc4  0800afc4  0001afc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afc8  0800afc8  0001afc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800afcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000098e0  20000354  0800b320  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009c34  0800b320  00029c34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e888  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f2  00000000  00000000  0003ec0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00043300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  00044848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e020  00000000  00000000  00045ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8a1  00000000  00000000  00063bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8d78  00000000  00000000  0007e469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001271e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006760  00000000  00000000  00127234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000354 	.word	0x20000354
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab9c 	.word	0x0800ab9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000358 	.word	0x20000358
 80001dc:	0800ab9c 	.word	0x0800ab9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000bcc:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <MX_ADC1_Init+0x9c>)
 8000bce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000bd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <MX_ADC1_Init+0xa0>)
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000c1a:	f000 ff51 	bl	8001ac0 <HAL_ADC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c24:	f000 fc5e 	bl	80014e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c28:	2305      	movs	r3, #5
 8000c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_ADC1_Init+0x98>)
 8000c3a:	f000 ff85 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c44:	f000 fc4e 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200005b0 	.word	0x200005b0
 8000c54:	40012000 	.word	0x40012000
 8000c58:	0f000001 	.word	0x0f000001

08000c5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_ADC_MspInit+0x7c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d127      	bne.n	8000cce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_ADC_MspInit+0x80>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <HAL_ADC_MspInit+0x80>)
 8000c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_ADC_MspInit+0x80>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_ADC_MspInit+0x80>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_ADC_MspInit+0x80>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_ADC_MspInit+0x80>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_ADC_MspInit+0x84>)
 8000cca:	f001 fa7d 	bl	80021c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40012000 	.word	0x40012000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	; (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4013      	ands	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40023800 	.word	0x40023800

08000e28 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <LL_SYSCFG_SetEXTISource+0x58>)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	0c1b      	lsrs	r3, r3, #16
 8000e42:	43db      	mvns	r3, r3
 8000e44:	ea02 0103 	and.w	r1, r2, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	fab3 f383 	clz	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	fa03 f202 	lsl.w	r2, r3, r2
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <LL_SYSCFG_SetEXTISource+0x58>)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	3302      	adds	r3, #2
 8000e70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	40013800 	.word	0x40013800

08000e84 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	613b      	str	r3, [r7, #16]
  return result;
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	fab3 f383 	clz	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2103      	movs	r1, #3
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	61bb      	str	r3, [r7, #24]
  return result;
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fab3 f383 	clz	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	601a      	str	r2, [r3, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b089      	sub	sp, #36	; 0x24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	613b      	str	r3, [r7, #16]
  return result;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	fab3 f383 	clz	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2103      	movs	r1, #3
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	401a      	ands	r2, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	61bb      	str	r3, [r7, #24]
  return result;
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	fab3 f383 	clz	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	60da      	str	r2, [r3, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3724      	adds	r7, #36	; 0x24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	041a      	lsls	r2, r3, #16
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	619a      	str	r2, [r3, #24]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
 8000f7e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f80:	2004      	movs	r0, #4
 8000f82:	f7ff ff39 	bl	8000df8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000f86:	2080      	movs	r0, #128	; 0x80
 8000f88:	f7ff ff36 	bl	8000df8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f7ff ff33 	bl	8000df8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f92:	2002      	movs	r0, #2
 8000f94:	f7ff ff30 	bl	8000df8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	4821      	ldr	r0, [pc, #132]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000f9e:	f7ff ffcf 	bl	8000f40 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4819      	ldr	r0, [pc, #100]	; (8001024 <MX_GPIO_Init+0xc4>)
 8000fbe:	f003 fab1 	bl	8004524 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000fc2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff ff2e 	bl	8000e28 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 f919 	bl	8004218 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_0, LL_GPIO_PULL_UP);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2101      	movs	r1, #1
 8000fea:	480f      	ldr	r0, [pc, #60]	; (8001028 <MX_GPIO_Init+0xc8>)
 8000fec:	f7ff ff79 	bl	8000ee2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <MX_GPIO_Init+0xc8>)
 8000ff6:	f7ff ff45 	bl	8000e84 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ffa:	f7ff fe73 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fec3 	bl	8000d90 <NVIC_EncodePriority>
 800100a:	4603      	mov	r3, r0
 800100c:	4619      	mov	r1, r3
 800100e:	2006      	movs	r0, #6
 8001010:	f7ff fe94 	bl	8000d3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001014:	2006      	movs	r0, #6
 8001016:	f7ff fe73 	bl	8000d00 <__NVIC_EnableIRQ>

}
 800101a:	bf00      	nop
 800101c:	3720      	adds	r7, #32
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020800 	.word	0x40020800
 8001028:	40020400 	.word	0x40020400

0800102c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <LL_RCC_HSE_Enable+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <LL_RCC_HSE_Enable+0x1c>)
 8001036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <LL_RCC_HSE_IsReady+0x24>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800105c:	bf0c      	ite	eq
 800105e:	2301      	moveq	r3, #1
 8001060:	2300      	movne	r3, #0
 8001062:	b2db      	uxtb	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <LL_RCC_SetSysClkSource+0x24>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f023 0203 	bic.w	r2, r3, #3
 8001084:	4904      	ldr	r1, [pc, #16]	; (8001098 <LL_RCC_SetSysClkSource+0x24>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4313      	orrs	r3, r2
 800108a:	608b      	str	r3, [r1, #8]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40023800 	.word	0x40023800

0800109c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <LL_RCC_GetSysClkSource+0x18>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 030c 	and.w	r3, r3, #12
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800

080010b8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <LL_RCC_SetAHBPrescaler+0x24>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c8:	4904      	ldr	r1, [pc, #16]	; (80010dc <LL_RCC_SetAHBPrescaler+0x24>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	608b      	str	r3, [r1, #8]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40023800 	.word	0x40023800

080010e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <LL_RCC_SetAPB1Prescaler+0x24>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <LL_RCC_SetAPB1Prescaler+0x24>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40023800 	.word	0x40023800

08001108 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001118:	4904      	ldr	r1, [pc, #16]	; (800112c <LL_RCC_SetAPB2Prescaler+0x24>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	608b      	str	r3, [r1, #8]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40023800 	.word	0x40023800

08001130 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <LL_RCC_SetTIMPrescaler+0x28>)
 800113a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800113e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001142:	4905      	ldr	r1, [pc, #20]	; (8001158 <LL_RCC_SetTIMPrescaler+0x28>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4313      	orrs	r3, r2
 8001148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40023800 	.word	0x40023800

0800115c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <LL_RCC_PLL_Enable+0x1c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <LL_RCC_PLL_Enable+0x1c>)
 8001166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <LL_RCC_PLL_IsReady+0x24>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	68f9      	ldr	r1, [r7, #12]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	4311      	orrs	r1, r2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	0192      	lsls	r2, r2, #6
 80011c4:	430a      	orrs	r2, r1
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011d4:	4904      	ldr	r1, [pc, #16]	; (80011e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40023800 	.word	0x40023800
 80011ec:	ffbf8000 	.word	0xffbf8000

080011f0 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8001204:	4013      	ands	r3, r2
 8001206:	68f9      	ldr	r1, [r7, #12]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	4311      	orrs	r1, r2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	0192      	lsls	r2, r2, #6
 8001210:	4311      	orrs	r1, r2
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	4904      	ldr	r1, [pc, #16]	; (8001228 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8001218:	4313      	orrs	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40023800 	.word	0x40023800
 800122c:	f0bf8000 	.word	0xf0bf8000

08001230 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <LL_FLASH_SetLatency+0x24>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 0207 	bic.w	r2, r3, #7
 8001240:	4904      	ldr	r1, [pc, #16]	; (8001254 <LL_FLASH_SetLatency+0x24>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40023c00 	.word	0x40023c00

08001258 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <LL_FLASH_GetLatency+0x18>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0307 	and.w	r3, r3, #7
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023c00 	.word	0x40023c00

08001274 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001284:	4904      	ldr	r1, [pc, #16]	; (8001298 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	600b      	str	r3, [r1, #0]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40007000 	.word	0x40007000

0800129c <Get_USB_Data>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Get_USB_Data (int currentValue) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	if(CDC_IsDataReady()){
 80012a4:	f006 fb28 	bl	80078f8 <CDC_IsDataReady>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d05b      	beq.n	8001366 <Get_USB_Data+0xca>
			if(buffer[0] == 'S'){
 80012ae:	4b31      	ldr	r3, [pc, #196]	; (8001374 <Get_USB_Data+0xd8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b53      	cmp	r3, #83	; 0x53
 80012b6:	d111      	bne.n	80012dc <Get_USB_Data+0x40>
						motorOn = false;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <Get_USB_Data+0xdc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
						blinkerOn = !blinkerOn;
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <Get_USB_Data+0xe0>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf14      	ite	ne
 80012c6:	2301      	movne	r3, #1
 80012c8:	2300      	moveq	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f083 0301 	eor.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b28      	ldr	r3, [pc, #160]	; (800137c <Get_USB_Data+0xe0>)
 80012da:	701a      	strb	r2, [r3, #0]
					}
			if(buffer[0] == 'L'){
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <Get_USB_Data+0xd8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b4c      	cmp	r3, #76	; 0x4c
 80012e4:	d10e      	bne.n	8001304 <Get_USB_Data+0x68>
				blinkerOn = !blinkerOn;
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <Get_USB_Data+0xe0>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f083 0301 	eor.w	r3, r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <Get_USB_Data+0xe0>)
 8001302:	701a      	strb	r2, [r3, #0]
			}
			if(buffer[0] == 'R'){ //Rotate command
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <Get_USB_Data+0xd8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b52      	cmp	r3, #82	; 0x52
 800130c:	d12b      	bne.n	8001366 <Get_USB_Data+0xca>
				blinkerOn = !blinkerOn;
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <Get_USB_Data+0xe0>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <Get_USB_Data+0xe0>)
 800132a:	701a      	strb	r2, [r3, #0]
				motorOn = true;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <Get_USB_Data+0xdc>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
				if(buffer[2] == 'L'){ //Turn left
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <Get_USB_Data+0xd8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3302      	adds	r3, #2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b4c      	cmp	r3, #76	; 0x4c
 800133c:	d106      	bne.n	800134c <Get_USB_Data+0xb0>
					above = false;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <Get_USB_Data+0xe4>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
					targetValue = currentValue - 100;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b64      	subs	r3, #100	; 0x64
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <Get_USB_Data+0xe8>)
 800134a:	6013      	str	r3, [r2, #0]
				}
				if(buffer[2] == 'R'){ //Turn right
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <Get_USB_Data+0xd8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3302      	adds	r3, #2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b52      	cmp	r3, #82	; 0x52
 8001356:	d106      	bne.n	8001366 <Get_USB_Data+0xca>
					above = true;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <Get_USB_Data+0xe4>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
					targetValue = currentValue + 100;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3364      	adds	r3, #100	; 0x64
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <Get_USB_Data+0xe8>)
 8001364:	6013      	str	r3, [r2, #0]
				}

			}

		}
        CDC_FlushRxBuffer_FS();
 8001366:	f006 fad3 	bl	8007910 <CDC_FlushRxBuffer_FS>
    }
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000378 	.word	0x20000378
 8001378:	20000370 	.word	0x20000370
 800137c:	20000000 	.word	0x20000000
 8001380:	20000371 	.word	0x20000371
 8001384:	20000374 	.word	0x20000374

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138e:	f000 fb01 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001392:	f000 f853 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001396:	f7ff fde3 	bl	8000f60 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800139a:	f006 f91f 	bl	80075dc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800139e:	f000 fa0f 	bl	80017c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80013a2:	f7ff fc09 	bl	8000bb8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013a6:	2100      	movs	r1, #0
 80013a8:	481d      	ldr	r0, [pc, #116]	; (8001420 <main+0x98>)
 80013aa:	f002 fa8b 	bl	80038c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80013ae:	2104      	movs	r1, #4
 80013b0:	481b      	ldr	r0, [pc, #108]	; (8001420 <main+0x98>)
 80013b2:	f002 fa87 	bl	80038c4 <HAL_TIM_PWM_Start>

    buffer = CDC_GetRxBuffer_FS();
 80013b6:	f006 fa95 	bl	80078e4 <CDC_GetRxBuffer_FS>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a19      	ldr	r2, [pc, #100]	; (8001424 <main+0x9c>)
 80013be:	6013      	str	r3, [r2, #0]
    	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    	//currentValue = HAL_ADC_GetValue(&hadc1);

    	//if(!motorOn){
    	//buffer = CDC_GetRxBuffer_FS();
    	Get_USB_Data(currentValue);
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff6a 	bl	800129c <Get_USB_Data>


    	if(motorOn){
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <main+0xa0>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <main+0x70>
    		if(above){
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <main+0xa4>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d007      	beq.n	80013e8 <main+0x60>
    			TIM3->CCR1 = TIM3->ARR;
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <main+0xa8>)
 80013da:	4a15      	ldr	r2, [pc, #84]	; (8001430 <main+0xa8>)
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	6353      	str	r3, [r2, #52]	; 0x34
    			TIM3->CCR2 = 0;
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <main+0xa8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38
 80013e6:	e00d      	b.n	8001404 <main+0x7c>
    		}
    		else{
    			TIM3->CCR2 = TIM3->ARR;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <main+0xa8>)
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <main+0xa8>)
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	6393      	str	r3, [r2, #56]	; 0x38
    			TIM3->CCR1 = 0;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <main+0xa8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
 80013f6:	e005      	b.n	8001404 <main+0x7c>
    		}
    	}
    	else{
    		TIM3->CCR1 = 0;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <main+0xa8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
    		TIM3->CCR2 = 0;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <main+0xa8>)
 8001400:	2200      	movs	r2, #0
 8001402:	639a      	str	r2, [r3, #56]	; 0x38

    	//}

    	//Sviesytes junginejimas testui

    	if(blinkerOn){
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <main+0xac>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <main+0x8e>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800140c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001410:	4809      	ldr	r0, [pc, #36]	; (8001438 <main+0xb0>)
 8001412:	f001 f85d 	bl	80024d0 <HAL_GPIO_TogglePin>
    	}
    	HAL_Delay(100);
 8001416:	2064      	movs	r0, #100	; 0x64
 8001418:	f000 fb2e 	bl	8001a78 <HAL_Delay>
    	Get_USB_Data(currentValue);
 800141c:	e7d0      	b.n	80013c0 <main+0x38>
 800141e:	bf00      	nop
 8001420:	200005f8 	.word	0x200005f8
 8001424:	20000378 	.word	0x20000378
 8001428:	20000370 	.word	0x20000370
 800142c:	20000371 	.word	0x20000371
 8001430:	40000400 	.word	0x40000400
 8001434:	20000000 	.word	0x20000000
 8001438:	40020800 	.word	0x40020800

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001440:	2003      	movs	r0, #3
 8001442:	f7ff fef5 	bl	8001230 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001446:	bf00      	nop
 8001448:	f7ff ff06 	bl	8001258 <LL_FLASH_GetLatency>
 800144c:	4603      	mov	r3, r0
 800144e:	2b03      	cmp	r3, #3
 8001450:	d1fa      	bne.n	8001448 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001452:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001456:	f7ff ff0d 	bl	8001274 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800145a:	f7ff fde7 	bl	800102c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800145e:	bf00      	nop
 8001460:	f7ff fdf4 	bl	800104c <LL_RCC_HSE_IsReady>
 8001464:	4603      	mov	r3, r0
 8001466:	2b01      	cmp	r3, #1
 8001468:	d1fa      	bne.n	8001460 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_25, 192, LL_RCC_PLLP_DIV_2);
 800146a:	2300      	movs	r3, #0
 800146c:	22c0      	movs	r2, #192	; 0xc0
 800146e:	2119      	movs	r1, #25
 8001470:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001474:	f7ff fe96 	bl	80011a4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_25, 192, LL_RCC_PLLQ_DIV_4);
 8001478:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800147c:	22c0      	movs	r2, #192	; 0xc0
 800147e:	2119      	movs	r1, #25
 8001480:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001484:	f7ff feb4 	bl	80011f0 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8001488:	f7ff fe68 	bl	800115c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800148c:	bf00      	nop
 800148e:	f7ff fe75 	bl	800117c <LL_RCC_PLL_IsReady>
 8001492:	4603      	mov	r3, r0
 8001494:	2b01      	cmp	r3, #1
 8001496:	d1fa      	bne.n	800148e <SystemClock_Config+0x52>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff fe0d 	bl	80010b8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_16);
 800149e:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
 80014a2:	f7ff fe1d 	bl	80010e0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fe2e 	bl	8001108 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80014ac:	2002      	movs	r0, #2
 80014ae:	f7ff fde1 	bl	8001074 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80014b2:	bf00      	nop
 80014b4:	f7ff fdf2 	bl	800109c <LL_RCC_GetSysClkSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d1fa      	bne.n	80014b4 <SystemClock_Config+0x78>
  {

  }
  LL_SetSystemCoreClock(96000000);
 80014be:	4808      	ldr	r0, [pc, #32]	; (80014e0 <SystemClock_Config+0xa4>)
 80014c0:	f004 fc1c 	bl	8005cfc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80014c4:	200f      	movs	r0, #15
 80014c6:	f000 fa87 	bl	80019d8 <HAL_InitTick>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014d0:	f000 f808 	bl	80014e4 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fe2b 	bl	8001130 <LL_RCC_SetTIMPrescaler>
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	05b8d800 	.word	0x05b8d800

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80014ec:	e7fe      	b.n	80014ec <Error_Handler+0x8>
	...

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_MspInit+0x4c>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_MspInit+0x4c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4013      	ands	r3, r2
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	bf0c      	ite	eq
 8001556:	2301      	moveq	r3, #1
 8001558:	2300      	movne	r3, #0
 800155a:	b2db      	uxtb	r3, r3
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40013c00 	.word	0x40013c00

0800156c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6153      	str	r3, [r2, #20]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40013c00 	.word	0x40013c00

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 fa2e 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff ffab 	bl	8001540 <LL_EXTI_IsActiveFlag_0_31>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <EXTI0_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff ffbb 	bl	800156c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <OTG_FS_IRQHandler+0x10>)
 8001602:	f001 f8cf 	bl	80027a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000981c 	.word	0x2000981c

08001610 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	return 1;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_kill>:

int _kill(int pid, int sig)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800162a:	f006 fdb5 	bl	8008198 <__errno>
 800162e:	4603      	mov	r3, r0
 8001630:	2216      	movs	r2, #22
 8001632:	601a      	str	r2, [r3, #0]
	return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_exit>:

void _exit (int status)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001648:	f04f 31ff 	mov.w	r1, #4294967295
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ffe7 	bl	8001620 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001652:	e7fe      	b.n	8001652 <_exit+0x12>

08001654 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e00a      	b.n	800167c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001666:	f3af 8000 	nop.w
 800166a:	4601      	mov	r1, r0
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60ba      	str	r2, [r7, #8]
 8001672:	b2ca      	uxtb	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbf0      	blt.n	8001666 <_read+0x12>
	}

return len;
 8001684:	687b      	ldr	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e009      	b.n	80016b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf1      	blt.n	80016a0 <_write+0x12>
	}
	return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_close>:

int _close(int file)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ee:	605a      	str	r2, [r3, #4]
	return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_isatty>:

int _isatty(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	return 1;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
	return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f006 fd1a 	bl	8008198 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20020000 	.word	0x20020000
 8001790:	00000400 	.word	0x00000400
 8001794:	2000037c 	.word	0x2000037c
 8001798:	20009c38 	.word	0x20009c38

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c6:	f107 0320 	add.w	r3, r7, #32
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	615a      	str	r2, [r3, #20]
 80017e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017e2:	4b27      	ldr	r3, [pc, #156]	; (8001880 <MX_TIM3_Init+0xc0>)
 80017e4:	4a27      	ldr	r2, [pc, #156]	; (8001884 <MX_TIM3_Init+0xc4>)
 80017e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <MX_TIM3_Init+0xc0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b24      	ldr	r3, [pc, #144]	; (8001880 <MX_TIM3_Init+0xc0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <MX_TIM3_Init+0xc0>)
 80017f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <MX_TIM3_Init+0xc0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_TIM3_Init+0xc0>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001808:	481d      	ldr	r0, [pc, #116]	; (8001880 <MX_TIM3_Init+0xc0>)
 800180a:	f002 f80b 	bl	8003824 <HAL_TIM_PWM_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001814:	f7ff fe66 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001820:	f107 0320 	add.w	r3, r7, #32
 8001824:	4619      	mov	r1, r3
 8001826:	4816      	ldr	r0, [pc, #88]	; (8001880 <MX_TIM3_Init+0xc0>)
 8001828:	f002 fbf0 	bl	800400c <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001832:	f7ff fe57 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001836:	2360      	movs	r3, #96	; 0x60
 8001838:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_TIM3_Init+0xc0>)
 800184e:	f002 f8e9 	bl	8003a24 <HAL_TIM_PWM_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001858:	f7ff fe44 	bl	80014e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2204      	movs	r2, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4807      	ldr	r0, [pc, #28]	; (8001880 <MX_TIM3_Init+0xc0>)
 8001864:	f002 f8de 	bl	8003a24 <HAL_TIM_PWM_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800186e:	f7ff fe39 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001872:	4803      	ldr	r0, [pc, #12]	; (8001880 <MX_TIM3_Init+0xc0>)
 8001874:	f000 f82a 	bl	80018cc <HAL_TIM_MspPostInit>

}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200005f8 	.word	0x200005f8
 8001884:	40000400 	.word	0x40000400

08001888 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10d      	bne.n	80018b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_TIM_PWM_MspInit+0x40>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <HAL_TIM_PWM_MspInit+0x40>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_TIM_PWM_MspInit+0x40>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40000400 	.word	0x40000400
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <HAL_TIM_MspPostInit+0x68>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d11d      	bne.n	800192a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_TIM_MspPostInit+0x6c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a10      	ldr	r2, [pc, #64]	; (8001938 <HAL_TIM_MspPostInit+0x6c>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_TIM_MspPostInit+0x6c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800191a:	2302      	movs	r3, #2
 800191c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <HAL_TIM_MspPostInit+0x70>)
 8001926:	f000 fc4f 	bl	80021c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800192a:	bf00      	nop
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40000400 	.word	0x40000400
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001944:	480d      	ldr	r0, [pc, #52]	; (800197c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001946:	490e      	ldr	r1, [pc, #56]	; (8001980 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800195c:	4c0b      	ldr	r4, [pc, #44]	; (800198c <LoopFillZerobss+0x26>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800196a:	f7ff ff17 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f006 fc19 	bl	80081a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fd09 	bl	8001388 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8001984:	0800afcc 	.word	0x0800afcc
  ldr r2, =_sbss
 8001988:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 800198c:	20009c34 	.word	0x20009c34

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <HAL_Init+0x40>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_Init+0x40>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_Init+0x40>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 fbc1 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	200f      	movs	r0, #15
 80019c4:	f000 f808 	bl	80019d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fd92 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x54>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_InitTick+0x58>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fbd9 	bl	80021ae <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00e      	b.n	8001a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d80a      	bhi.n	8001a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 fba1 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_InitTick+0x5c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	2000000c 	.word	0x2000000c
 8001a34:	20000008 	.word	0x20000008

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	2000000c 	.word	0x2000000c
 8001a5c:	20000640 	.word	0x20000640

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000640 	.word	0x20000640

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffde 	bl	8001a60 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000000c 	.word	0x2000000c

08001ac0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e033      	b.n	8001b3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff f8bc 	bl	8000c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b06:	f023 0302 	bic.w	r3, r3, #2
 8001b0a:	f043 0202 	orr.w	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f94a 	bl	8001dac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f023 0303 	bic.w	r3, r3, #3
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2e:	e001      	b.n	8001b34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1c>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e113      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x244>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b09      	cmp	r3, #9
 8001b72:	d925      	bls.n	8001bc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68d9      	ldr	r1, [r3, #12]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	3b1e      	subs	r3, #30
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43da      	mvns	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	400a      	ands	r2, r1
 8001b98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68d9      	ldr	r1, [r3, #12]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	4603      	mov	r3, r0
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4403      	add	r3, r0
 8001bb2:	3b1e      	subs	r3, #30
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	e022      	b.n	8001c06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6919      	ldr	r1, [r3, #16]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	400a      	ands	r2, r1
 8001be2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6919      	ldr	r1, [r3, #16]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4403      	add	r3, r0
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d824      	bhi.n	8001c58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b05      	subs	r3, #5
 8001c20:	221f      	movs	r2, #31
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	3b05      	subs	r3, #5
 8001c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	635a      	str	r2, [r3, #52]	; 0x34
 8001c56:	e04c      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d824      	bhi.n	8001caa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b23      	subs	r3, #35	; 0x23
 8001c72:	221f      	movs	r2, #31
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	400a      	ands	r2, r1
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b23      	subs	r3, #35	; 0x23
 8001c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca8:	e023      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b41      	subs	r3, #65	; 0x41
 8001cbc:	221f      	movs	r2, #31
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	400a      	ands	r2, r1
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b41      	subs	r3, #65	; 0x41
 8001ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf2:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_ADC_ConfigChannel+0x250>)
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a28      	ldr	r2, [pc, #160]	; (8001d9c <HAL_ADC_ConfigChannel+0x254>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d10f      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1d8>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b12      	cmp	r3, #18
 8001d06:	d10b      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <HAL_ADC_ConfigChannel+0x254>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d12b      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x23a>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <HAL_ADC_ConfigChannel+0x258>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d003      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x1f4>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b11      	cmp	r3, #17
 8001d3a:	d122      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_ADC_ConfigChannel+0x258>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d111      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_ADC_ConfigChannel+0x25c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_ADC_ConfigChannel+0x260>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	0c9a      	lsrs	r2, r3, #18
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	40012000 	.word	0x40012000
 8001da0:	10000012 	.word	0x10000012
 8001da4:	20000004 	.word	0x20000004
 8001da8:	431bde83 	.word	0x431bde83

08001dac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db4:	4b79      	ldr	r3, [pc, #484]	; (8001f9c <ADC_Init+0x1f0>)
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	021a      	lsls	r2, r3, #8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6899      	ldr	r1, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <ADC_Init+0x1f4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d022      	beq.n	8001e8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6899      	ldr	r1, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e00f      	b.n	8001eaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0202 	bic.w	r2, r2, #2
 8001eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7e1b      	ldrb	r3, [r3, #24]
 8001ec4:	005a      	lsls	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ef6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6859      	ldr	r1, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	3b01      	subs	r3, #1
 8001f04:	035a      	lsls	r2, r3, #13
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	e007      	b.n	8001f20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	051a      	lsls	r2, r3, #20
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6899      	ldr	r1, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f62:	025a      	lsls	r2, r3, #9
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	029a      	lsls	r2, r3, #10
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40012300 	.word	0x40012300
 8001fa0:	0f000001 	.word	0x0f000001

08001fa4 <__NVIC_SetPriorityGrouping>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff8e 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff29 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff3e 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff8e 	bl	8002098 <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff31 	bl	8002008 <__NVIC_EnableIRQ>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffa2 	bl	8002100 <SysTick_Config>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	e159      	b.n	8002498 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e4:	2201      	movs	r2, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	f040 8148 	bne.w	8002492 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d005      	beq.n	800221a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	2b02      	cmp	r3, #2
 8002218:	d130      	bne.n	800227c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002250:	2201      	movs	r2, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 0201 	and.w	r2, r3, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b03      	cmp	r3, #3
 8002286:	d017      	beq.n	80022b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d123      	bne.n	800230c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0203 	and.w	r2, r3, #3
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a2 	beq.w	8002492 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b57      	ldr	r3, [pc, #348]	; (80024b0 <HAL_GPIO_Init+0x2e8>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a56      	ldr	r2, [pc, #344]	; (80024b0 <HAL_GPIO_Init+0x2e8>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235c:	6453      	str	r3, [r2, #68]	; 0x44
 800235e:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <HAL_GPIO_Init+0x2e8>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800236a:	4a52      	ldr	r2, [pc, #328]	; (80024b4 <HAL_GPIO_Init+0x2ec>)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a49      	ldr	r2, [pc, #292]	; (80024b8 <HAL_GPIO_Init+0x2f0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d019      	beq.n	80023ca <HAL_GPIO_Init+0x202>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a48      	ldr	r2, [pc, #288]	; (80024bc <HAL_GPIO_Init+0x2f4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_GPIO_Init+0x1fe>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <HAL_GPIO_Init+0x2f8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00d      	beq.n	80023c2 <HAL_GPIO_Init+0x1fa>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a46      	ldr	r2, [pc, #280]	; (80024c4 <HAL_GPIO_Init+0x2fc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <HAL_GPIO_Init+0x1f6>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a45      	ldr	r2, [pc, #276]	; (80024c8 <HAL_GPIO_Init+0x300>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_GPIO_Init+0x1f2>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e008      	b.n	80023cc <HAL_GPIO_Init+0x204>
 80023ba:	2307      	movs	r3, #7
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x204>
 80023be:	2303      	movs	r3, #3
 80023c0:	e004      	b.n	80023cc <HAL_GPIO_Init+0x204>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e002      	b.n	80023cc <HAL_GPIO_Init+0x204>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_GPIO_Init+0x204>
 80023ca:	2300      	movs	r3, #0
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	f002 0203 	and.w	r2, r2, #3
 80023d2:	0092      	lsls	r2, r2, #2
 80023d4:	4093      	lsls	r3, r2
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023dc:	4935      	ldr	r1, [pc, #212]	; (80024b4 <HAL_GPIO_Init+0x2ec>)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	3302      	adds	r3, #2
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ea:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_GPIO_Init+0x304>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800240e:	4a2f      	ldr	r2, [pc, #188]	; (80024cc <HAL_GPIO_Init+0x304>)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002414:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <HAL_GPIO_Init+0x304>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002438:	4a24      	ldr	r2, [pc, #144]	; (80024cc <HAL_GPIO_Init+0x304>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_GPIO_Init+0x304>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002462:	4a1a      	ldr	r2, [pc, #104]	; (80024cc <HAL_GPIO_Init+0x304>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_GPIO_Init+0x304>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800248c:	4a0f      	ldr	r2, [pc, #60]	; (80024cc <HAL_GPIO_Init+0x304>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b0f      	cmp	r3, #15
 800249c:	f67f aea2 	bls.w	80021e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3724      	adds	r7, #36	; 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40013800 	.word	0x40013800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40020400 	.word	0x40020400
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020c00 	.word	0x40020c00
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40013c00 	.word	0x40013c00

080024d0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43d9      	mvns	r1, r3
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	400b      	ands	r3, r1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002506:	b08f      	sub	sp, #60	; 0x3c
 8002508:	af0a      	add	r7, sp, #40	; 0x28
 800250a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e10f      	b.n	8002736 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d106      	bne.n	8002536 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f005 fb27 	bl	8007b84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2203      	movs	r2, #3
 800253a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f002 f96c 	bl	8004832 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	687e      	ldr	r6, [r7, #4]
 8002562:	466d      	mov	r5, sp
 8002564:	f106 0410 	add.w	r4, r6, #16
 8002568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800256c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002570:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002574:	e885 0003 	stmia.w	r5, {r0, r1}
 8002578:	1d33      	adds	r3, r6, #4
 800257a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800257c:	6838      	ldr	r0, [r7, #0]
 800257e:	f002 f844 	bl	800460a <USB_CoreInit>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0d0      	b.n	8002736 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f002 f95a 	bl	8004854 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e04a      	b.n	800263c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	333d      	adds	r3, #61	; 0x3d
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	333c      	adds	r3, #60	; 0x3c
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	b298      	uxth	r0, r3
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	3342      	adds	r3, #66	; 0x42
 80025e2:	4602      	mov	r2, r0
 80025e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	333f      	adds	r3, #63	; 0x3f
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3344      	adds	r3, #68	; 0x44
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3348      	adds	r3, #72	; 0x48
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	3350      	adds	r3, #80	; 0x50
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	3301      	adds	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	429a      	cmp	r2, r3
 8002644:	d3af      	bcc.n	80025a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e044      	b.n	80026d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	3301      	adds	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d3b5      	bcc.n	800264c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	687e      	ldr	r6, [r7, #4]
 80026e8:	466d      	mov	r5, sp
 80026ea:	f106 0410 	add.w	r4, r6, #16
 80026ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80026fe:	1d33      	adds	r3, r6, #4
 8002700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002702:	6838      	ldr	r0, [r7, #0]
 8002704:	f002 f8f2 	bl	80048ec <USB_DevInit>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00d      	b.n	8002736 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 f96e 	bl	8005a10 <USB_DevDisconnect>

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800273e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_PCD_Start+0x1c>
 8002756:	2302      	movs	r3, #2
 8002758:	e020      	b.n	800279c <HAL_PCD_Start+0x5e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	2b01      	cmp	r3, #1
 8002768:	d109      	bne.n	800277e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800276e:	2b01      	cmp	r3, #1
 8002770:	d005      	beq.n	800277e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f002 f844 	bl	8004810 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f003 f91e 	bl	80059ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b08d      	sub	sp, #52	; 0x34
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 f9dc 	bl	8005b78 <USB_GetMode>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 839d 	bne.w	8002f02 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 f940 	bl	8005a52 <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8393 	beq.w	8002f00 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 f937 	bl	8005a52 <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d107      	bne.n	80027fe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f002 0202 	and.w	r2, r2, #2
 80027fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 f925 	bl	8005a52 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b10      	cmp	r3, #16
 8002810:	d161      	bne.n	80028d6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0210 	bic.w	r2, r2, #16
 8002820:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f003 020f 	and.w	r2, r3, #15
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	0c5b      	lsrs	r3, r3, #17
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	2b02      	cmp	r3, #2
 800284c:	d124      	bne.n	8002898 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d035      	beq.n	80028c6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002868:	b29b      	uxth	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	6a38      	ldr	r0, [r7, #32]
 800286e:	f002 ff5c 	bl	800572a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800287e:	441a      	add	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002890:	441a      	add	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	619a      	str	r2, [r3, #24]
 8002896:	e016      	b.n	80028c6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	0c5b      	lsrs	r3, r3, #17
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d110      	bne.n	80028c6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028aa:	2208      	movs	r2, #8
 80028ac:	4619      	mov	r1, r3
 80028ae:	6a38      	ldr	r0, [r7, #32]
 80028b0:	f002 ff3b 	bl	800572a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c0:	441a      	add	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0210 	orr.w	r2, r2, #16
 80028d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 f8b9 	bl	8005a52 <USB_ReadInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028ea:	d16e      	bne.n	80029ca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 f8bf 	bl	8005a78 <USB_ReadDevAllOutEpInterrupt>
 80028fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80028fc:	e062      	b.n	80029c4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d057      	beq.n	80029b8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f003 f8e4 	bl	8005ae0 <USB_ReadDevOutEPInterrupt>
 8002918:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00c      	beq.n	800293e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002930:	461a      	mov	r2, r3
 8002932:	2301      	movs	r3, #1
 8002934:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fdb1 	bl	80034a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00c      	beq.n	8002962 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002954:	461a      	mov	r2, r3
 8002956:	2308      	movs	r3, #8
 8002958:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800295a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 feab 	bl	80036b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	4413      	add	r3, r2
 8002974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002978:	461a      	mov	r2, r3
 800297a:	2310      	movs	r3, #16
 800297c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002994:	461a      	mov	r2, r3
 8002996:	2320      	movs	r3, #32
 8002998:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b0:	461a      	mov	r2, r3
 80029b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	3301      	adds	r3, #1
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d199      	bne.n	80028fe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 f83f 	bl	8005a52 <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029de:	f040 80c0 	bne.w	8002b62 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 f860 	bl	8005aac <USB_ReadDevAllInEpInterrupt>
 80029ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029f2:	e0b2      	b.n	8002b5a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80a7 	beq.w	8002b4e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 f886 	bl	8005b1c <USB_ReadDevInEPInterrupt>
 8002a10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d057      	beq.n	8002acc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	2201      	movs	r2, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69f9      	ldr	r1, [r7, #28]
 8002a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2301      	movs	r3, #1
 8002a50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d132      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3348      	adds	r3, #72	; 0x48
 8002a6a:	6819      	ldr	r1, [r3, #0]
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4403      	add	r3, r0
 8002a7a:	3344      	adds	r3, #68	; 0x44
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4419      	add	r1, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4403      	add	r3, r0
 8002a8e:	3348      	adds	r3, #72	; 0x48
 8002a90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d113      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x31c>
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3350      	adds	r3, #80	; 0x50
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d108      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2101      	movs	r1, #1
 8002abc:	f003 f88e 	bl	8005bdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f005 f8dd 	bl	8007c86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002afe:	461a      	mov	r2, r3
 8002b00:	2310      	movs	r3, #16
 8002b02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2340      	movs	r3, #64	; 0x40
 8002b1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b36:	461a      	mov	r2, r3
 8002b38:	2302      	movs	r3, #2
 8002b3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fc1b 	bl	8003384 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	3301      	adds	r3, #1
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f47f af49 	bne.w	80029f4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 ff73 	bl	8005a52 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b76:	d122      	bne.n	8002bbe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d108      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fe27 	bl	80037f4 <HAL_PCDEx_LPM_Callback>
 8002ba6:	e002      	b.n	8002bae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f005 f8d9 	bl	8007d60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 ff45 	bl	8005a52 <USB_ReadInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd2:	d112      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d102      	bne.n	8002bea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f005 f895 	bl	8007d14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002bf8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 ff27 	bl	8005a52 <USB_ReadInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0e:	f040 80c7 	bne.w	8002da0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2110      	movs	r1, #16
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 ffc1 	bl	8004bb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c36:	e056      	b.n	8002ce6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c44:	461a      	mov	r2, r3
 8002c46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5c:	0151      	lsls	r1, r2, #5
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	440a      	add	r2, r1
 8002c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c6a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7c:	0151      	lsls	r1, r2, #5
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	440a      	add	r2, r1
 8002c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb0:	0151      	lsls	r1, r2, #5
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	440a      	add	r2, r1
 8002cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd0:	0151      	lsls	r1, r2, #5
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	440a      	add	r2, r1
 8002cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cde:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d3a3      	bcc.n	8002c38 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cfe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d016      	beq.n	8002d3a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d1c:	f043 030b 	orr.w	r3, r3, #11
 8002d20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d32:	f043 030b 	orr.w	r3, r3, #11
 8002d36:	6453      	str	r3, [r2, #68]	; 0x44
 8002d38:	e015      	b.n	8002d66 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d60:	f043 030b 	orr.w	r3, r3, #11
 8002d64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f002 ff26 	bl	8005bdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 fe54 	bl	8005a52 <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db4:	d124      	bne.n	8002e00 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 feea 	bl	8005b94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 ff52 	bl	8004c6e <USB_GetDevSpeed>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681c      	ldr	r4, [r3, #0]
 8002dd6:	f000 fd19 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8002dda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	4620      	mov	r0, r4
 8002de6:	f001 fc71 	bl	80046cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f004 ff73 	bl	8007cd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fe24 	bl	8005a52 <USB_ReadInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d10a      	bne.n	8002e2a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f004 ff50 	bl	8007cba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f002 0208 	and.w	r2, r2, #8
 8002e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 fe0f 	bl	8005a52 <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e3e:	d10f      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f004 ffa8 	bl	8007da0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fdf4 	bl	8005a52 <USB_ReadInterrupts>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e74:	d10f      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f004 ff7b 	bl	8007d7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f002 fdd9 	bl	8005a52 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d10a      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f004 ff89 	bl	8007dc4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 fdc3 	bl	8005a52 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d115      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f004 ff79 	bl	8007de0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	e000      	b.n	8002f02 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002f00:	bf00      	nop
    }
  }
}
 8002f02:	3734      	adds	r7, #52	; 0x34
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}

08002f08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_PCD_SetAddress+0x1a>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e013      	b.n	8002f4a <HAL_PCD_SetAddress+0x42>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 fd21 	bl	8005982 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	4608      	mov	r0, r1
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4603      	mov	r3, r0
 8002f62:	70fb      	strb	r3, [r7, #3]
 8002f64:	460b      	mov	r3, r1
 8002f66:	803b      	strh	r3, [r7, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	da0f      	bge.n	8002f98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 020f 	and.w	r2, r3, #15
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	3338      	adds	r3, #56	; 0x38
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	705a      	strb	r2, [r3, #1]
 8002f96:	e00f      	b.n	8002fb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 020f 	and.w	r2, r3, #15
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	3304      	adds	r3, #4
 8002fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fc4:	883a      	ldrh	r2, [r7, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	78ba      	ldrb	r2, [r7, #2]
 8002fce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fe2:	78bb      	ldrb	r3, [r7, #2]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d102      	bne.n	8002fee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_PCD_EP_Open+0xaa>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e00e      	b.n	800301a <HAL_PCD_EP_Open+0xc8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fe54 	bl	8004cb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003018:	7afb      	ldrb	r3, [r7, #11]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800302e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003032:	2b00      	cmp	r3, #0
 8003034:	da0f      	bge.n	8003056 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	3338      	adds	r3, #56	; 0x38
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	3304      	adds	r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	705a      	strb	r2, [r3, #1]
 8003054:	e00f      	b.n	8003076 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_PCD_EP_Close+0x6e>
 800308c:	2302      	movs	r3, #2
 800308e:	e00e      	b.n	80030ae <HAL_PCD_EP_Close+0x8c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68f9      	ldr	r1, [r7, #12]
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 fe92 	bl	8004dc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	460b      	mov	r3, r1
 80030c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2200      	movs	r2, #0
 80030f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2200      	movs	r2, #0
 80030f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d102      	bne.n	8003112 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	6979      	ldr	r1, [r7, #20]
 800312a:	f002 f96d 	bl	8005408 <USB_EP0StartXfer>
 800312e:	e008      	b.n	8003142 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6979      	ldr	r1, [r7, #20]
 800313e:	f001 ff1f 	bl	8004f80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	460b      	mov	r3, r1
 800318a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	3338      	adds	r3, #56	; 0x38
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	3304      	adds	r3, #4
 80031a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2201      	movs	r2, #1
 80031ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031bc:	7afb      	ldrb	r3, [r7, #11]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	6979      	ldr	r1, [r7, #20]
 80031ee:	f002 f90b 	bl	8005408 <USB_EP0StartXfer>
 80031f2:	e008      	b.n	8003206 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	f001 febd 	bl	8004f80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	f003 020f 	and.w	r2, r3, #15
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	429a      	cmp	r2, r3
 8003228:	d901      	bls.n	800322e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e050      	b.n	80032d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800322e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003232:	2b00      	cmp	r3, #0
 8003234:	da0f      	bge.n	8003256 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 020f 	and.w	r2, r3, #15
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	3338      	adds	r3, #56	; 0x38
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	705a      	strb	r2, [r3, #1]
 8003254:	e00d      	b.n	8003272 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	4413      	add	r3, r2
 8003268:	3304      	adds	r3, #4
 800326a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_PCD_EP_SetStall+0x82>
 800328e:	2302      	movs	r3, #2
 8003290:	e01e      	b.n	80032d0 <HAL_PCD_EP_SetStall+0xc0>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68f9      	ldr	r1, [r7, #12]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 fa9a 	bl	80057da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	b2d9      	uxtb	r1, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032c0:	461a      	mov	r2, r3
 80032c2:	f002 fc8b 	bl	8005bdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	f003 020f 	and.w	r2, r3, #15
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d901      	bls.n	80032f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e042      	b.n	800337c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	da0f      	bge.n	800331e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	f003 020f 	and.w	r2, r3, #15
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	3338      	adds	r3, #56	; 0x38
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	705a      	strb	r2, [r3, #1]
 800331c:	e00f      	b.n	800333e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_PCD_EP_ClrStall+0x86>
 800335a:	2302      	movs	r3, #2
 800335c:	e00e      	b.n	800337c <HAL_PCD_EP_ClrStall+0xa4>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68f9      	ldr	r1, [r7, #12]
 800336c:	4618      	mov	r0, r3
 800336e:	f002 faa2 	bl	80058b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af02      	add	r7, sp, #8
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	3338      	adds	r3, #56	; 0x38
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	3304      	adds	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d901      	bls.n	80033bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e06c      	b.n	8003496 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d902      	bls.n	80033d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	3303      	adds	r3, #3
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033e0:	e02b      	b.n	800343a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d902      	bls.n	80033fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3303      	adds	r3, #3
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	68d9      	ldr	r1, [r3, #12]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003416:	b2db      	uxtb	r3, r3
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	4603      	mov	r3, r0
 800341c:	6978      	ldr	r0, [r7, #20]
 800341e:	f002 f946 	bl	80056ae <USB_WritePacket>

    ep->xfer_buff  += len;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	441a      	add	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	b29b      	uxth	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	429a      	cmp	r2, r3
 800344e:	d809      	bhi.n	8003464 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	699a      	ldr	r2, [r3, #24]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003458:	429a      	cmp	r2, r3
 800345a:	d203      	bcs.n	8003464 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1be      	bne.n	80033e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	429a      	cmp	r2, r3
 800346e:	d811      	bhi.n	8003494 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	2201      	movs	r2, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	43db      	mvns	r3, r3
 800348a:	6939      	ldr	r1, [r7, #16]
 800348c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003490:	4013      	ands	r3, r2
 8003492:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	333c      	adds	r3, #60	; 0x3c
 80034b8:	3304      	adds	r3, #4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	f040 80a0 	bne.w	8003618 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d015      	beq.n	800350e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a72      	ldr	r2, [pc, #456]	; (80036b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	f240 80dd 	bls.w	80036a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80d7 	beq.w	80036a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003504:	461a      	mov	r2, r3
 8003506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	e0cb      	b.n	80036a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	2320      	movs	r3, #32
 8003528:	6093      	str	r3, [r2, #8]
 800352a:	e0bc      	b.n	80036a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 80b7 	bne.w	80036a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a5d      	ldr	r2, [pc, #372]	; (80036b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d90f      	bls.n	8003560 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003556:	461a      	mov	r2, r3
 8003558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355c:	6093      	str	r3, [r2, #8]
 800355e:	e0a2      	b.n	80036a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003572:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	0159      	lsls	r1, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	440b      	add	r3, r1
 800357c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003586:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4403      	add	r3, r0
 8003596:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800359a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4403      	add	r3, r0
 80035be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4419      	add	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4403      	add	r3, r0
 80035d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d114      	bne.n	800360a <PCD_EP_OutXfrComplete_int+0x16a>
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d108      	bne.n	800360a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003602:	461a      	mov	r2, r3
 8003604:	2101      	movs	r1, #1
 8003606:	f002 fae9 	bl	8005bdc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f004 fb1d 	bl	8007c50 <HAL_PCD_DataOutStageCallback>
 8003616:	e046      	b.n	80036a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a26      	ldr	r2, [pc, #152]	; (80036b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d124      	bne.n	800366a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	461a      	mov	r2, r3
 8003638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800363c:	6093      	str	r3, [r2, #8]
 800363e:	e032      	b.n	80036a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003656:	461a      	mov	r2, r3
 8003658:	2320      	movs	r3, #32
 800365a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f004 faf4 	bl	8007c50 <HAL_PCD_DataOutStageCallback>
 8003668:	e01d      	b.n	80036a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d114      	bne.n	800369a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d108      	bne.n	800369a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003692:	461a      	mov	r2, r3
 8003694:	2100      	movs	r1, #0
 8003696:	f002 faa1 	bl	8005bdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f004 fad5 	bl	8007c50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	4f54300a 	.word	0x4f54300a
 80036b4:	4f54310a 	.word	0x4f54310a

080036b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	333c      	adds	r3, #60	; 0x3c
 80036d0:	3304      	adds	r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a15      	ldr	r2, [pc, #84]	; (8003740 <PCD_EP_OutSetupPacket_int+0x88>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d90e      	bls.n	800370c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f004 fa8d 	bl	8007c2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <PCD_EP_OutSetupPacket_int+0x88>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d90c      	bls.n	8003734 <PCD_EP_OutSetupPacket_int+0x7c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d108      	bne.n	8003734 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800372c:	461a      	mov	r2, r3
 800372e:	2101      	movs	r1, #1
 8003730:	f002 fa54 	bl	8005bdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	4f54300a 	.word	0x4f54300a

08003744 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
 8003750:	4613      	mov	r3, r2
 8003752:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d107      	bne.n	8003772 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003762:	883b      	ldrh	r3, [r7, #0]
 8003764:	0419      	lsls	r1, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	430a      	orrs	r2, r1
 800376e:	629a      	str	r2, [r3, #40]	; 0x28
 8003770:	e028      	b.n	80037c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	4413      	add	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e00d      	b.n	80037a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	3340      	adds	r3, #64	; 0x40
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	3301      	adds	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d3ec      	bcc.n	8003786 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037ac:	883b      	ldrh	r3, [r7, #0]
 80037ae:	0418      	lsls	r0, r3, #16
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	4302      	orrs	r2, r0
 80037bc:	3340      	adds	r3, #64	; 0x40
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	887a      	ldrh	r2, [r7, #2]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_RCC_GetHCLKFreq+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000004 	.word	0x20000004

08003824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e041      	b.n	80038ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fe f81c 	bl	8001888 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f000 f9a0 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_TIM_PWM_Start+0x24>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e022      	b.n	800392e <HAL_TIM_PWM_Start+0x6a>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d109      	bne.n	8003902 <HAL_TIM_PWM_Start+0x3e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	e015      	b.n	800392e <HAL_TIM_PWM_Start+0x6a>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d109      	bne.n	800391c <HAL_TIM_PWM_Start+0x58>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e008      	b.n	800392e <HAL_TIM_PWM_Start+0x6a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e068      	b.n	8003a08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d104      	bne.n	8003946 <HAL_TIM_PWM_Start+0x82>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003944:	e013      	b.n	800396e <HAL_TIM_PWM_Start+0xaa>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b04      	cmp	r3, #4
 800394a:	d104      	bne.n	8003956 <HAL_TIM_PWM_Start+0x92>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003954:	e00b      	b.n	800396e <HAL_TIM_PWM_Start+0xaa>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d104      	bne.n	8003966 <HAL_TIM_PWM_Start+0xa2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003964:	e003      	b.n	800396e <HAL_TIM_PWM_Start+0xaa>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2201      	movs	r2, #1
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fb22 	bl	8003fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <HAL_TIM_PWM_Start+0x14c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d107      	bne.n	8003996 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_TIM_PWM_Start+0x14c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d018      	beq.n	80039d2 <HAL_TIM_PWM_Start+0x10e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d013      	beq.n	80039d2 <HAL_TIM_PWM_Start+0x10e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_TIM_PWM_Start+0x150>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_TIM_PWM_Start+0x10e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <HAL_TIM_PWM_Start+0x154>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_TIM_PWM_Start+0x10e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <HAL_TIM_PWM_Start+0x158>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_TIM_PWM_Start+0x10e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <HAL_TIM_PWM_Start+0x15c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d111      	bne.n	80039f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b06      	cmp	r3, #6
 80039e2:	d010      	beq.n	8003a06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f4:	e007      	b.n	8003a06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40010000 	.word	0x40010000
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40000800 	.word	0x40000800
 8003a1c:	40000c00 	.word	0x40000c00
 8003a20:	40014000 	.word	0x40014000

08003a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e0ae      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	f200 809f 	bhi.w	8003b90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a8d 	.word	0x08003a8d
 8003a5c:	08003b91 	.word	0x08003b91
 8003a60:	08003b91 	.word	0x08003b91
 8003a64:	08003b91 	.word	0x08003b91
 8003a68:	08003acd 	.word	0x08003acd
 8003a6c:	08003b91 	.word	0x08003b91
 8003a70:	08003b91 	.word	0x08003b91
 8003a74:	08003b91 	.word	0x08003b91
 8003a78:	08003b0f 	.word	0x08003b0f
 8003a7c:	08003b91 	.word	0x08003b91
 8003a80:	08003b91 	.word	0x08003b91
 8003a84:	08003b91 	.word	0x08003b91
 8003a88:	08003b4f 	.word	0x08003b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f908 	bl	8003ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0208 	orr.w	r2, r2, #8
 8003aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0204 	bic.w	r2, r2, #4
 8003ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6999      	ldr	r1, [r3, #24]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	619a      	str	r2, [r3, #24]
      break;
 8003aca:	e064      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f94e 	bl	8003d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6999      	ldr	r1, [r3, #24]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	021a      	lsls	r2, r3, #8
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	619a      	str	r2, [r3, #24]
      break;
 8003b0c:	e043      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f999 	bl	8003e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0208 	orr.w	r2, r2, #8
 8003b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0204 	bic.w	r2, r2, #4
 8003b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69d9      	ldr	r1, [r3, #28]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	61da      	str	r2, [r3, #28]
      break;
 8003b4c:	e023      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 f9e3 	bl	8003f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69d9      	ldr	r1, [r3, #28]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	021a      	lsls	r2, r3, #8
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	61da      	str	r2, [r3, #28]
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	75fb      	strb	r3, [r7, #23]
      break;
 8003b94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a34      	ldr	r2, [pc, #208]	; (8003c8c <TIM_Base_SetConfig+0xe4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00f      	beq.n	8003be0 <TIM_Base_SetConfig+0x38>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d00b      	beq.n	8003be0 <TIM_Base_SetConfig+0x38>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a31      	ldr	r2, [pc, #196]	; (8003c90 <TIM_Base_SetConfig+0xe8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <TIM_Base_SetConfig+0x38>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a30      	ldr	r2, [pc, #192]	; (8003c94 <TIM_Base_SetConfig+0xec>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_Base_SetConfig+0x38>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a2f      	ldr	r2, [pc, #188]	; (8003c98 <TIM_Base_SetConfig+0xf0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d108      	bne.n	8003bf2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a25      	ldr	r2, [pc, #148]	; (8003c8c <TIM_Base_SetConfig+0xe4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01b      	beq.n	8003c32 <TIM_Base_SetConfig+0x8a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d017      	beq.n	8003c32 <TIM_Base_SetConfig+0x8a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a22      	ldr	r2, [pc, #136]	; (8003c90 <TIM_Base_SetConfig+0xe8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <TIM_Base_SetConfig+0x8a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a21      	ldr	r2, [pc, #132]	; (8003c94 <TIM_Base_SetConfig+0xec>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00f      	beq.n	8003c32 <TIM_Base_SetConfig+0x8a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <TIM_Base_SetConfig+0xf0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00b      	beq.n	8003c32 <TIM_Base_SetConfig+0x8a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <TIM_Base_SetConfig+0xf4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <TIM_Base_SetConfig+0x8a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <TIM_Base_SetConfig+0xf8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_Base_SetConfig+0x8a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <TIM_Base_SetConfig+0xfc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d108      	bne.n	8003c44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <TIM_Base_SetConfig+0xe4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d103      	bne.n	8003c78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	615a      	str	r2, [r3, #20]
}
 8003c7e:	bf00      	nop
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40014400 	.word	0x40014400
 8003ca4:	40014800 	.word	0x40014800

08003ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f023 0201 	bic.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 0302 	bic.w	r3, r3, #2
 8003cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <TIM_OC1_SetConfig+0xc8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d10c      	bne.n	8003d1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 0308 	bic.w	r3, r3, #8
 8003d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <TIM_OC1_SetConfig+0xc8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d111      	bne.n	8003d4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40010000 	.word	0x40010000

08003d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0210 	bic.w	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0320 	bic.w	r3, r3, #32
 8003dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <TIM_OC2_SetConfig+0xd4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10d      	bne.n	8003df0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <TIM_OC2_SetConfig+0xd4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d113      	bne.n	8003e20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000

08003e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0303 	bic.w	r3, r3, #3
 8003e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <TIM_OC3_SetConfig+0xd0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10d      	bne.n	8003ec6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a14      	ldr	r2, [pc, #80]	; (8003f1c <TIM_OC3_SetConfig+0xd0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d113      	bne.n	8003ef6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	621a      	str	r2, [r3, #32]
}
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40010000 	.word	0x40010000

08003f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	031b      	lsls	r3, r3, #12
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <TIM_OC4_SetConfig+0x9c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d109      	bne.n	8003f94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	019b      	lsls	r3, r3, #6
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40010000 	.word	0x40010000

08003fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1a      	ldr	r2, [r3, #32]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1a      	ldr	r2, [r3, #32]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004020:	2302      	movs	r3, #2
 8004022:	e050      	b.n	80040c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d018      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d013      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00e      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a16      	ldr	r2, [pc, #88]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d009      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10c      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40014000 	.word	0x40014000

080040e8 <LL_EXTI_EnableIT_0_31>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <LL_EXTI_EnableIT_0_31+0x20>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4904      	ldr	r1, [pc, #16]	; (8004108 <LL_EXTI_EnableIT_0_31+0x20>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40013c00 	.word	0x40013c00

0800410c <LL_EXTI_DisableIT_0_31>:
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <LL_EXTI_DisableIT_0_31+0x24>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	43db      	mvns	r3, r3
 800411c:	4904      	ldr	r1, [pc, #16]	; (8004130 <LL_EXTI_DisableIT_0_31+0x24>)
 800411e:	4013      	ands	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40013c00 	.word	0x40013c00

08004134 <LL_EXTI_EnableEvent_0_31>:
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <LL_EXTI_EnableEvent_0_31+0x20>)
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	4904      	ldr	r1, [pc, #16]	; (8004154 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4313      	orrs	r3, r2
 8004146:	604b      	str	r3, [r1, #4]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40013c00 	.word	0x40013c00

08004158 <LL_EXTI_DisableEvent_0_31>:
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	43db      	mvns	r3, r3
 8004168:	4904      	ldr	r1, [pc, #16]	; (800417c <LL_EXTI_DisableEvent_0_31+0x24>)
 800416a:	4013      	ands	r3, r2
 800416c:	604b      	str	r3, [r1, #4]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40013c00 	.word	0x40013c00

08004180 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	4904      	ldr	r1, [pc, #16]	; (80041a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40013c00 	.word	0x40013c00

080041a4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	4904      	ldr	r1, [pc, #16]	; (80041c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40013c00 	.word	0x40013c00

080041cc <LL_EXTI_EnableFallingTrig_0_31>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	4904      	ldr	r1, [pc, #16]	; (80041ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60cb      	str	r3, [r1, #12]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40013c00 	.word	0x40013c00

080041f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	43db      	mvns	r3, r3
 8004200:	4904      	ldr	r1, [pc, #16]	; (8004214 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004202:	4013      	ands	r3, r2
 8004204:	60cb      	str	r3, [r1, #12]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40013c00 	.word	0x40013c00

08004218 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	791b      	ldrb	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d065      	beq.n	80042f8 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d06c      	beq.n	800430e <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	795b      	ldrb	r3, [r3, #5]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d01c      	beq.n	8004276 <LL_EXTI_Init+0x5e>
 800423c:	2b02      	cmp	r3, #2
 800423e:	dc25      	bgt.n	800428c <LL_EXTI_Init+0x74>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <LL_EXTI_Init+0x32>
 8004244:	2b01      	cmp	r3, #1
 8004246:	d00b      	beq.n	8004260 <LL_EXTI_Init+0x48>
 8004248:	e020      	b.n	800428c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ff82 	bl	8004158 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff45 	bl	80040e8 <LL_EXTI_EnableIT_0_31>
          break;
 800425e:	e018      	b.n	8004292 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff51 	bl	800410c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff60 	bl	8004134 <LL_EXTI_EnableEvent_0_31>
          break;
 8004274:	e00d      	b.n	8004292 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ff34 	bl	80040e8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff55 	bl	8004134 <LL_EXTI_EnableEvent_0_31>
          break;
 800428a:	e002      	b.n	8004292 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
          break;
 8004290:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	799b      	ldrb	r3, [r3, #6]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d039      	beq.n	800430e <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	799b      	ldrb	r3, [r3, #6]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d01c      	beq.n	80042dc <LL_EXTI_Init+0xc4>
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	dc25      	bgt.n	80042f2 <LL_EXTI_Init+0xda>
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d002      	beq.n	80042b0 <LL_EXTI_Init+0x98>
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d00b      	beq.n	80042c6 <LL_EXTI_Init+0xae>
 80042ae:	e020      	b.n	80042f2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff9b 	bl	80041f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff ff5e 	bl	8004180 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80042c4:	e024      	b.n	8004310 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff ff6a 	bl	80041a4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ff79 	bl	80041cc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80042da:	e019      	b.n	8004310 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ff4d 	bl	8004180 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff6e 	bl	80041cc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80042f0:	e00e      	b.n	8004310 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
            break;
 80042f6:	e00b      	b.n	8004310 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff05 	bl	800410c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff ff26 	bl	8004158 <LL_EXTI_DisableEvent_0_31>
 800430c:	e000      	b.n	8004310 <LL_EXTI_Init+0xf8>
      }
 800430e:	bf00      	nop
  }
  return status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <LL_GPIO_SetPinMode>:
{
 800431a:	b480      	push	{r7}
 800431c:	b089      	sub	sp, #36	; 0x24
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	613b      	str	r3, [r7, #16]
  return result;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	2103      	movs	r1, #3
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	401a      	ands	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	fa93 f3a3 	rbit	r3, r3
 8004354:	61bb      	str	r3, [r7, #24]
  return result;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	fab3 f383 	clz	r3, r3
 800435c:	b2db      	uxtb	r3, r3
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	431a      	orrs	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]
}
 800436c:	bf00      	nop
 800436e:	3724      	adds	r7, #36	; 0x24
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_GPIO_SetPinOutputType>:
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	43db      	mvns	r3, r3
 800438c:	401a      	ands	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	431a      	orrs	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	605a      	str	r2, [r3, #4]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_GPIO_SetPinSpeed>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b089      	sub	sp, #36	; 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	613b      	str	r3, [r7, #16]
  return result;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	2103      	movs	r1, #3
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	61bb      	str	r3, [r7, #24]
  return result;
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	609a      	str	r2, [r3, #8]
}
 80043fa:	bf00      	nop
 80043fc:	3724      	adds	r7, #36	; 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_GPIO_SetPinPull>:
{
 8004406:	b480      	push	{r7}
 8004408:	b089      	sub	sp, #36	; 0x24
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa93 f3a3 	rbit	r3, r3
 8004420:	613b      	str	r3, [r7, #16]
  return result;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	fab3 f383 	clz	r3, r3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	2103      	movs	r1, #3
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	401a      	ands	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	61bb      	str	r3, [r7, #24]
  return result;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	fab3 f383 	clz	r3, r3
 8004448:	b2db      	uxtb	r3, r3
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	431a      	orrs	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	60da      	str	r2, [r3, #12]
}
 8004458:	bf00      	nop
 800445a:	3724      	adds	r7, #36	; 0x24
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <LL_GPIO_SetAFPin_0_7>:
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	fa93 f3a3 	rbit	r3, r3
 800447e:	613b      	str	r3, [r7, #16]
  return result;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	fab3 f383 	clz	r3, r3
 8004486:	b2db      	uxtb	r3, r3
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	210f      	movs	r1, #15
 800448c:	fa01 f303 	lsl.w	r3, r1, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	401a      	ands	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	61bb      	str	r3, [r7, #24]
  return result;
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	3724      	adds	r7, #36	; 0x24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_GPIO_SetAFPin_8_15>:
{
 80044c2:	b480      	push	{r7}
 80044c4:	b089      	sub	sp, #36	; 0x24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	613b      	str	r3, [r7, #16]
  return result;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	210f      	movs	r1, #15
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	401a      	ands	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	fa93 f3a3 	rbit	r3, r3
 8004500:	61bb      	str	r3, [r7, #24]
  return result;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	fa01 f303 	lsl.w	r3, r1, r3
 8004512:	431a      	orrs	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004518:	bf00      	nop
 800451a:	3724      	adds	r7, #36	; 0x24
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	613b      	str	r3, [r7, #16]
  return result;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	fab3 f383 	clz	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800454e:	e050      	b.n	80045f2 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2101      	movs	r1, #1
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	fa01 f303 	lsl.w	r3, r1, r3
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d042      	beq.n	80045ec <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d003      	beq.n	8004576 <LL_GPIO_Init+0x52>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d10d      	bne.n	8004592 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	461a      	mov	r2, r3
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ff12 	bl	80043a8 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	461a      	mov	r2, r3
 800458a:	69b9      	ldr	r1, [r7, #24]
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff fef3 	bl	8004378 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	461a      	mov	r2, r3
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff ff33 	bl	8004406 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d11a      	bne.n	80045de <LL_GPIO_Init+0xba>
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	fa93 f3a3 	rbit	r3, r3
 80045b2:	60bb      	str	r3, [r7, #8]
  return result;
 80045b4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b07      	cmp	r3, #7
 80045be:	d807      	bhi.n	80045d0 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	461a      	mov	r2, r3
 80045c6:	69b9      	ldr	r1, [r7, #24]
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff4b 	bl	8004464 <LL_GPIO_SetAFPin_0_7>
 80045ce:	e006      	b.n	80045de <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	461a      	mov	r2, r3
 80045d6:	69b9      	ldr	r1, [r7, #24]
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff72 	bl	80044c2 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	461a      	mov	r2, r3
 80045e4:	69b9      	ldr	r1, [r7, #24]
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fe97 	bl	800431a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	3301      	adds	r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	fa22 f303 	lsr.w	r3, r2, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1a7      	bne.n	8004550 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800460a:	b084      	sub	sp, #16
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	f107 001c 	add.w	r0, r7, #28
 8004618:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	2b01      	cmp	r3, #1
 8004620:	d122      	bne.n	8004668 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800464a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f001 fb1b 	bl	8005c98 <USB_CoreReset>
 8004662:	4603      	mov	r3, r0
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	e01a      	b.n	800469e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 fb0f 	bl	8005c98 <USB_CoreReset>
 800467a:	4603      	mov	r3, r0
 800467c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800467e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
 8004690:	e005      	b.n	800469e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d10b      	bne.n	80046bc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f043 0206 	orr.w	r2, r3, #6
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046c8:	b004      	add	sp, #16
 80046ca:	4770      	bx	lr

080046cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d165      	bne.n	80047ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4a41      	ldr	r2, [pc, #260]	; (80047e8 <USB_SetTurnaroundTime+0x11c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d906      	bls.n	80046f6 <USB_SetTurnaroundTime+0x2a>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4a40      	ldr	r2, [pc, #256]	; (80047ec <USB_SetTurnaroundTime+0x120>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d202      	bcs.n	80046f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046f0:	230f      	movs	r3, #15
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	e062      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4a3c      	ldr	r2, [pc, #240]	; (80047ec <USB_SetTurnaroundTime+0x120>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d306      	bcc.n	800470c <USB_SetTurnaroundTime+0x40>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4a3b      	ldr	r2, [pc, #236]	; (80047f0 <USB_SetTurnaroundTime+0x124>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d202      	bcs.n	800470c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004706:	230e      	movs	r3, #14
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e057      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4a38      	ldr	r2, [pc, #224]	; (80047f0 <USB_SetTurnaroundTime+0x124>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d306      	bcc.n	8004722 <USB_SetTurnaroundTime+0x56>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4a37      	ldr	r2, [pc, #220]	; (80047f4 <USB_SetTurnaroundTime+0x128>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d202      	bcs.n	8004722 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800471c:	230d      	movs	r3, #13
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	e04c      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	4a33      	ldr	r2, [pc, #204]	; (80047f4 <USB_SetTurnaroundTime+0x128>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d306      	bcc.n	8004738 <USB_SetTurnaroundTime+0x6c>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4a32      	ldr	r2, [pc, #200]	; (80047f8 <USB_SetTurnaroundTime+0x12c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d802      	bhi.n	8004738 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004732:	230c      	movs	r3, #12
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	e041      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4a2f      	ldr	r2, [pc, #188]	; (80047f8 <USB_SetTurnaroundTime+0x12c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d906      	bls.n	800474e <USB_SetTurnaroundTime+0x82>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4a2e      	ldr	r2, [pc, #184]	; (80047fc <USB_SetTurnaroundTime+0x130>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d802      	bhi.n	800474e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004748:	230b      	movs	r3, #11
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e036      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <USB_SetTurnaroundTime+0x130>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d906      	bls.n	8004764 <USB_SetTurnaroundTime+0x98>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	4a29      	ldr	r2, [pc, #164]	; (8004800 <USB_SetTurnaroundTime+0x134>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d802      	bhi.n	8004764 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800475e:	230a      	movs	r3, #10
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	e02b      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4a26      	ldr	r2, [pc, #152]	; (8004800 <USB_SetTurnaroundTime+0x134>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d906      	bls.n	800477a <USB_SetTurnaroundTime+0xae>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4a25      	ldr	r2, [pc, #148]	; (8004804 <USB_SetTurnaroundTime+0x138>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d202      	bcs.n	800477a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004774:	2309      	movs	r3, #9
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e020      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4a21      	ldr	r2, [pc, #132]	; (8004804 <USB_SetTurnaroundTime+0x138>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d306      	bcc.n	8004790 <USB_SetTurnaroundTime+0xc4>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4a20      	ldr	r2, [pc, #128]	; (8004808 <USB_SetTurnaroundTime+0x13c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d802      	bhi.n	8004790 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800478a:	2308      	movs	r3, #8
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e015      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <USB_SetTurnaroundTime+0x13c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d906      	bls.n	80047a6 <USB_SetTurnaroundTime+0xda>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4a1c      	ldr	r2, [pc, #112]	; (800480c <USB_SetTurnaroundTime+0x140>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d202      	bcs.n	80047a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047a0:	2307      	movs	r3, #7
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e00a      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047a6:	2306      	movs	r3, #6
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e007      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047b2:	2309      	movs	r3, #9
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e001      	b.n	80047bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047b8:	2309      	movs	r3, #9
 80047ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	029b      	lsls	r3, r3, #10
 80047d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	00d8acbf 	.word	0x00d8acbf
 80047ec:	00e4e1c0 	.word	0x00e4e1c0
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	01067380 	.word	0x01067380
 80047f8:	011a499f 	.word	0x011a499f
 80047fc:	01312cff 	.word	0x01312cff
 8004800:	014ca43f 	.word	0x014ca43f
 8004804:	016e3600 	.word	0x016e3600
 8004808:	01a6ab1f 	.word	0x01a6ab1f
 800480c:	01e84800 	.word	0x01e84800

08004810 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f043 0201 	orr.w	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 0201 	bic.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d115      	bne.n	80048a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004882:	2001      	movs	r0, #1
 8004884:	f7fd f8f8 	bl	8001a78 <HAL_Delay>
      ms++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f001 f972 	bl	8005b78 <USB_GetMode>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d01e      	beq.n	80048d8 <USB_SetCurrentMode+0x84>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b31      	cmp	r3, #49	; 0x31
 800489e:	d9f0      	bls.n	8004882 <USB_SetCurrentMode+0x2e>
 80048a0:	e01a      	b.n	80048d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d115      	bne.n	80048d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048b4:	2001      	movs	r0, #1
 80048b6:	f7fd f8df 	bl	8001a78 <HAL_Delay>
      ms++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f001 f959 	bl	8005b78 <USB_GetMode>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <USB_SetCurrentMode+0x84>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b31      	cmp	r3, #49	; 0x31
 80048d0:	d9f0      	bls.n	80048b4 <USB_SetCurrentMode+0x60>
 80048d2:	e001      	b.n	80048d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e005      	b.n	80048e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b32      	cmp	r3, #50	; 0x32
 80048dc:	d101      	bne.n	80048e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048ec:	b084      	sub	sp, #16
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b086      	sub	sp, #24
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	e009      	b.n	8004920 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3340      	adds	r3, #64	; 0x40
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	2200      	movs	r2, #0
 8004918:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	3301      	adds	r3, #1
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b0e      	cmp	r3, #14
 8004924:	d9f2      	bls.n	800490c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11c      	bne.n	8004966 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800493a:	f043 0302 	orr.w	r3, r3, #2
 800493e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
 8004964:	e00b      	b.n	800497e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004984:	461a      	mov	r2, r3
 8004986:	2300      	movs	r3, #0
 8004988:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004990:	4619      	mov	r1, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004998:	461a      	mov	r2, r3
 800499a:	680b      	ldr	r3, [r1, #0]
 800499c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d10c      	bne.n	80049be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049aa:	2100      	movs	r1, #0
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f945 	bl	8004c3c <USB_SetDevSpeed>
 80049b2:	e008      	b.n	80049c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049b4:	2101      	movs	r1, #1
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f940 	bl	8004c3c <USB_SetDevSpeed>
 80049bc:	e003      	b.n	80049c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049be:	2103      	movs	r1, #3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f93b 	bl	8004c3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049c6:	2110      	movs	r1, #16
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f8f3 	bl	8004bb4 <USB_FlushTxFifo>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f90f 	bl	8004bfc <USB_FlushRxFifo>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ee:	461a      	mov	r2, r3
 80049f0:	2300      	movs	r3, #0
 80049f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fa:	461a      	mov	r2, r3
 80049fc:	2300      	movs	r3, #0
 80049fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	461a      	mov	r2, r3
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	e043      	b.n	8004a9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a28:	d118      	bne.n	8004a5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	e013      	b.n	8004a6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	461a      	mov	r2, r3
 8004a54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e008      	b.n	8004a6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3301      	adds	r3, #1
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d3b7      	bcc.n	8004a12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	e043      	b.n	8004b30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004abe:	d118      	bne.n	8004af2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e013      	b.n	8004b04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e008      	b.n	8004b04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	461a      	mov	r2, r3
 8004b00:	2300      	movs	r3, #0
 8004b02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	461a      	mov	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b22:	461a      	mov	r2, r3
 8004b24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3b7      	bcc.n	8004aa8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f043 0210 	orr.w	r2, r3, #16
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699a      	ldr	r2, [r3, #24]
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <USB_DevInit+0x2c4>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f043 0208 	orr.w	r2, r3, #8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d107      	bne.n	8004ba0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b98:	f043 0304 	orr.w	r3, r3, #4
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bac:	b004      	add	sp, #16
 8004bae:	4770      	bx	lr
 8004bb0:	803c3800 	.word	0x803c3800

08004bb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	019b      	lsls	r3, r3, #6
 8004bc6:	f043 0220 	orr.w	r2, r3, #32
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <USB_FlushTxFifo+0x44>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e006      	b.n	8004bec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d0f1      	beq.n	8004bce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	00030d40 	.word	0x00030d40

08004bfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2210      	movs	r2, #16
 8004c0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <USB_FlushRxFifo+0x3c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e006      	b.n	8004c2c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d0f1      	beq.n	8004c0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	00030d40 	.word	0x00030d40

08004c3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b087      	sub	sp, #28
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0306 	and.w	r3, r3, #6
 8004c86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	75fb      	strb	r3, [r7, #23]
 8004c92:	e00a      	b.n	8004caa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d002      	beq.n	8004ca0 <USB_GetDevSpeed+0x32>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b06      	cmp	r3, #6
 8004c9e:	d102      	bne.n	8004ca6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	75fb      	strb	r3, [r7, #23]
 8004ca4:	e001      	b.n	8004caa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ca6:	230f      	movs	r3, #15
 8004ca8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d13a      	bne.n	8004d4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	68f9      	ldr	r1, [r7, #12]
 8004cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d155      	bne.n	8004db8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	78db      	ldrb	r3, [r3, #3]
 8004d26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	059b      	lsls	r3, r3, #22
 8004d2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d30:	4313      	orrs	r3, r2
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e036      	b.n	8004db8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	041b      	lsls	r3, r3, #16
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d11a      	bne.n	8004db8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	78db      	ldrb	r3, [r3, #3]
 8004d9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	4313      	orrs	r3, r2
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d161      	bne.n	8004ea8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfa:	d11f      	bne.n	8004e3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	2101      	movs	r1, #1
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e80:	4013      	ands	r3, r2
 8004e82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	0159      	lsls	r1, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	440b      	add	r3, r1
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4b35      	ldr	r3, [pc, #212]	; (8004f78 <USB_DeactivateEndpoint+0x1b0>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
 8004ea6:	e060      	b.n	8004f6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ebe:	d11f      	bne.n	8004f00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ede:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004efe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	2101      	movs	r1, #1
 8004f12:	fa01 f303 	lsl.w	r3, r1, r3
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f20:	4013      	ands	r3, r2
 8004f22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	2101      	movs	r1, #1
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f44:	4013      	ands	r3, r2
 8004f46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	0159      	lsls	r1, r3, #5
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	440b      	add	r3, r1
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	4619      	mov	r1, r3
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <USB_DeactivateEndpoint+0x1b4>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	ec337800 	.word	0xec337800
 8004f7c:	eff37800 	.word	0xeff37800

08004f80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	f040 815c 	bne.w	800525a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d132      	bne.n	8005010 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	0151      	lsls	r1, r2, #5
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	440a      	add	r2, r1
 8004fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005008:	0cdb      	lsrs	r3, r3, #19
 800500a:	04db      	lsls	r3, r3, #19
 800500c:	6113      	str	r3, [r2, #16]
 800500e:	e074      	b.n	80050fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502a:	0cdb      	lsrs	r3, r3, #19
 800502c:	04db      	lsls	r3, r3, #19
 800502e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	440a      	add	r2, r1
 8005046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800504e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6959      	ldr	r1, [r3, #20]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	440b      	add	r3, r1
 800506c:	1e59      	subs	r1, r3, #1
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	fbb1 f3f3 	udiv	r3, r1, r3
 8005076:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005078:	4b9d      	ldr	r3, [pc, #628]	; (80052f0 <USB_EPStartXfer+0x370>)
 800507a:	400b      	ands	r3, r1
 800507c:	69b9      	ldr	r1, [r7, #24]
 800507e:	0148      	lsls	r0, r1, #5
 8005080:	69f9      	ldr	r1, [r7, #28]
 8005082:	4401      	add	r1, r0
 8005084:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005088:	4313      	orrs	r3, r2
 800508a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a2:	69b9      	ldr	r1, [r7, #24]
 80050a4:	0148      	lsls	r0, r1, #5
 80050a6:	69f9      	ldr	r1, [r7, #28]
 80050a8:	4401      	add	r1, r0
 80050aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050ae:	4313      	orrs	r3, r2
 80050b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	78db      	ldrb	r3, [r3, #3]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d11f      	bne.n	80050fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	0151      	lsls	r1, r2, #5
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	440a      	add	r2, r1
 80050d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80050d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	0151      	lsls	r1, r2, #5
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	440a      	add	r2, r1
 80050f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d14b      	bne.n	8005198 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d009      	beq.n	800511c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	461a      	mov	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	78db      	ldrb	r3, [r3, #3]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d128      	bne.n	8005176 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d110      	bne.n	8005156 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	e00f      	b.n	8005176 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005174:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e12f      	b.n	80053f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	78db      	ldrb	r3, [r3, #3]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d015      	beq.n	80051ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8117 	beq.w	80053f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	2101      	movs	r1, #1
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	69f9      	ldr	r1, [r7, #28]
 80051e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e6:	4313      	orrs	r3, r2
 80051e8:	634b      	str	r3, [r1, #52]	; 0x34
 80051ea:	e105      	b.n	80053f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d110      	bne.n	800521e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	e00f      	b.n	800523e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	440a      	add	r2, r1
 8005234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	68d9      	ldr	r1, [r3, #12]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	b298      	uxth	r0, r3
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	4603      	mov	r3, r0
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fa2b 	bl	80056ae <USB_WritePacket>
 8005258:	e0ce      	b.n	80053f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005274:	0cdb      	lsrs	r3, r3, #19
 8005276:	04db      	lsls	r3, r3, #19
 8005278:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800529c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d126      	bne.n	80052f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052bc:	69b9      	ldr	r1, [r7, #24]
 80052be:	0148      	lsls	r0, r1, #5
 80052c0:	69f9      	ldr	r1, [r7, #28]
 80052c2:	4401      	add	r1, r0
 80052c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052c8:	4313      	orrs	r3, r2
 80052ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ea:	6113      	str	r3, [r2, #16]
 80052ec:	e036      	b.n	800535c <USB_EPStartXfer+0x3dc>
 80052ee:	bf00      	nop
 80052f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4413      	add	r3, r2
 80052fe:	1e5a      	subs	r2, r3, #1
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	8afb      	ldrh	r3, [r7, #22]
 800531a:	04d9      	lsls	r1, r3, #19
 800531c:	4b39      	ldr	r3, [pc, #228]	; (8005404 <USB_EPStartXfer+0x484>)
 800531e:	400b      	ands	r3, r1
 8005320:	69b9      	ldr	r1, [r7, #24]
 8005322:	0148      	lsls	r0, r1, #5
 8005324:	69f9      	ldr	r1, [r7, #28]
 8005326:	4401      	add	r1, r0
 8005328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800532c:	4313      	orrs	r3, r2
 800532e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	8af9      	ldrh	r1, [r7, #22]
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534c:	69b9      	ldr	r1, [r7, #24]
 800534e:	0148      	lsls	r0, r1, #5
 8005350:	69f9      	ldr	r1, [r7, #28]
 8005352:	4401      	add	r1, r0
 8005354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005358:	4313      	orrs	r3, r2
 800535a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d10d      	bne.n	800537e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	68d9      	ldr	r1, [r3, #12]
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	460a      	mov	r2, r1
 800537c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	78db      	ldrb	r3, [r3, #3]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d128      	bne.n	80053d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d110      	bne.n	80053b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e00f      	b.n	80053d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	1ff80000 	.word	0x1ff80000

08005408 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	2b01      	cmp	r3, #1
 8005426:	f040 80cd 	bne.w	80055c4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d132      	bne.n	8005498 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005450:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	440a      	add	r2, r1
 800546c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	440a      	add	r2, r1
 800548c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005490:	0cdb      	lsrs	r3, r3, #19
 8005492:	04db      	lsls	r3, r3, #19
 8005494:	6113      	str	r3, [r2, #16]
 8005496:	e04e      	b.n	8005536 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b2:	0cdb      	lsrs	r3, r3, #19
 80054b4:	04db      	lsls	r3, r3, #19
 80054b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	695a      	ldr	r2, [r3, #20]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d903      	bls.n	80054f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800550e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005526:	6939      	ldr	r1, [r7, #16]
 8005528:	0148      	lsls	r0, r1, #5
 800552a:	6979      	ldr	r1, [r7, #20]
 800552c:	4401      	add	r1, r0
 800552e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005532:	4313      	orrs	r3, r2
 8005534:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d11e      	bne.n	800557a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d009      	beq.n	8005558 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	461a      	mov	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	440a      	add	r2, r1
 800556e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	e092      	b.n	80056a0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005598:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d07e      	beq.n	80056a0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	2101      	movs	r1, #1
 80055b4:	fa01 f303 	lsl.w	r3, r1, r3
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055be:	4313      	orrs	r3, r2
 80055c0:	634b      	str	r3, [r1, #52]	; 0x34
 80055c2:	e06d      	b.n	80056a0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055de:	0cdb      	lsrs	r3, r3, #19
 80055e0:	04db      	lsls	r3, r3, #19
 80055e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005602:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005606:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005636:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564e:	6939      	ldr	r1, [r7, #16]
 8005650:	0148      	lsls	r0, r1, #5
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	4401      	add	r1, r0
 8005656:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800565a:	4313      	orrs	r3, r2
 800565c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d10d      	bne.n	8005680 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d009      	beq.n	8005680 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	68d9      	ldr	r1, [r3, #12]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	460a      	mov	r2, r1
 800567e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800569e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b089      	sub	sp, #36	; 0x24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	4611      	mov	r1, r2
 80056ba:	461a      	mov	r2, r3
 80056bc:	460b      	mov	r3, r1
 80056be:	71fb      	strb	r3, [r7, #7]
 80056c0:	4613      	mov	r3, r2
 80056c2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d123      	bne.n	800571c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056d4:	88bb      	ldrh	r3, [r7, #4]
 80056d6:	3303      	adds	r3, #3
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056dc:	2300      	movs	r3, #0
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	e018      	b.n	8005714 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	031a      	lsls	r2, r3, #12
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ee:	461a      	mov	r2, r3
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	3301      	adds	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	3301      	adds	r3, #1
 8005700:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3301      	adds	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	3301      	adds	r3, #1
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	429a      	cmp	r2, r3
 800571a:	d3e2      	bcc.n	80056e2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3724      	adds	r7, #36	; 0x24
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800572a:	b480      	push	{r7}
 800572c:	b08b      	sub	sp, #44	; 0x2c
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	4613      	mov	r3, r2
 8005736:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	b29b      	uxth	r3, r3
 8005746:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005750:	2300      	movs	r3, #0
 8005752:	623b      	str	r3, [r7, #32]
 8005754:	e014      	b.n	8005780 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	601a      	str	r2, [r3, #0]
    pDest++;
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	3301      	adds	r3, #1
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	3301      	adds	r3, #1
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	3301      	adds	r3, #1
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	3301      	adds	r3, #1
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	3301      	adds	r3, #1
 800577e:	623b      	str	r3, [r7, #32]
 8005780:	6a3a      	ldr	r2, [r7, #32]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	429a      	cmp	r2, r3
 8005786:	d3e6      	bcc.n	8005756 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005788:	8bfb      	ldrh	r3, [r7, #30]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01e      	beq.n	80057cc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005798:	461a      	mov	r2, r3
 800579a:	f107 0310 	add.w	r3, r7, #16
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	fa22 f303 	lsr.w	r3, r2, r3
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	701a      	strb	r2, [r3, #0]
      i++;
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	3301      	adds	r3, #1
 80057b8:	623b      	str	r3, [r7, #32]
      pDest++;
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	3301      	adds	r3, #1
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057c0:	8bfb      	ldrh	r3, [r7, #30]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057c6:	8bfb      	ldrh	r3, [r7, #30]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1ea      	bne.n	80057a2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	372c      	adds	r7, #44	; 0x2c
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d12c      	bne.n	8005850 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	db12      	blt.n	800582e <USB_EPSetStall+0x54>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00f      	beq.n	800582e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005828:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800582c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e02b      	b.n	80058a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	db12      	blt.n	8005888 <USB_EPSetStall+0xae>
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00f      	beq.n	8005888 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005882:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005886:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d128      	bne.n	8005924 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	78db      	ldrb	r3, [r3, #3]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d003      	beq.n	8005902 <USB_EPClearStall+0x4c>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	78db      	ldrb	r3, [r3, #3]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d138      	bne.n	8005974 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e027      	b.n	8005974 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005942:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	78db      	ldrb	r3, [r3, #3]
 8005948:	2b03      	cmp	r3, #3
 800594a:	d003      	beq.n	8005954 <USB_EPClearStall+0x9e>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	78db      	ldrb	r3, [r3, #3]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d10f      	bne.n	8005974 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005972:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005982:	b480      	push	{r7}
 8005984:	b085      	sub	sp, #20
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	460b      	mov	r3, r1
 800598c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059a4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059bc:	4313      	orrs	r3, r2
 80059be:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b085      	sub	sp, #20
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059fc:	f023 0302 	bic.w	r3, r3, #2
 8005a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3e:	f043 0302 	orr.w	r3, r3, #2
 8005a42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4013      	ands	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	0c1b      	lsrs	r3, r3, #16
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	b29b      	uxth	r3, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4c:	01db      	lsls	r3, r3, #7
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4013      	ands	r3, r2
 8005b68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f003 0301 	and.w	r3, r3, #1
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bb2:	f023 0307 	bic.w	r3, r3, #7
 8005bb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	460b      	mov	r3, r1
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	333c      	adds	r3, #60	; 0x3c
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4a26      	ldr	r2, [pc, #152]	; (8005c94 <USB_EP0_OutStart+0xb8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d90a      	bls.n	8005c16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c10:	d101      	bne.n	8005c16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	e037      	b.n	8005c86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2300      	movs	r3, #0
 8005c20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c44:	f043 0318 	orr.w	r3, r3, #24
 8005c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10f      	bne.n	8005c84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	4f54300a 	.word	0x4f54300a

08005c98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <USB_CoreReset+0x60>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e01a      	b.n	8005cea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	daf3      	bge.n	8005ca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f043 0201 	orr.w	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <USB_CoreReset+0x60>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d901      	bls.n	8005cdc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e006      	b.n	8005cea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d0f1      	beq.n	8005ccc <USB_CoreReset+0x34>

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	00030d40 	.word	0x00030d40

08005cfc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005d04:	4a04      	ldr	r2, [pc, #16]	; (8005d18 <LL_SetSystemCoreClock+0x1c>)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6013      	str	r3, [r2, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	20000004 	.word	0x20000004

08005d1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d2c:	f002 f9f0 	bl	8008110 <USBD_static_malloc>
 8005d30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d105      	bne.n	8005d44 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d40:	2302      	movs	r3, #2
 8005d42:	e066      	b.n	8005e12 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	7c1b      	ldrb	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d119      	bne.n	8005d88 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d58:	2202      	movs	r2, #2
 8005d5a:	2181      	movs	r1, #129	; 0x81
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f002 f8b4 	bl	8007eca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	2101      	movs	r1, #1
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f002 f8aa 	bl	8007eca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2210      	movs	r2, #16
 8005d82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005d86:	e016      	b.n	8005db6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d88:	2340      	movs	r3, #64	; 0x40
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	2181      	movs	r1, #129	; 0x81
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f002 f89b 	bl	8007eca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d9a:	2340      	movs	r3, #64	; 0x40
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	2101      	movs	r1, #1
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f002 f892 	bl	8007eca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2210      	movs	r2, #16
 8005db2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005db6:	2308      	movs	r3, #8
 8005db8:	2203      	movs	r2, #3
 8005dba:	2182      	movs	r1, #130	; 0x82
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f002 f884 	bl	8007eca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	7c1b      	ldrb	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005df6:	2101      	movs	r1, #1
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f002 f955 	bl	80080a8 <USBD_LL_PrepareReceive>
 8005dfe:	e007      	b.n	8005e10 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	2101      	movs	r1, #1
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f002 f94c 	bl	80080a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	460b      	mov	r3, r1
 8005e24:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005e26:	2181      	movs	r1, #129	; 0x81
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f002 f874 	bl	8007f16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e34:	2101      	movs	r1, #1
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f002 f86d 	bl	8007f16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e44:	2182      	movs	r1, #130	; 0x82
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f002 f865 	bl	8007f16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00e      	beq.n	8005e84 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e76:	4618      	mov	r0, r3
 8005e78:	f002 f958 	bl	800812c <USBD_static_free>
    pdev->pClassData = NULL;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e0af      	b.n	8006018 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d03f      	beq.n	8005f44 <USBD_CDC_Setup+0xb4>
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	f040 809f 	bne.w	8006008 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	88db      	ldrh	r3, [r3, #6]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d02e      	beq.n	8005f30 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	b25b      	sxtb	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	da16      	bge.n	8005f0a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005ee8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	88d2      	ldrh	r2, [r2, #6]
 8005eee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	88db      	ldrh	r3, [r3, #6]
 8005ef4:	2b07      	cmp	r3, #7
 8005ef6:	bf28      	it	cs
 8005ef8:	2307      	movcs	r3, #7
 8005efa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	89fa      	ldrh	r2, [r7, #14]
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 fae9 	bl	80074da <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005f08:	e085      	b.n	8006016 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	785a      	ldrb	r2, [r3, #1]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	88db      	ldrh	r3, [r3, #6]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f20:	6939      	ldr	r1, [r7, #16]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	88db      	ldrh	r3, [r3, #6]
 8005f26:	461a      	mov	r2, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 fb02 	bl	8007532 <USBD_CtlPrepareRx>
      break;
 8005f2e:	e072      	b.n	8006016 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	7850      	ldrb	r0, [r2, #1]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	4798      	blx	r3
      break;
 8005f42:	e068      	b.n	8006016 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	2b0b      	cmp	r3, #11
 8005f4a:	d852      	bhi.n	8005ff2 <USBD_CDC_Setup+0x162>
 8005f4c:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <USBD_CDC_Setup+0xc4>)
 8005f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f52:	bf00      	nop
 8005f54:	08005f85 	.word	0x08005f85
 8005f58:	08006001 	.word	0x08006001
 8005f5c:	08005ff3 	.word	0x08005ff3
 8005f60:	08005ff3 	.word	0x08005ff3
 8005f64:	08005ff3 	.word	0x08005ff3
 8005f68:	08005ff3 	.word	0x08005ff3
 8005f6c:	08005ff3 	.word	0x08005ff3
 8005f70:	08005ff3 	.word	0x08005ff3
 8005f74:	08005ff3 	.word	0x08005ff3
 8005f78:	08005ff3 	.word	0x08005ff3
 8005f7c:	08005faf 	.word	0x08005faf
 8005f80:	08005fd9 	.word	0x08005fd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d107      	bne.n	8005fa0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f90:	f107 030a 	add.w	r3, r7, #10
 8005f94:	2202      	movs	r2, #2
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 fa9e 	bl	80074da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f9e:	e032      	b.n	8006006 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 fa28 	bl	80073f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	75fb      	strb	r3, [r7, #23]
          break;
 8005fac:	e02b      	b.n	8006006 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d107      	bne.n	8005fca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005fba:	f107 030d 	add.w	r3, r7, #13
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f001 fa89 	bl	80074da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fc8:	e01d      	b.n	8006006 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 fa13 	bl	80073f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fd6:	e016      	b.n	8006006 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d00f      	beq.n	8006004 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 fa06 	bl	80073f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fec:	2303      	movs	r3, #3
 8005fee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ff0:	e008      	b.n	8006004 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f001 f9ff 	bl	80073f8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ffe:	e002      	b.n	8006006 <USBD_CDC_Setup+0x176>
          break;
 8006000:	bf00      	nop
 8006002:	e008      	b.n	8006016 <USBD_CDC_Setup+0x186>
          break;
 8006004:	bf00      	nop
      }
      break;
 8006006:	e006      	b.n	8006016 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 f9f4 	bl	80073f8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	75fb      	strb	r3, [r7, #23]
      break;
 8006014:	bf00      	nop
  }

  return (uint8_t)ret;
 8006016:	7dfb      	ldrb	r3, [r7, #23]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006032:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800603e:	2303      	movs	r3, #3
 8006040:	e04f      	b.n	80060e2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006048:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	3318      	adds	r3, #24
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d029      	beq.n	80060b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	3318      	adds	r3, #24
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	78f9      	ldrb	r1, [r7, #3]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	460b      	mov	r3, r1
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	1a5b      	subs	r3, r3, r1
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4403      	add	r3, r0
 8006080:	3344      	adds	r3, #68	; 0x44
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	fbb2 f1f3 	udiv	r1, r2, r3
 8006088:	fb03 f301 	mul.w	r3, r3, r1
 800608c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800608e:	2b00      	cmp	r3, #0
 8006090:	d110      	bne.n	80060b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	3318      	adds	r3, #24
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060a6:	78f9      	ldrb	r1, [r7, #3]
 80060a8:	2300      	movs	r3, #0
 80060aa:	2200      	movs	r2, #0
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 ffda 	bl	8008066 <USBD_LL_Transmit>
 80060b2:	e015      	b.n	80060e0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00b      	beq.n	80060e0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006108:	2303      	movs	r3, #3
 800610a:	e015      	b.n	8006138 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 ffea 	bl	80080ea <USBD_LL_GetRxDataSize>
 8006116:	4602      	mov	r2, r0
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006132:	4611      	mov	r1, r2
 8006134:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800614e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006156:	2303      	movs	r3, #3
 8006158:	e01b      	b.n	8006192 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d015      	beq.n	8006190 <USBD_CDC_EP0_RxReady+0x50>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800616a:	2bff      	cmp	r3, #255	; 0xff
 800616c:	d010      	beq.n	8006190 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800617c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006184:	b292      	uxth	r2, r2
 8006186:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	22ff      	movs	r2, #255	; 0xff
 800618c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2243      	movs	r2, #67	; 0x43
 80061a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80061aa:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	20000098 	.word	0x20000098

080061bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2243      	movs	r2, #67	; 0x43
 80061c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80061ca:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	20000054 	.word	0x20000054

080061dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2243      	movs	r2, #67	; 0x43
 80061e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80061ea:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	200000dc 	.word	0x200000dc

080061fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	220a      	movs	r2, #10
 8006208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800620a:	4b03      	ldr	r3, [pc, #12]	; (8006218 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	20000010 	.word	0x20000010

0800621c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800622c:	2303      	movs	r3, #3
 800622e:	e004      	b.n	800623a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006246:	b480      	push	{r7}
 8006248:	b087      	sub	sp, #28
 800624a:	af00      	add	r7, sp, #0
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006258:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006260:	2303      	movs	r3, #3
 8006262:	e008      	b.n	8006276 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006292:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800629a:	2303      	movs	r3, #3
 800629c:	e004      	b.n	80062a8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e016      	b.n	8006300 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	7c1b      	ldrb	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062e4:	2101      	movs	r1, #1
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fede 	bl	80080a8 <USBD_LL_PrepareReceive>
 80062ec:	e007      	b.n	80062fe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	2101      	movs	r1, #1
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 fed5 	bl	80080a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	4613      	mov	r3, r2
 8006314:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800631c:	2303      	movs	r3, #3
 800631e:	e01f      	b.n	8006360 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	79fa      	ldrb	r2, [r7, #7]
 8006352:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f001 fd51 	bl	8007dfc <USBD_LL_Init>
 800635a:	4603      	mov	r3, r0
 800635c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800635e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800637c:	2303      	movs	r3, #3
 800637e:	e016      	b.n	80063ae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	f107 020e 	add.w	r2, r7, #14
 80063a0:	4610      	mov	r0, r2
 80063a2:	4798      	blx	r3
 80063a4:	4602      	mov	r2, r0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 fd68 	bl	8007e94 <USBD_LL_Start>
 80063c4:	4603      	mov	r3, r0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80063f0:	2303      	movs	r3, #3
 80063f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	78fa      	ldrb	r2, [r7, #3]
 8006408:	4611      	mov	r1, r2
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	4798      	blx	r3
 800640e:	4603      	mov	r3, r0
 8006410:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	78fa      	ldrb	r2, [r7, #3]
 800643c:	4611      	mov	r1, r2
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
  }

  return USBD_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 ff90 	bl	8007384 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	2b02      	cmp	r3, #2
 8006486:	d01a      	beq.n	80064be <USBD_LL_SetupStage+0x72>
 8006488:	2b02      	cmp	r3, #2
 800648a:	d822      	bhi.n	80064d2 <USBD_LL_SetupStage+0x86>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <USBD_LL_SetupStage+0x4a>
 8006490:	2b01      	cmp	r3, #1
 8006492:	d00a      	beq.n	80064aa <USBD_LL_SetupStage+0x5e>
 8006494:	e01d      	b.n	80064d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa62 	bl	8006968 <USBD_StdDevReq>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
      break;
 80064a8:	e020      	b.n	80064ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fac6 	bl	8006a44 <USBD_StdItfReq>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
      break;
 80064bc:	e016      	b.n	80064ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fb05 	bl	8006ad6 <USBD_StdEPReq>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
      break;
 80064d0:	e00c      	b.n	80064ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 fd37 	bl	8007f54 <USBD_LL_StallEP>
 80064e6:	4603      	mov	r3, r0
 80064e8:	73fb      	strb	r3, [r7, #15]
      break;
 80064ea:	bf00      	nop
  }

  return ret;
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	460b      	mov	r3, r1
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d138      	bne.n	800657c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006510:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006518:	2b03      	cmp	r3, #3
 800651a:	d14a      	bne.n	80065b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	429a      	cmp	r2, r3
 8006526:	d913      	bls.n	8006550 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	1ad2      	subs	r2, r2, r3
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	4293      	cmp	r3, r2
 8006540:	bf28      	it	cs
 8006542:	4613      	movcs	r3, r2
 8006544:	461a      	mov	r2, r3
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f001 f80f 	bl	800756c <USBD_CtlContinueRx>
 800654e:	e030      	b.n	80065b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b03      	cmp	r3, #3
 800655a:	d10b      	bne.n	8006574 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f001 f80a 	bl	800758e <USBD_CtlSendStatus>
 800657a:	e01a      	b.n	80065b2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b03      	cmp	r3, #3
 8006586:	d114      	bne.n	80065b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00e      	beq.n	80065b2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	7afa      	ldrb	r2, [r7, #11]
 800659e:	4611      	mov	r1, r2
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	4798      	blx	r3
 80065a4:	4603      	mov	r3, r0
 80065a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	e000      	b.n	80065b4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	460b      	mov	r3, r1
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065ca:	7afb      	ldrb	r3, [r7, #11]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d16b      	bne.n	80066a8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3314      	adds	r3, #20
 80065d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d156      	bne.n	800668e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d914      	bls.n	8006616 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	1ad2      	subs	r2, r2, r3
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	461a      	mov	r2, r3
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 ff84 	bl	8007510 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006608:	2300      	movs	r3, #0
 800660a:	2200      	movs	r2, #0
 800660c:	2100      	movs	r1, #0
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f001 fd4a 	bl	80080a8 <USBD_LL_PrepareReceive>
 8006614:	e03b      	b.n	800668e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	429a      	cmp	r2, r3
 8006620:	d11c      	bne.n	800665c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800662a:	429a      	cmp	r2, r3
 800662c:	d316      	bcc.n	800665c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006638:	429a      	cmp	r2, r3
 800663a:	d20f      	bcs.n	800665c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800663c:	2200      	movs	r2, #0
 800663e:	2100      	movs	r1, #0
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 ff65 	bl	8007510 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800664e:	2300      	movs	r3, #0
 8006650:	2200      	movs	r2, #0
 8006652:	2100      	movs	r1, #0
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f001 fd27 	bl	80080a8 <USBD_LL_PrepareReceive>
 800665a:	e018      	b.n	800668e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b03      	cmp	r3, #3
 8006666:	d10b      	bne.n	8006680 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d005      	beq.n	8006680 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006680:	2180      	movs	r1, #128	; 0x80
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 fc66 	bl	8007f54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 ff93 	bl	80075b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006694:	2b01      	cmp	r3, #1
 8006696:	d122      	bne.n	80066de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff fe98 	bl	80063ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066a6:	e01a      	b.n	80066de <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d114      	bne.n	80066de <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00e      	beq.n	80066de <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	7afa      	ldrb	r2, [r7, #11]
 80066ca:	4611      	mov	r1, r2
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	4798      	blx	r3
 80066d0:	4603      	mov	r3, r0
 80066d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	e000      	b.n	80066e0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006718:	2303      	movs	r3, #3
 800671a:	e02f      	b.n	800677c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00f      	beq.n	8006746 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6852      	ldr	r2, [r2, #4]
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	4611      	mov	r1, r2
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006746:	2340      	movs	r3, #64	; 0x40
 8006748:	2200      	movs	r2, #0
 800674a:	2100      	movs	r1, #0
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 fbbc 	bl	8007eca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2240      	movs	r2, #64	; 0x40
 800675e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006762:	2340      	movs	r3, #64	; 0x40
 8006764:	2200      	movs	r2, #0
 8006766:	2180      	movs	r1, #128	; 0x80
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 fbae 	bl	8007eca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2240      	movs	r2, #64	; 0x40
 8006778:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	78fa      	ldrb	r2, [r7, #3]
 8006794:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2204      	movs	r2, #4
 80067be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d106      	bne.n	80067f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006812:	2303      	movs	r3, #3
 8006814:	e012      	b.n	800683c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b03      	cmp	r3, #3
 8006820:	d10b      	bne.n	800683a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800685a:	2303      	movs	r3, #3
 800685c:	e014      	b.n	8006888 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b03      	cmp	r3, #3
 8006868:	d10d      	bne.n	8006886 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	4611      	mov	r1, r2
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e014      	b.n	80068d4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d10d      	bne.n	80068d2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	78fa      	ldrb	r2, [r7, #3]
 80068cc:	4611      	mov	r1, r2
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6852      	ldr	r2, [r2, #4]
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	4611      	mov	r1, r2
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
  }

  return USBD_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800692a:	b480      	push	{r7}
 800692c:	b087      	sub	sp, #28
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	3301      	adds	r3, #1
 8006940:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006948:	8a3b      	ldrh	r3, [r7, #16]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	b21a      	sxth	r2, r3
 800694e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006952:	4313      	orrs	r3, r2
 8006954:	b21b      	sxth	r3, r3
 8006956:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006958:	89fb      	ldrh	r3, [r7, #14]
}
 800695a:	4618      	mov	r0, r3
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d005      	beq.n	800698e <USBD_StdDevReq+0x26>
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d853      	bhi.n	8006a2e <USBD_StdDevReq+0xc6>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <USBD_StdDevReq+0x3a>
 800698a:	2b20      	cmp	r3, #32
 800698c:	d14f      	bne.n	8006a2e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]
      break;
 80069a0:	e04a      	b.n	8006a38 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b09      	cmp	r3, #9
 80069a8:	d83b      	bhi.n	8006a22 <USBD_StdDevReq+0xba>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <USBD_StdDevReq+0x48>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	08006a05 	.word	0x08006a05
 80069b4:	08006a19 	.word	0x08006a19
 80069b8:	08006a23 	.word	0x08006a23
 80069bc:	08006a0f 	.word	0x08006a0f
 80069c0:	08006a23 	.word	0x08006a23
 80069c4:	080069e3 	.word	0x080069e3
 80069c8:	080069d9 	.word	0x080069d9
 80069cc:	08006a23 	.word	0x08006a23
 80069d0:	080069fb 	.word	0x080069fb
 80069d4:	080069ed 	.word	0x080069ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f9de 	bl	8006d9c <USBD_GetDescriptor>
          break;
 80069e0:	e024      	b.n	8006a2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fb43 	bl	8007070 <USBD_SetAddress>
          break;
 80069ea:	e01f      	b.n	8006a2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb82 	bl	80070f8 <USBD_SetConfig>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
          break;
 80069f8:	e018      	b.n	8006a2c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fc21 	bl	8007244 <USBD_GetConfig>
          break;
 8006a02:	e013      	b.n	8006a2c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc52 	bl	80072b0 <USBD_GetStatus>
          break;
 8006a0c:	e00e      	b.n	8006a2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fc81 	bl	8007318 <USBD_SetFeature>
          break;
 8006a16:	e009      	b.n	8006a2c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fc90 	bl	8007340 <USBD_ClrFeature>
          break;
 8006a20:	e004      	b.n	8006a2c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fce7 	bl	80073f8 <USBD_CtlError>
          break;
 8006a2a:	bf00      	nop
      }
      break;
 8006a2c:	e004      	b.n	8006a38 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fce1 	bl	80073f8 <USBD_CtlError>
      break;
 8006a36:	bf00      	nop
  }

  return ret;
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop

08006a44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d005      	beq.n	8006a6a <USBD_StdItfReq+0x26>
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	d82f      	bhi.n	8006ac2 <USBD_StdItfReq+0x7e>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <USBD_StdItfReq+0x26>
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d12b      	bne.n	8006ac2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d81d      	bhi.n	8006ab4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	889b      	ldrh	r3, [r3, #4]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d813      	bhi.n	8006aaa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	88db      	ldrh	r3, [r3, #6]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d110      	bne.n	8006abe <USBD_StdItfReq+0x7a>
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10d      	bne.n	8006abe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fd73 	bl	800758e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006aa8:	e009      	b.n	8006abe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fca3 	bl	80073f8 <USBD_CtlError>
          break;
 8006ab2:	e004      	b.n	8006abe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fc9e 	bl	80073f8 <USBD_CtlError>
          break;
 8006abc:	e000      	b.n	8006ac0 <USBD_StdItfReq+0x7c>
          break;
 8006abe:	bf00      	nop
      }
      break;
 8006ac0:	e004      	b.n	8006acc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fc97 	bl	80073f8 <USBD_CtlError>
      break;
 8006aca:	bf00      	nop
  }

  return ret;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	889b      	ldrh	r3, [r3, #4]
 8006ae8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d007      	beq.n	8006b06 <USBD_StdEPReq+0x30>
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	f200 8145 	bhi.w	8006d86 <USBD_StdEPReq+0x2b0>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <USBD_StdEPReq+0x44>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	f040 8140 	bne.w	8006d86 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
      break;
 8006b18:	e13a      	b.n	8006d90 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d007      	beq.n	8006b32 <USBD_StdEPReq+0x5c>
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	f300 8129 	bgt.w	8006d7a <USBD_StdEPReq+0x2a4>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d07f      	beq.n	8006c2c <USBD_StdEPReq+0x156>
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d03c      	beq.n	8006baa <USBD_StdEPReq+0xd4>
 8006b30:	e123      	b.n	8006d7a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d002      	beq.n	8006b44 <USBD_StdEPReq+0x6e>
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d016      	beq.n	8006b70 <USBD_StdEPReq+0x9a>
 8006b42:	e02c      	b.n	8006b9e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <USBD_StdEPReq+0x90>
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b80      	cmp	r3, #128	; 0x80
 8006b4e:	d00a      	beq.n	8006b66 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 f9fd 	bl	8007f54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b5a:	2180      	movs	r1, #128	; 0x80
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 f9f9 	bl	8007f54 <USBD_LL_StallEP>
 8006b62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b64:	e020      	b.n	8006ba8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fc45 	bl	80073f8 <USBD_CtlError>
              break;
 8006b6e:	e01b      	b.n	8006ba8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	885b      	ldrh	r3, [r3, #2]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10e      	bne.n	8006b96 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <USBD_StdEPReq+0xc0>
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
 8006b80:	2b80      	cmp	r3, #128	; 0x80
 8006b82:	d008      	beq.n	8006b96 <USBD_StdEPReq+0xc0>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	88db      	ldrh	r3, [r3, #6]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d104      	bne.n	8006b96 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 f9df 	bl	8007f54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fcf9 	bl	800758e <USBD_CtlSendStatus>

              break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fc29 	bl	80073f8 <USBD_CtlError>
              break;
 8006ba6:	bf00      	nop
          }
          break;
 8006ba8:	e0ec      	b.n	8006d84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d002      	beq.n	8006bbc <USBD_StdEPReq+0xe6>
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d016      	beq.n	8006be8 <USBD_StdEPReq+0x112>
 8006bba:	e030      	b.n	8006c1e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00d      	beq.n	8006bde <USBD_StdEPReq+0x108>
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	2b80      	cmp	r3, #128	; 0x80
 8006bc6:	d00a      	beq.n	8006bde <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f9c1 	bl	8007f54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bd2:	2180      	movs	r1, #128	; 0x80
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f9bd 	bl	8007f54 <USBD_LL_StallEP>
 8006bda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bdc:	e025      	b.n	8006c2a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fc09 	bl	80073f8 <USBD_CtlError>
              break;
 8006be6:	e020      	b.n	8006c2a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	885b      	ldrh	r3, [r3, #2]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d11b      	bne.n	8006c28 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 f9c7 	bl	8007f92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fcc2 	bl	800758e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006c1c:	e004      	b.n	8006c28 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fbe9 	bl	80073f8 <USBD_CtlError>
              break;
 8006c26:	e000      	b.n	8006c2a <USBD_StdEPReq+0x154>
              break;
 8006c28:	bf00      	nop
          }
          break;
 8006c2a:	e0ab      	b.n	8006d84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d002      	beq.n	8006c3e <USBD_StdEPReq+0x168>
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d032      	beq.n	8006ca2 <USBD_StdEPReq+0x1cc>
 8006c3c:	e097      	b.n	8006d6e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <USBD_StdEPReq+0x17e>
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	2b80      	cmp	r3, #128	; 0x80
 8006c48:	d004      	beq.n	8006c54 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fbd3 	bl	80073f8 <USBD_CtlError>
                break;
 8006c52:	e091      	b.n	8006d78 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da0b      	bge.n	8006c74 <USBD_StdEPReq+0x19e>
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	3310      	adds	r3, #16
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4413      	add	r3, r2
 8006c70:	3304      	adds	r3, #4
 8006c72:	e00b      	b.n	8006c8c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2202      	movs	r2, #2
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fc1d 	bl	80074da <USBD_CtlSendData>
              break;
 8006ca0:	e06a      	b.n	8006d78 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da11      	bge.n	8006cce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	f003 020f 	and.w	r2, r3, #15
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	3324      	adds	r3, #36	; 0x24
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d117      	bne.n	8006cf4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fb96 	bl	80073f8 <USBD_CtlError>
                  break;
 8006ccc:	e054      	b.n	8006d78 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	f003 020f 	and.w	r2, r3, #15
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fb83 	bl	80073f8 <USBD_CtlError>
                  break;
 8006cf2:	e041      	b.n	8006d78 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	da0b      	bge.n	8006d14 <USBD_StdEPReq+0x23e>
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	3310      	adds	r3, #16
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	4413      	add	r3, r2
 8006d10:	3304      	adds	r3, #4
 8006d12:	e00b      	b.n	8006d2c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	4413      	add	r3, r2
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <USBD_StdEPReq+0x264>
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	2b80      	cmp	r3, #128	; 0x80
 8006d38:	d103      	bne.n	8006d42 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e00e      	b.n	8006d60 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 f942 	bl	8007fd0 <USBD_LL_IsStallEP>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	e002      	b.n	8006d60 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2202      	movs	r2, #2
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fbb7 	bl	80074da <USBD_CtlSendData>
              break;
 8006d6c:	e004      	b.n	8006d78 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fb41 	bl	80073f8 <USBD_CtlError>
              break;
 8006d76:	bf00      	nop
          }
          break;
 8006d78:	e004      	b.n	8006d84 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fb3b 	bl	80073f8 <USBD_CtlError>
          break;
 8006d82:	bf00      	nop
      }
      break;
 8006d84:	e004      	b.n	8006d90 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fb35 	bl	80073f8 <USBD_CtlError>
      break;
 8006d8e:	bf00      	nop
  }

  return ret;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	885b      	ldrh	r3, [r3, #2]
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	2b06      	cmp	r3, #6
 8006dbe:	f200 8128 	bhi.w	8007012 <USBD_GetDescriptor+0x276>
 8006dc2:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <USBD_GetDescriptor+0x2c>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006de5 	.word	0x08006de5
 8006dcc:	08006dfd 	.word	0x08006dfd
 8006dd0:	08006e3d 	.word	0x08006e3d
 8006dd4:	08007013 	.word	0x08007013
 8006dd8:	08007013 	.word	0x08007013
 8006ddc:	08006fb3 	.word	0x08006fb3
 8006de0:	08006fdf 	.word	0x08006fdf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	7c12      	ldrb	r2, [r2, #16]
 8006df0:	f107 0108 	add.w	r1, r7, #8
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	60f8      	str	r0, [r7, #12]
      break;
 8006dfa:	e112      	b.n	8007022 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7c1b      	ldrb	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10d      	bne.n	8006e20 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	f107 0208 	add.w	r2, r7, #8
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
 8006e14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e1e:	e100      	b.n	8007022 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	f107 0208 	add.w	r2, r7, #8
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4798      	blx	r3
 8006e30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	2202      	movs	r2, #2
 8006e38:	701a      	strb	r2, [r3, #0]
      break;
 8006e3a:	e0f2      	b.n	8007022 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	885b      	ldrh	r3, [r3, #2]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	f200 80ac 	bhi.w	8006fa0 <USBD_GetDescriptor+0x204>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <USBD_GetDescriptor+0xb4>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e69 	.word	0x08006e69
 8006e54:	08006e9d 	.word	0x08006e9d
 8006e58:	08006ed1 	.word	0x08006ed1
 8006e5c:	08006f05 	.word	0x08006f05
 8006e60:	08006f39 	.word	0x08006f39
 8006e64:	08006f6d 	.word	0x08006f6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	7c12      	ldrb	r2, [r2, #16]
 8006e80:	f107 0108 	add.w	r1, r7, #8
 8006e84:	4610      	mov	r0, r2
 8006e86:	4798      	blx	r3
 8006e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e8a:	e091      	b.n	8006fb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fab2 	bl	80073f8 <USBD_CtlError>
            err++;
 8006e94:	7afb      	ldrb	r3, [r7, #11]
 8006e96:	3301      	adds	r3, #1
 8006e98:	72fb      	strb	r3, [r7, #11]
          break;
 8006e9a:	e089      	b.n	8006fb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00b      	beq.n	8006ec0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	7c12      	ldrb	r2, [r2, #16]
 8006eb4:	f107 0108 	add.w	r1, r7, #8
 8006eb8:	4610      	mov	r0, r2
 8006eba:	4798      	blx	r3
 8006ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ebe:	e077      	b.n	8006fb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa98 	bl	80073f8 <USBD_CtlError>
            err++;
 8006ec8:	7afb      	ldrb	r3, [r7, #11]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ece:	e06f      	b.n	8006fb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00b      	beq.n	8006ef4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	7c12      	ldrb	r2, [r2, #16]
 8006ee8:	f107 0108 	add.w	r1, r7, #8
 8006eec:	4610      	mov	r0, r2
 8006eee:	4798      	blx	r3
 8006ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ef2:	e05d      	b.n	8006fb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa7e 	bl	80073f8 <USBD_CtlError>
            err++;
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	3301      	adds	r3, #1
 8006f00:	72fb      	strb	r3, [r7, #11]
          break;
 8006f02:	e055      	b.n	8006fb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	7c12      	ldrb	r2, [r2, #16]
 8006f1c:	f107 0108 	add.w	r1, r7, #8
 8006f20:	4610      	mov	r0, r2
 8006f22:	4798      	blx	r3
 8006f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f26:	e043      	b.n	8006fb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa64 	bl	80073f8 <USBD_CtlError>
            err++;
 8006f30:	7afb      	ldrb	r3, [r7, #11]
 8006f32:	3301      	adds	r3, #1
 8006f34:	72fb      	strb	r3, [r7, #11]
          break;
 8006f36:	e03b      	b.n	8006fb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	7c12      	ldrb	r2, [r2, #16]
 8006f50:	f107 0108 	add.w	r1, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f5a:	e029      	b.n	8006fb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fa4a 	bl	80073f8 <USBD_CtlError>
            err++;
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	3301      	adds	r3, #1
 8006f68:	72fb      	strb	r3, [r7, #11]
          break;
 8006f6a:	e021      	b.n	8006fb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	7c12      	ldrb	r2, [r2, #16]
 8006f84:	f107 0108 	add.w	r1, r7, #8
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4798      	blx	r3
 8006f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f8e:	e00f      	b.n	8006fb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa30 	bl	80073f8 <USBD_CtlError>
            err++;
 8006f98:	7afb      	ldrb	r3, [r7, #11]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f9e:	e007      	b.n	8006fb0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa28 	bl	80073f8 <USBD_CtlError>
          err++;
 8006fa8:	7afb      	ldrb	r3, [r7, #11]
 8006faa:	3301      	adds	r3, #1
 8006fac:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006fae:	bf00      	nop
      }
      break;
 8006fb0:	e037      	b.n	8007022 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7c1b      	ldrb	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d109      	bne.n	8006fce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc2:	f107 0208 	add.w	r2, r7, #8
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	4798      	blx	r3
 8006fca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fcc:	e029      	b.n	8007022 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fa11 	bl	80073f8 <USBD_CtlError>
        err++;
 8006fd6:	7afb      	ldrb	r3, [r7, #11]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	72fb      	strb	r3, [r7, #11]
      break;
 8006fdc:	e021      	b.n	8007022 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7c1b      	ldrb	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10d      	bne.n	8007002 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	f107 0208 	add.w	r2, r7, #8
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	4798      	blx	r3
 8006ff6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	2207      	movs	r2, #7
 8006ffe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007000:	e00f      	b.n	8007022 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f9f7 	bl	80073f8 <USBD_CtlError>
        err++;
 800700a:	7afb      	ldrb	r3, [r7, #11]
 800700c:	3301      	adds	r3, #1
 800700e:	72fb      	strb	r3, [r7, #11]
      break;
 8007010:	e007      	b.n	8007022 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f9ef 	bl	80073f8 <USBD_CtlError>
      err++;
 800701a:	7afb      	ldrb	r3, [r7, #11]
 800701c:	3301      	adds	r3, #1
 800701e:	72fb      	strb	r3, [r7, #11]
      break;
 8007020:	bf00      	nop
  }

  if (err != 0U)
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11e      	bne.n	8007066 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	88db      	ldrh	r3, [r3, #6]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d016      	beq.n	800705e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007030:	893b      	ldrh	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00e      	beq.n	8007054 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	88da      	ldrh	r2, [r3, #6]
 800703a:	893b      	ldrh	r3, [r7, #8]
 800703c:	4293      	cmp	r3, r2
 800703e:	bf28      	it	cs
 8007040:	4613      	movcs	r3, r2
 8007042:	b29b      	uxth	r3, r3
 8007044:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007046:	893b      	ldrh	r3, [r7, #8]
 8007048:	461a      	mov	r2, r3
 800704a:	68f9      	ldr	r1, [r7, #12]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fa44 	bl	80074da <USBD_CtlSendData>
 8007052:	e009      	b.n	8007068 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f9ce 	bl	80073f8 <USBD_CtlError>
 800705c:	e004      	b.n	8007068 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa95 	bl	800758e <USBD_CtlSendStatus>
 8007064:	e000      	b.n	8007068 <USBD_GetDescriptor+0x2cc>
    return;
 8007066:	bf00      	nop
  }
}
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop

08007070 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	889b      	ldrh	r3, [r3, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d131      	bne.n	80070e6 <USBD_SetAddress+0x76>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	88db      	ldrh	r3, [r3, #6]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d12d      	bne.n	80070e6 <USBD_SetAddress+0x76>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	885b      	ldrh	r3, [r3, #2]
 800708e:	2b7f      	cmp	r3, #127	; 0x7f
 8007090:	d829      	bhi.n	80070e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	885b      	ldrh	r3, [r3, #2]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800709c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d104      	bne.n	80070b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f9a3 	bl	80073f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b2:	e01d      	b.n	80070f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	7bfa      	ldrb	r2, [r7, #15]
 80070b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 ffb1 	bl	8008028 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa61 	bl	800758e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070da:	e009      	b.n	80070f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e4:	e004      	b.n	80070f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f985 	bl	80073f8 <USBD_CtlError>
  }
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	885b      	ldrh	r3, [r3, #2]
 800710a:	b2da      	uxtb	r2, r3
 800710c:	4b4c      	ldr	r3, [pc, #304]	; (8007240 <USBD_SetConfig+0x148>)
 800710e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007110:	4b4b      	ldr	r3, [pc, #300]	; (8007240 <USBD_SetConfig+0x148>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d905      	bls.n	8007124 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f96c 	bl	80073f8 <USBD_CtlError>
    return USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	e088      	b.n	8007236 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d002      	beq.n	8007136 <USBD_SetConfig+0x3e>
 8007130:	2b03      	cmp	r3, #3
 8007132:	d025      	beq.n	8007180 <USBD_SetConfig+0x88>
 8007134:	e071      	b.n	800721a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007136:	4b42      	ldr	r3, [pc, #264]	; (8007240 <USBD_SetConfig+0x148>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d01c      	beq.n	8007178 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800713e:	4b40      	ldr	r3, [pc, #256]	; (8007240 <USBD_SetConfig+0x148>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007148:	4b3d      	ldr	r3, [pc, #244]	; (8007240 <USBD_SetConfig+0x148>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff f948 	bl	80063e4 <USBD_SetClassConfig>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f949 	bl	80073f8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007166:	e065      	b.n	8007234 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa10 	bl	800758e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2203      	movs	r2, #3
 8007172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007176:	e05d      	b.n	8007234 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fa08 	bl	800758e <USBD_CtlSendStatus>
      break;
 800717e:	e059      	b.n	8007234 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007180:	4b2f      	ldr	r3, [pc, #188]	; (8007240 <USBD_SetConfig+0x148>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d112      	bne.n	80071ae <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007190:	4b2b      	ldr	r3, [pc, #172]	; (8007240 <USBD_SetConfig+0x148>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800719a:	4b29      	ldr	r3, [pc, #164]	; (8007240 <USBD_SetConfig+0x148>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff f93b 	bl	800641c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9f1 	bl	800758e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071ac:	e042      	b.n	8007234 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80071ae:	4b24      	ldr	r3, [pc, #144]	; (8007240 <USBD_SetConfig+0x148>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d02a      	beq.n	8007212 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff f929 	bl	800641c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80071ca:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <USBD_SetConfig+0x148>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071d4:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <USBD_SetConfig+0x148>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff f902 	bl	80063e4 <USBD_SetClassConfig>
 80071e0:	4603      	mov	r3, r0
 80071e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00f      	beq.n	800720a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f903 	bl	80073f8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff f90e 	bl	800641c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007208:	e014      	b.n	8007234 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f9bf 	bl	800758e <USBD_CtlSendStatus>
      break;
 8007210:	e010      	b.n	8007234 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f9bb 	bl	800758e <USBD_CtlSendStatus>
      break;
 8007218:	e00c      	b.n	8007234 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f8eb 	bl	80073f8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007222:	4b07      	ldr	r3, [pc, #28]	; (8007240 <USBD_SetConfig+0x148>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff f8f7 	bl	800641c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	73fb      	strb	r3, [r7, #15]
      break;
 8007232:	bf00      	nop
  }

  return ret;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000380 	.word	0x20000380

08007244 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	88db      	ldrh	r3, [r3, #6]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d004      	beq.n	8007260 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f8cd 	bl	80073f8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800725e:	e023      	b.n	80072a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	dc02      	bgt.n	8007272 <USBD_GetConfig+0x2e>
 800726c:	2b00      	cmp	r3, #0
 800726e:	dc03      	bgt.n	8007278 <USBD_GetConfig+0x34>
 8007270:	e015      	b.n	800729e <USBD_GetConfig+0x5a>
 8007272:	2b03      	cmp	r3, #3
 8007274:	d00b      	beq.n	800728e <USBD_GetConfig+0x4a>
 8007276:	e012      	b.n	800729e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3308      	adds	r3, #8
 8007282:	2201      	movs	r2, #1
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f927 	bl	80074da <USBD_CtlSendData>
        break;
 800728c:	e00c      	b.n	80072a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3304      	adds	r3, #4
 8007292:	2201      	movs	r2, #1
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f91f 	bl	80074da <USBD_CtlSendData>
        break;
 800729c:	e004      	b.n	80072a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f8a9 	bl	80073f8 <USBD_CtlError>
        break;
 80072a6:	bf00      	nop
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d81e      	bhi.n	8007306 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	88db      	ldrh	r3, [r3, #6]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d004      	beq.n	80072da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f890 	bl	80073f8 <USBD_CtlError>
        break;
 80072d8:	e01a      	b.n	8007310 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f043 0202 	orr.w	r2, r3, #2
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	330c      	adds	r3, #12
 80072fa:	2202      	movs	r2, #2
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f8eb 	bl	80074da <USBD_CtlSendData>
      break;
 8007304:	e004      	b.n	8007310 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f875 	bl	80073f8 <USBD_CtlError>
      break;
 800730e:	bf00      	nop
  }
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	885b      	ldrh	r3, [r3, #2]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d106      	bne.n	8007338 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f92b 	bl	800758e <USBD_CtlSendStatus>
  }
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007350:	b2db      	uxtb	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	2b02      	cmp	r3, #2
 8007356:	d80b      	bhi.n	8007370 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	885b      	ldrh	r3, [r3, #2]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d10c      	bne.n	800737a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f910 	bl	800758e <USBD_CtlSendStatus>
      }
      break;
 800736e:	e004      	b.n	800737a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f840 	bl	80073f8 <USBD_CtlError>
      break;
 8007378:	e000      	b.n	800737c <USBD_ClrFeature+0x3c>
      break;
 800737a:	bf00      	nop
  }
}
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	781a      	ldrb	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff fabb 	bl	800692a <SWAPBYTE>
 80073b4:	4603      	mov	r3, r0
 80073b6:	461a      	mov	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3301      	adds	r3, #1
 80073c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3301      	adds	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f7ff faae 	bl	800692a <SWAPBYTE>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3301      	adds	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff faa1 	bl	800692a <SWAPBYTE>
 80073e8:	4603      	mov	r3, r0
 80073ea:	461a      	mov	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	80da      	strh	r2, [r3, #6]
}
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fda5 	bl	8007f54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800740a:	2100      	movs	r1, #0
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fda1 	bl	8007f54 <USBD_LL_StallEP>
}
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b086      	sub	sp, #24
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d036      	beq.n	800749e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007434:	6938      	ldr	r0, [r7, #16]
 8007436:	f000 f836 	bl	80074a6 <USBD_GetLen>
 800743a:	4603      	mov	r3, r0
 800743c:	3301      	adds	r3, #1
 800743e:	b29b      	uxth	r3, r3
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4413      	add	r3, r2
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	7812      	ldrb	r2, [r2, #0]
 8007452:	701a      	strb	r2, [r3, #0]
  idx++;
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	3301      	adds	r3, #1
 8007458:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	4413      	add	r3, r2
 8007460:	2203      	movs	r2, #3
 8007462:	701a      	strb	r2, [r3, #0]
  idx++;
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	3301      	adds	r3, #1
 8007468:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800746a:	e013      	b.n	8007494 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4413      	add	r3, r2
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	7812      	ldrb	r2, [r2, #0]
 8007476:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	3301      	adds	r3, #1
 800747c:	613b      	str	r3, [r7, #16]
    idx++;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	3301      	adds	r3, #1
 8007482:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	4413      	add	r3, r2
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
    idx++;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	3301      	adds	r3, #1
 8007492:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e7      	bne.n	800746c <USBD_GetString+0x52>
 800749c:	e000      	b.n	80074a0 <USBD_GetString+0x86>
    return;
 800749e:	bf00      	nop
  }
}
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074b6:	e005      	b.n	80074c4 <USBD_GetLen+0x1e>
  {
    len++;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	3301      	adds	r3, #1
 80074bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	3301      	adds	r3, #1
 80074c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f5      	bne.n	80074b8 <USBD_GetLen+0x12>
  }

  return len;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2202      	movs	r2, #2
 80074ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	2100      	movs	r1, #0
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 fdb0 	bl	8008066 <USBD_LL_Transmit>

  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	2100      	movs	r1, #0
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fd9f 	bl	8008066 <USBD_LL_Transmit>

  return USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2203      	movs	r2, #3
 8007542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	2100      	movs	r1, #0
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 fda3 	bl	80080a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	2100      	movs	r1, #0
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 fd92 	bl	80080a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2204      	movs	r2, #4
 800759a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800759e:	2300      	movs	r3, #0
 80075a0:	2200      	movs	r2, #0
 80075a2:	2100      	movs	r1, #0
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fd5e 	bl	8008066 <USBD_LL_Transmit>

  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2205      	movs	r2, #5
 80075c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075c4:	2300      	movs	r3, #0
 80075c6:	2200      	movs	r2, #0
 80075c8:	2100      	movs	r1, #0
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fd6c 	bl	80080a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075e0:	2200      	movs	r2, #0
 80075e2:	4912      	ldr	r1, [pc, #72]	; (800762c <MX_USB_DEVICE_Init+0x50>)
 80075e4:	4812      	ldr	r0, [pc, #72]	; (8007630 <MX_USB_DEVICE_Init+0x54>)
 80075e6:	f7fe fe8f 	bl	8006308 <USBD_Init>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075f0:	f7f9 ff78 	bl	80014e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075f4:	490f      	ldr	r1, [pc, #60]	; (8007634 <MX_USB_DEVICE_Init+0x58>)
 80075f6:	480e      	ldr	r0, [pc, #56]	; (8007630 <MX_USB_DEVICE_Init+0x54>)
 80075f8:	f7fe feb6 	bl	8006368 <USBD_RegisterClass>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007602:	f7f9 ff6f 	bl	80014e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007606:	490c      	ldr	r1, [pc, #48]	; (8007638 <MX_USB_DEVICE_Init+0x5c>)
 8007608:	4809      	ldr	r0, [pc, #36]	; (8007630 <MX_USB_DEVICE_Init+0x54>)
 800760a:	f7fe fe07 	bl	800621c <USBD_CDC_RegisterInterface>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007614:	f7f9 ff66 	bl	80014e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007618:	4805      	ldr	r0, [pc, #20]	; (8007630 <MX_USB_DEVICE_Init+0x54>)
 800761a:	f7fe fecc 	bl	80063b6 <USBD_Start>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007624:	f7f9 ff5e 	bl	80014e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007628:	bf00      	nop
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20000134 	.word	0x20000134
 8007630:	20000644 	.word	0x20000644
 8007634:	2000001c 	.word	0x2000001c
 8007638:	20000120 	.word	0x20000120

0800763c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007642:	2200      	movs	r2, #0
 8007644:	4915      	ldr	r1, [pc, #84]	; (800769c <CDC_Init_FS+0x60>)
 8007646:	4816      	ldr	r0, [pc, #88]	; (80076a0 <CDC_Init_FS+0x64>)
 8007648:	f7fe fdfd 	bl	8006246 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800764c:	4915      	ldr	r1, [pc, #84]	; (80076a4 <CDC_Init_FS+0x68>)
 800764e:	4814      	ldr	r0, [pc, #80]	; (80076a0 <CDC_Init_FS+0x64>)
 8007650:	f7fe fe17 	bl	8006282 <USBD_CDC_SetRxBuffer>

    uint32_t baudrate = 115200;
 8007654:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007658:	607b      	str	r3, [r7, #4]
    lcBuffer[0] = (uint8_t) (baudrate);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	b2da      	uxtb	r2, r3
 800765e:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <CDC_Init_FS+0x6c>)
 8007660:	701a      	strb	r2, [r3, #0]
    lcBuffer[1] = (uint8_t) (baudrate >> 8);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	b2da      	uxtb	r2, r3
 8007668:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <CDC_Init_FS+0x6c>)
 800766a:	705a      	strb	r2, [r3, #1]
    lcBuffer[2] = (uint8_t) (baudrate >> 16);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	0c1b      	lsrs	r3, r3, #16
 8007670:	b2da      	uxtb	r2, r3
 8007672:	4b0d      	ldr	r3, [pc, #52]	; (80076a8 <CDC_Init_FS+0x6c>)
 8007674:	709a      	strb	r2, [r3, #2]
    lcBuffer[3] = (uint8_t) (baudrate >> 24);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	0e1b      	lsrs	r3, r3, #24
 800767a:	b2da      	uxtb	r2, r3
 800767c:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <CDC_Init_FS+0x6c>)
 800767e:	70da      	strb	r2, [r3, #3]
    lcBuffer[4] = 0; // 1 Stop bit
 8007680:	4b09      	ldr	r3, [pc, #36]	; (80076a8 <CDC_Init_FS+0x6c>)
 8007682:	2200      	movs	r2, #0
 8007684:	711a      	strb	r2, [r3, #4]
    lcBuffer[5] = 0; // No parity
 8007686:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <CDC_Init_FS+0x6c>)
 8007688:	2200      	movs	r2, #0
 800768a:	715a      	strb	r2, [r3, #5]
    lcBuffer[6] = 8; // 8 data bits
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <CDC_Init_FS+0x6c>)
 800768e:	2208      	movs	r2, #8
 8007690:	719a      	strb	r2, [r3, #6]

    return (USBD_OK);
 8007692:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20001114 	.word	0x20001114
 80076a0:	20000644 	.word	0x20000644
 80076a4:	20000914 	.word	0x20000914
 80076a8:	20009614 	.word	0x20009614

080076ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 80076b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	6039      	str	r1, [r7, #0]
 80076c6:	71fb      	strb	r3, [r7, #7]
 80076c8:	4613      	mov	r3, r2
 80076ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	2b23      	cmp	r3, #35	; 0x23
 80076d0:	f200 808e 	bhi.w	80077f0 <CDC_Control_FS+0x134>
 80076d4:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <CDC_Control_FS+0x20>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	080077f1 	.word	0x080077f1
 80076e0:	080077f1 	.word	0x080077f1
 80076e4:	080077f1 	.word	0x080077f1
 80076e8:	080077f1 	.word	0x080077f1
 80076ec:	080077f1 	.word	0x080077f1
 80076f0:	080077f1 	.word	0x080077f1
 80076f4:	080077f1 	.word	0x080077f1
 80076f8:	080077f1 	.word	0x080077f1
 80076fc:	080077f1 	.word	0x080077f1
 8007700:	080077f1 	.word	0x080077f1
 8007704:	080077f1 	.word	0x080077f1
 8007708:	080077f1 	.word	0x080077f1
 800770c:	080077f1 	.word	0x080077f1
 8007710:	080077f1 	.word	0x080077f1
 8007714:	080077f1 	.word	0x080077f1
 8007718:	080077f1 	.word	0x080077f1
 800771c:	080077f1 	.word	0x080077f1
 8007720:	080077f1 	.word	0x080077f1
 8007724:	080077f1 	.word	0x080077f1
 8007728:	080077f1 	.word	0x080077f1
 800772c:	080077f1 	.word	0x080077f1
 8007730:	080077f1 	.word	0x080077f1
 8007734:	080077f1 	.word	0x080077f1
 8007738:	080077f1 	.word	0x080077f1
 800773c:	080077f1 	.word	0x080077f1
 8007740:	080077f1 	.word	0x080077f1
 8007744:	080077f1 	.word	0x080077f1
 8007748:	080077f1 	.word	0x080077f1
 800774c:	080077f1 	.word	0x080077f1
 8007750:	080077f1 	.word	0x080077f1
 8007754:	080077f1 	.word	0x080077f1
 8007758:	080077f1 	.word	0x080077f1
 800775c:	0800776d 	.word	0x0800776d
 8007760:	080077a7 	.word	0x080077a7
 8007764:	080077f1 	.word	0x080077f1
 8007768:	080077f1 	.word	0x080077f1
        /*                                        3 - Mark                             */
        /*                                        4 - Space                            */
        /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
        /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        lcBuffer[0] = pbuf[0];
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781a      	ldrb	r2, [r3, #0]
 8007770:	4b22      	ldr	r3, [pc, #136]	; (80077fc <CDC_Control_FS+0x140>)
 8007772:	701a      	strb	r2, [r3, #0]
        lcBuffer[1] = pbuf[1];
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	785a      	ldrb	r2, [r3, #1]
 8007778:	4b20      	ldr	r3, [pc, #128]	; (80077fc <CDC_Control_FS+0x140>)
 800777a:	705a      	strb	r2, [r3, #1]
        lcBuffer[2] = pbuf[2];
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	789a      	ldrb	r2, [r3, #2]
 8007780:	4b1e      	ldr	r3, [pc, #120]	; (80077fc <CDC_Control_FS+0x140>)
 8007782:	709a      	strb	r2, [r3, #2]
        lcBuffer[3] = pbuf[3];
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	78da      	ldrb	r2, [r3, #3]
 8007788:	4b1c      	ldr	r3, [pc, #112]	; (80077fc <CDC_Control_FS+0x140>)
 800778a:	70da      	strb	r2, [r3, #3]
        lcBuffer[4] = pbuf[4];
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	791a      	ldrb	r2, [r3, #4]
 8007790:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <CDC_Control_FS+0x140>)
 8007792:	711a      	strb	r2, [r3, #4]
        lcBuffer[5] = pbuf[5];
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	795a      	ldrb	r2, [r3, #5]
 8007798:	4b18      	ldr	r3, [pc, #96]	; (80077fc <CDC_Control_FS+0x140>)
 800779a:	715a      	strb	r2, [r3, #5]
        lcBuffer[6] = pbuf[6];
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	799a      	ldrb	r2, [r3, #6]
 80077a0:	4b16      	ldr	r3, [pc, #88]	; (80077fc <CDC_Control_FS+0x140>)
 80077a2:	719a      	strb	r2, [r3, #6]
        break;
 80077a4:	e025      	b.n	80077f2 <CDC_Control_FS+0x136>

    case CDC_GET_LINE_CODING:
        pbuf[0] = lcBuffer[0];
 80077a6:	4b15      	ldr	r3, [pc, #84]	; (80077fc <CDC_Control_FS+0x140>)
 80077a8:	781a      	ldrb	r2, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	701a      	strb	r2, [r3, #0]
        pbuf[1] = lcBuffer[1];
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	3301      	adds	r3, #1
 80077b2:	4a12      	ldr	r2, [pc, #72]	; (80077fc <CDC_Control_FS+0x140>)
 80077b4:	7852      	ldrb	r2, [r2, #1]
 80077b6:	701a      	strb	r2, [r3, #0]
        pbuf[2] = lcBuffer[2];
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	3302      	adds	r3, #2
 80077bc:	4a0f      	ldr	r2, [pc, #60]	; (80077fc <CDC_Control_FS+0x140>)
 80077be:	7892      	ldrb	r2, [r2, #2]
 80077c0:	701a      	strb	r2, [r3, #0]
        pbuf[3] = lcBuffer[3];
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	3303      	adds	r3, #3
 80077c6:	4a0d      	ldr	r2, [pc, #52]	; (80077fc <CDC_Control_FS+0x140>)
 80077c8:	78d2      	ldrb	r2, [r2, #3]
 80077ca:	701a      	strb	r2, [r3, #0]
        pbuf[4] = lcBuffer[4];
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <CDC_Control_FS+0x140>)
 80077d2:	7912      	ldrb	r2, [r2, #4]
 80077d4:	701a      	strb	r2, [r3, #0]
        pbuf[5] = lcBuffer[5];
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	3305      	adds	r3, #5
 80077da:	4a08      	ldr	r2, [pc, #32]	; (80077fc <CDC_Control_FS+0x140>)
 80077dc:	7952      	ldrb	r2, [r2, #5]
 80077de:	701a      	strb	r2, [r3, #0]
        pbuf[6] = lcBuffer[6];
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	3306      	adds	r3, #6
 80077e4:	4a05      	ldr	r2, [pc, #20]	; (80077fc <CDC_Control_FS+0x140>)
 80077e6:	7992      	ldrb	r2, [r2, #6]
 80077e8:	701a      	strb	r2, [r3, #0]

        // Get line coding is invoked when the host connects, clear the RxBuffer when this occurs
        CDC_FlushRxBuffer_FS();
 80077ea:	f000 f891 	bl	8007910 <CDC_FlushRxBuffer_FS>
        break;
 80077ee:	e000      	b.n	80077f2 <CDC_Control_FS+0x136>
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 80077f0:	bf00      	nop
    }

    return (USBD_OK);
 80077f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	20009614 	.word	0x20009614

08007800 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	4826      	ldr	r0, [pc, #152]	; (80078a8 <CDC_Receive_FS+0xa8>)
 800780e:	f7fe fd38 	bl	8006282 <USBD_CDC_SetRxBuffer>

    uint8_t len = (uint8_t) *Len; // Get length
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	73fb      	strb	r3, [r7, #15]

    uint16_t tempHeadPos = rxBufferHeadPos; // Increment temp head pos while writing, then update main variable when complete
 8007818:	4b24      	ldr	r3, [pc, #144]	; (80078ac <CDC_Receive_FS+0xac>)
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	82fb      	strh	r3, [r7, #22]

    for (uint32_t i = 0; i < len; i++) {
 800781e:	2300      	movs	r3, #0
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	e032      	b.n	800788a <CDC_Receive_FS+0x8a>
        rxBuffer[tempHeadPos] = Buf[i];
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	441a      	add	r2, r3
 800782a:	8afb      	ldrh	r3, [r7, #22]
 800782c:	7811      	ldrb	r1, [r2, #0]
 800782e:	4a20      	ldr	r2, [pc, #128]	; (80078b0 <CDC_Receive_FS+0xb0>)
 8007830:	54d1      	strb	r1, [r2, r3]
        if (Buf[i] == DEFAULT_DELIM && (tempHeadPos == 1 || tempHeadPos == 4 || tempHeadPos == 31105)) {
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	4413      	add	r3, r2
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b0a      	cmp	r3, #10
 800783c:	d10d      	bne.n	800785a <CDC_Receive_FS+0x5a>
 800783e:	8afb      	ldrh	r3, [r7, #22]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d007      	beq.n	8007854 <CDC_Receive_FS+0x54>
 8007844:	8afb      	ldrh	r3, [r7, #22]
 8007846:	2b04      	cmp	r3, #4
 8007848:	d004      	beq.n	8007854 <CDC_Receive_FS+0x54>
 800784a:	8afb      	ldrh	r3, [r7, #22]
 800784c:	f647 1281 	movw	r2, #31105	; 0x7981
 8007850:	4293      	cmp	r3, r2
 8007852:	d102      	bne.n	800785a <CDC_Receive_FS+0x5a>
            data_ready = true;
 8007854:	4b17      	ldr	r3, [pc, #92]	; (80078b4 <CDC_Receive_FS+0xb4>)
 8007856:	2201      	movs	r2, #1
 8007858:	701a      	strb	r2, [r3, #0]
        }
        tempHeadPos = (uint16_t) ((uint16_t) (tempHeadPos + 1) % HL_RX_BUFFER_SIZE);
 800785a:	8afb      	ldrh	r3, [r7, #22]
 800785c:	3301      	adds	r3, #1
 800785e:	b29b      	uxth	r3, r3
 8007860:	4a15      	ldr	r2, [pc, #84]	; (80078b8 <CDC_Receive_FS+0xb8>)
 8007862:	fba2 1203 	umull	r1, r2, r2, r3
 8007866:	0ad2      	lsrs	r2, r2, #11
 8007868:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 800786c:	fb01 f202 	mul.w	r2, r1, r2
 8007870:	1a9b      	subs	r3, r3, r2
 8007872:	82fb      	strh	r3, [r7, #22]

        if (tempHeadPos == rxBufferTailPos) {
 8007874:	4b11      	ldr	r3, [pc, #68]	; (80078bc <CDC_Receive_FS+0xbc>)
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	8afa      	ldrh	r2, [r7, #22]
 800787c:	429a      	cmp	r2, r3
 800787e:	d101      	bne.n	8007884 <CDC_Receive_FS+0x84>
            return USBD_FAIL;
 8007880:	2303      	movs	r3, #3
 8007882:	e00d      	b.n	80078a0 <CDC_Receive_FS+0xa0>
    for (uint32_t i = 0; i < len; i++) {
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	3301      	adds	r3, #1
 8007888:	613b      	str	r3, [r7, #16]
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	429a      	cmp	r2, r3
 8007890:	d3c8      	bcc.n	8007824 <CDC_Receive_FS+0x24>
        }
    }

    rxBufferHeadPos = tempHeadPos;
 8007892:	4a06      	ldr	r2, [pc, #24]	; (80078ac <CDC_Receive_FS+0xac>)
 8007894:	8afb      	ldrh	r3, [r7, #22]
 8007896:	8013      	strh	r3, [r2, #0]

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007898:	4803      	ldr	r0, [pc, #12]	; (80078a8 <CDC_Receive_FS+0xa8>)
 800789a:	f7fe fd0b 	bl	80062b4 <USBD_CDC_ReceivePacket>

    return (USBD_OK);
 800789e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000644 	.word	0x20000644
 80078ac:	20000382 	.word	0x20000382
 80078b0:	20001914 	.word	0x20001914
 80078b4:	20000386 	.word	0x20000386
 80078b8:	10624dd3 	.word	0x10624dd3
 80078bc:	20000384 	.word	0x20000384

080078c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	4613      	mov	r3, r2
 80078cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80078d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <CDC_GetRxBuffer_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t *CDC_GetRxBuffer_FS() {
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0
    return rxBuffer;
 80078e8:	4b02      	ldr	r3, [pc, #8]	; (80078f4 <CDC_GetRxBuffer_FS+0x10>)
//        if (rxBufferTailPos == HL_RX_BUFFER_SIZE) {
//            rxBufferTailPos = 0;
//        }
//        */
//    }
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	20001914 	.word	0x20001914

080078f8 <CDC_IsDataReady>:
    else
        return HL_RX_BUFFER_SIZE - tailPos + headPos;
    */
}

bool CDC_IsDataReady() {
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
    return data_ready;
 80078fc:	4b03      	ldr	r3, [pc, #12]	; (800790c <CDC_IsDataReady+0x14>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
}
 8007900:	4618      	mov	r0, r3
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	20000386 	.word	0x20000386

08007910 <CDC_FlushRxBuffer_FS>:

void CDC_FlushRxBuffer_FS() {
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
    for (int i = 0; i < HL_RX_BUFFER_SIZE; i++) {
 8007916:	2300      	movs	r3, #0
 8007918:	607b      	str	r3, [r7, #4]
 800791a:	e007      	b.n	800792c <CDC_FlushRxBuffer_FS+0x1c>
        rxBuffer[i] = 0;
 800791c:	4a0d      	ldr	r2, [pc, #52]	; (8007954 <CDC_FlushRxBuffer_FS+0x44>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4413      	add	r3, r2
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < HL_RX_BUFFER_SIZE; i++) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3301      	adds	r3, #1
 800792a:	607b      	str	r3, [r7, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007932:	dbf3      	blt.n	800791c <CDC_FlushRxBuffer_FS+0xc>
    }
    data_ready = false;
 8007934:	4b08      	ldr	r3, [pc, #32]	; (8007958 <CDC_FlushRxBuffer_FS+0x48>)
 8007936:	2200      	movs	r2, #0
 8007938:	701a      	strb	r2, [r3, #0]
    rxBufferHeadPos = 0;
 800793a:	4b08      	ldr	r3, [pc, #32]	; (800795c <CDC_FlushRxBuffer_FS+0x4c>)
 800793c:	2200      	movs	r2, #0
 800793e:	801a      	strh	r2, [r3, #0]
    rxBufferTailPos = 0;
 8007940:	4b07      	ldr	r3, [pc, #28]	; (8007960 <CDC_FlushRxBuffer_FS+0x50>)
 8007942:	2200      	movs	r2, #0
 8007944:	801a      	strh	r2, [r3, #0]
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20001914 	.word	0x20001914
 8007958:	20000386 	.word	0x20000386
 800795c:	20000382 	.word	0x20000382
 8007960:	20000384 	.word	0x20000384

08007964 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	6039      	str	r1, [r7, #0]
 800796e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2212      	movs	r2, #18
 8007974:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007976:	4b03      	ldr	r3, [pc, #12]	; (8007984 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	20000150 	.word	0x20000150

08007988 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	6039      	str	r1, [r7, #0]
 8007992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2204      	movs	r2, #4
 8007998:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800799a:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	20000164 	.word	0x20000164

080079ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	6039      	str	r1, [r7, #0]
 80079b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d105      	bne.n	80079ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	4907      	ldr	r1, [pc, #28]	; (80079e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80079c2:	4808      	ldr	r0, [pc, #32]	; (80079e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80079c4:	f7ff fd29 	bl	800741a <USBD_GetString>
 80079c8:	e004      	b.n	80079d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	4904      	ldr	r1, [pc, #16]	; (80079e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80079ce:	4805      	ldr	r0, [pc, #20]	; (80079e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80079d0:	f7ff fd23 	bl	800741a <USBD_GetString>
  }
  return USBD_StrDesc;
 80079d4:	4b02      	ldr	r3, [pc, #8]	; (80079e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	2000961c 	.word	0x2000961c
 80079e4:	0800abb8 	.word	0x0800abb8

080079e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	4603      	mov	r3, r0
 80079f0:	6039      	str	r1, [r7, #0]
 80079f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	4904      	ldr	r1, [pc, #16]	; (8007a08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079f8:	4804      	ldr	r0, [pc, #16]	; (8007a0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079fa:	f7ff fd0e 	bl	800741a <USBD_GetString>
  return USBD_StrDesc;
 80079fe:	4b02      	ldr	r3, [pc, #8]	; (8007a08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	2000961c 	.word	0x2000961c
 8007a0c:	0800abc0 	.word	0x0800abc0

08007a10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	6039      	str	r1, [r7, #0]
 8007a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	221a      	movs	r2, #26
 8007a20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a22:	f000 f843 	bl	8007aac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a26:	4b02      	ldr	r3, [pc, #8]	; (8007a30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000168 	.word	0x20000168

08007a34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	6039      	str	r1, [r7, #0]
 8007a3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a40:	79fb      	ldrb	r3, [r7, #7]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d105      	bne.n	8007a52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	4907      	ldr	r1, [pc, #28]	; (8007a68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a4a:	4808      	ldr	r0, [pc, #32]	; (8007a6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a4c:	f7ff fce5 	bl	800741a <USBD_GetString>
 8007a50:	e004      	b.n	8007a5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	4904      	ldr	r1, [pc, #16]	; (8007a68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a56:	4805      	ldr	r0, [pc, #20]	; (8007a6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a58:	f7ff fcdf 	bl	800741a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a5c:	4b02      	ldr	r3, [pc, #8]	; (8007a68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000961c 	.word	0x2000961c
 8007a6c:	0800abc8 	.word	0x0800abc8

08007a70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	6039      	str	r1, [r7, #0]
 8007a7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	4907      	ldr	r1, [pc, #28]	; (8007aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a86:	4808      	ldr	r0, [pc, #32]	; (8007aa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a88:	f7ff fcc7 	bl	800741a <USBD_GetString>
 8007a8c:	e004      	b.n	8007a98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	4904      	ldr	r1, [pc, #16]	; (8007aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a92:	4805      	ldr	r0, [pc, #20]	; (8007aa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a94:	f7ff fcc1 	bl	800741a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a98:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	2000961c 	.word	0x2000961c
 8007aa8:	0800abd4 	.word	0x0800abd4

08007aac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ab2:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <Get_SerialNum+0x44>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ab8:	4b0e      	ldr	r3, [pc, #56]	; (8007af4 <Get_SerialNum+0x48>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007abe:	4b0e      	ldr	r3, [pc, #56]	; (8007af8 <Get_SerialNum+0x4c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4413      	add	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ad2:	2208      	movs	r2, #8
 8007ad4:	4909      	ldr	r1, [pc, #36]	; (8007afc <Get_SerialNum+0x50>)
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f814 	bl	8007b04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007adc:	2204      	movs	r2, #4
 8007ade:	4908      	ldr	r1, [pc, #32]	; (8007b00 <Get_SerialNum+0x54>)
 8007ae0:	68b8      	ldr	r0, [r7, #8]
 8007ae2:	f000 f80f 	bl	8007b04 <IntToUnicode>
  }
}
 8007ae6:	bf00      	nop
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	1fff7a10 	.word	0x1fff7a10
 8007af4:	1fff7a14 	.word	0x1fff7a14
 8007af8:	1fff7a18 	.word	0x1fff7a18
 8007afc:	2000016a 	.word	0x2000016a
 8007b00:	2000017a 	.word	0x2000017a

08007b04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b16:	2300      	movs	r3, #0
 8007b18:	75fb      	strb	r3, [r7, #23]
 8007b1a:	e027      	b.n	8007b6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	0f1b      	lsrs	r3, r3, #28
 8007b20:	2b09      	cmp	r3, #9
 8007b22:	d80b      	bhi.n	8007b3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	0f1b      	lsrs	r3, r3, #28
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	440b      	add	r3, r1
 8007b34:	3230      	adds	r2, #48	; 0x30
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	701a      	strb	r2, [r3, #0]
 8007b3a:	e00a      	b.n	8007b52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	0f1b      	lsrs	r3, r3, #28
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	4619      	mov	r1, r3
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	440b      	add	r3, r1
 8007b4c:	3237      	adds	r2, #55	; 0x37
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	4413      	add	r3, r2
 8007b62:	2200      	movs	r2, #0
 8007b64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	75fb      	strb	r3, [r7, #23]
 8007b6c:	7dfa      	ldrb	r2, [r7, #23]
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d3d3      	bcc.n	8007b1c <IntToUnicode+0x18>
  }
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
	...

08007b84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08a      	sub	sp, #40	; 0x28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b8c:	f107 0314 	add.w	r3, r7, #20
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	605a      	str	r2, [r3, #4]
 8007b96:	609a      	str	r2, [r3, #8]
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ba4:	d13a      	bne.n	8007c1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	4b1e      	ldr	r3, [pc, #120]	; (8007c24 <HAL_PCD_MspInit+0xa0>)
 8007bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bae:	4a1d      	ldr	r2, [pc, #116]	; (8007c24 <HAL_PCD_MspInit+0xa0>)
 8007bb0:	f043 0301 	orr.w	r3, r3, #1
 8007bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8007bb6:	4b1b      	ldr	r3, [pc, #108]	; (8007c24 <HAL_PCD_MspInit+0xa0>)
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007bc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bc8:	2302      	movs	r3, #2
 8007bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007bd4:	230a      	movs	r3, #10
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bd8:	f107 0314 	add.w	r3, r7, #20
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4812      	ldr	r0, [pc, #72]	; (8007c28 <HAL_PCD_MspInit+0xa4>)
 8007be0:	f7fa faf2 	bl	80021c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007be4:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <HAL_PCD_MspInit+0xa0>)
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	4a0e      	ldr	r2, [pc, #56]	; (8007c24 <HAL_PCD_MspInit+0xa0>)
 8007bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bee:	6353      	str	r3, [r2, #52]	; 0x34
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <HAL_PCD_MspInit+0xa0>)
 8007bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf8:	4a0a      	ldr	r2, [pc, #40]	; (8007c24 <HAL_PCD_MspInit+0xa0>)
 8007bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bfe:	6453      	str	r3, [r2, #68]	; 0x44
 8007c00:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <HAL_PCD_MspInit+0xa0>)
 8007c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2100      	movs	r1, #0
 8007c10:	2043      	movs	r0, #67	; 0x43
 8007c12:	f7fa faa2 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c16:	2043      	movs	r0, #67	; 0x43
 8007c18:	f7fa fabb 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c1c:	bf00      	nop
 8007c1e:	3728      	adds	r7, #40	; 0x28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	40023800 	.word	0x40023800
 8007c28:	40020000 	.word	0x40020000

08007c2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c40:	4619      	mov	r1, r3
 8007c42:	4610      	mov	r0, r2
 8007c44:	f7fe fc02 	bl	800644c <USBD_LL_SetupStage>
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007c62:	78fa      	ldrb	r2, [r7, #3]
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	1a9b      	subs	r3, r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	440b      	add	r3, r1
 8007c70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	f7fe fc3c 	bl	80064f6 <USBD_LL_DataOutStage>
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007c98:	78fa      	ldrb	r2, [r7, #3]
 8007c9a:	6879      	ldr	r1, [r7, #4]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	1a9b      	subs	r3, r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	440b      	add	r3, r1
 8007ca6:	3348      	adds	r3, #72	; 0x48
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	4619      	mov	r1, r3
 8007cae:	f7fe fc85 	bl	80065bc <USBD_LL_DataInStage>
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe fd99 	bl	8006800 <USBD_LL_SOF>
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d001      	beq.n	8007cee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007cea:	f7f9 fbfb 	bl	80014e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cf4:	7bfa      	ldrb	r2, [r7, #15]
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe fd43 	bl	8006784 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fe fcef 	bl	80066e8 <USBD_LL_Reset>
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fd3e 	bl	80067a4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6812      	ldr	r2, [r2, #0]
 8007d36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d3a:	f043 0301 	orr.w	r3, r3, #1
 8007d3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d48:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <HAL_PCD_SuspendCallback+0x48>)
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	4a03      	ldr	r2, [pc, #12]	; (8007d5c <HAL_PCD_SuspendCallback+0x48>)
 8007d4e:	f043 0306 	orr.w	r3, r3, #6
 8007d52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	e000ed00 	.word	0xe000ed00

08007d60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe fd2e 	bl	80067d0 <USBD_LL_Resume>
}
 8007d74:	bf00      	nop
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe fd7c 	bl	8006890 <USBD_LL_IsoOUTIncomplete>
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007db2:	78fa      	ldrb	r2, [r7, #3]
 8007db4:	4611      	mov	r1, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe fd44 	bl	8006844 <USBD_LL_IsoINIncomplete>
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe fd82 	bl	80068dc <USBD_LL_DevConnected>
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe fd7f 	bl	80068f2 <USBD_LL_DevDisconnected>
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d13c      	bne.n	8007e86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e0c:	4a20      	ldr	r2, [pc, #128]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a1e      	ldr	r2, [pc, #120]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e1c:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e24:	4b1a      	ldr	r3, [pc, #104]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e26:	2204      	movs	r2, #4
 8007e28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e2a:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e30:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e36:	4b16      	ldr	r3, [pc, #88]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e38:	2202      	movs	r2, #2
 8007e3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e3c:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e42:	4b13      	ldr	r3, [pc, #76]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e48:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e4e:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e54:	4b0e      	ldr	r3, [pc, #56]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e5a:	480d      	ldr	r0, [pc, #52]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e5c:	f7fa fb52 	bl	8002504 <HAL_PCD_Init>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e66:	f7f9 fb3d 	bl	80014e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e6a:	2180      	movs	r1, #128	; 0x80
 8007e6c:	4808      	ldr	r0, [pc, #32]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e6e:	f7fb fcb0 	bl	80037d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e72:	2240      	movs	r2, #64	; 0x40
 8007e74:	2100      	movs	r1, #0
 8007e76:	4806      	ldr	r0, [pc, #24]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e78:	f7fb fc64 	bl	8003744 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e7c:	2280      	movs	r2, #128	; 0x80
 8007e7e:	2101      	movs	r1, #1
 8007e80:	4803      	ldr	r0, [pc, #12]	; (8007e90 <USBD_LL_Init+0x94>)
 8007e82:	f7fb fc5f 	bl	8003744 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	2000981c 	.word	0x2000981c

08007e94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fa fc47 	bl	800273e <HAL_PCD_Start>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f942 	bl	8008140 <USBD_Get_USB_Status>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	4608      	mov	r0, r1
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	4603      	mov	r3, r0
 8007eda:	70fb      	strb	r3, [r7, #3]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70bb      	strb	r3, [r7, #2]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ef2:	78bb      	ldrb	r3, [r7, #2]
 8007ef4:	883a      	ldrh	r2, [r7, #0]
 8007ef6:	78f9      	ldrb	r1, [r7, #3]
 8007ef8:	f7fb f82b 	bl	8002f52 <HAL_PCD_EP_Open>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 f91c 	bl	8008140 <USBD_Get_USB_Status>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f30:	78fa      	ldrb	r2, [r7, #3]
 8007f32:	4611      	mov	r1, r2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fb f874 	bl	8003022 <HAL_PCD_EP_Close>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 f8fd 	bl	8008140 <USBD_Get_USB_Status>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f6e:	78fa      	ldrb	r2, [r7, #3]
 8007f70:	4611      	mov	r1, r2
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fb f94c 	bl	8003210 <HAL_PCD_EP_SetStall>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 f8de 	bl	8008140 <USBD_Get_USB_Status>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fac:	78fa      	ldrb	r2, [r7, #3]
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fb f991 	bl	80032d8 <HAL_PCD_EP_ClrStall>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 f8bf 	bl	8008140 <USBD_Get_USB_Status>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fe2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	da0b      	bge.n	8008004 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	333e      	adds	r3, #62	; 0x3e
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	e00b      	b.n	800801c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800800a:	68f9      	ldr	r1, [r7, #12]
 800800c:	4613      	mov	r3, r2
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	440b      	add	r3, r1
 8008016:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800801a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008042:	78fa      	ldrb	r2, [r7, #3]
 8008044:	4611      	mov	r1, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f7fa ff5e 	bl	8002f08 <HAL_PCD_SetAddress>
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 f874 	bl	8008140 <USBD_Get_USB_Status>
 8008058:	4603      	mov	r3, r0
 800805a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800805c:	7bbb      	ldrb	r3, [r7, #14]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b086      	sub	sp, #24
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
 8008072:	460b      	mov	r3, r1
 8008074:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008084:	7af9      	ldrb	r1, [r7, #11]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	f7fb f877 	bl	800317c <HAL_PCD_EP_Transmit>
 800808e:	4603      	mov	r3, r0
 8008090:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 f853 	bl	8008140 <USBD_Get_USB_Status>
 800809a:	4603      	mov	r3, r0
 800809c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800809e:	7dbb      	ldrb	r3, [r7, #22]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	607a      	str	r2, [r7, #4]
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	460b      	mov	r3, r1
 80080b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080c6:	7af9      	ldrb	r1, [r7, #11]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	f7fa fff3 	bl	80030b6 <HAL_PCD_EP_Receive>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f832 	bl	8008140 <USBD_Get_USB_Status>
 80080dc:	4603      	mov	r3, r0
 80080de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	4611      	mov	r1, r2
 8008100:	4618      	mov	r0, r3
 8008102:	f7fb f823 	bl	800314c <HAL_PCD_EP_GetRxCount>
 8008106:	4603      	mov	r3, r0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008118:	4b03      	ldr	r3, [pc, #12]	; (8008128 <USBD_static_malloc+0x18>)
}
 800811a:	4618      	mov	r0, r3
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	20000388 	.word	0x20000388

0800812c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]

}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	2b03      	cmp	r3, #3
 8008152:	d817      	bhi.n	8008184 <USBD_Get_USB_Status+0x44>
 8008154:	a201      	add	r2, pc, #4	; (adr r2, 800815c <USBD_Get_USB_Status+0x1c>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	0800816d 	.word	0x0800816d
 8008160:	08008173 	.word	0x08008173
 8008164:	08008179 	.word	0x08008179
 8008168:	0800817f 	.word	0x0800817f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
    break;
 8008170:	e00b      	b.n	800818a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	73fb      	strb	r3, [r7, #15]
    break;
 8008176:	e008      	b.n	800818a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
    break;
 800817c:	e005      	b.n	800818a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800817e:	2303      	movs	r3, #3
 8008180:	73fb      	strb	r3, [r7, #15]
    break;
 8008182:	e002      	b.n	800818a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008184:	2303      	movs	r3, #3
 8008186:	73fb      	strb	r3, [r7, #15]
    break;
 8008188:	bf00      	nop
  }
  return usb_status;
 800818a:	7bfb      	ldrb	r3, [r7, #15]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <__errno>:
 8008198:	4b01      	ldr	r3, [pc, #4]	; (80081a0 <__errno+0x8>)
 800819a:	6818      	ldr	r0, [r3, #0]
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	20000184 	.word	0x20000184

080081a4 <__libc_init_array>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4d0d      	ldr	r5, [pc, #52]	; (80081dc <__libc_init_array+0x38>)
 80081a8:	4c0d      	ldr	r4, [pc, #52]	; (80081e0 <__libc_init_array+0x3c>)
 80081aa:	1b64      	subs	r4, r4, r5
 80081ac:	10a4      	asrs	r4, r4, #2
 80081ae:	2600      	movs	r6, #0
 80081b0:	42a6      	cmp	r6, r4
 80081b2:	d109      	bne.n	80081c8 <__libc_init_array+0x24>
 80081b4:	4d0b      	ldr	r5, [pc, #44]	; (80081e4 <__libc_init_array+0x40>)
 80081b6:	4c0c      	ldr	r4, [pc, #48]	; (80081e8 <__libc_init_array+0x44>)
 80081b8:	f002 fcf0 	bl	800ab9c <_init>
 80081bc:	1b64      	subs	r4, r4, r5
 80081be:	10a4      	asrs	r4, r4, #2
 80081c0:	2600      	movs	r6, #0
 80081c2:	42a6      	cmp	r6, r4
 80081c4:	d105      	bne.n	80081d2 <__libc_init_array+0x2e>
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081cc:	4798      	blx	r3
 80081ce:	3601      	adds	r6, #1
 80081d0:	e7ee      	b.n	80081b0 <__libc_init_array+0xc>
 80081d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d6:	4798      	blx	r3
 80081d8:	3601      	adds	r6, #1
 80081da:	e7f2      	b.n	80081c2 <__libc_init_array+0x1e>
 80081dc:	0800afc4 	.word	0x0800afc4
 80081e0:	0800afc4 	.word	0x0800afc4
 80081e4:	0800afc4 	.word	0x0800afc4
 80081e8:	0800afc8 	.word	0x0800afc8

080081ec <memset>:
 80081ec:	4402      	add	r2, r0
 80081ee:	4603      	mov	r3, r0
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d100      	bne.n	80081f6 <memset+0xa>
 80081f4:	4770      	bx	lr
 80081f6:	f803 1b01 	strb.w	r1, [r3], #1
 80081fa:	e7f9      	b.n	80081f0 <memset+0x4>

080081fc <__cvt>:
 80081fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	ec55 4b10 	vmov	r4, r5, d0
 8008204:	2d00      	cmp	r5, #0
 8008206:	460e      	mov	r6, r1
 8008208:	4619      	mov	r1, r3
 800820a:	462b      	mov	r3, r5
 800820c:	bfbb      	ittet	lt
 800820e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008212:	461d      	movlt	r5, r3
 8008214:	2300      	movge	r3, #0
 8008216:	232d      	movlt	r3, #45	; 0x2d
 8008218:	700b      	strb	r3, [r1, #0]
 800821a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800821c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008220:	4691      	mov	r9, r2
 8008222:	f023 0820 	bic.w	r8, r3, #32
 8008226:	bfbc      	itt	lt
 8008228:	4622      	movlt	r2, r4
 800822a:	4614      	movlt	r4, r2
 800822c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008230:	d005      	beq.n	800823e <__cvt+0x42>
 8008232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008236:	d100      	bne.n	800823a <__cvt+0x3e>
 8008238:	3601      	adds	r6, #1
 800823a:	2102      	movs	r1, #2
 800823c:	e000      	b.n	8008240 <__cvt+0x44>
 800823e:	2103      	movs	r1, #3
 8008240:	ab03      	add	r3, sp, #12
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	ab02      	add	r3, sp, #8
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	ec45 4b10 	vmov	d0, r4, r5
 800824c:	4653      	mov	r3, sl
 800824e:	4632      	mov	r2, r6
 8008250:	f000 fcca 	bl	8008be8 <_dtoa_r>
 8008254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008258:	4607      	mov	r7, r0
 800825a:	d102      	bne.n	8008262 <__cvt+0x66>
 800825c:	f019 0f01 	tst.w	r9, #1
 8008260:	d022      	beq.n	80082a8 <__cvt+0xac>
 8008262:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008266:	eb07 0906 	add.w	r9, r7, r6
 800826a:	d110      	bne.n	800828e <__cvt+0x92>
 800826c:	783b      	ldrb	r3, [r7, #0]
 800826e:	2b30      	cmp	r3, #48	; 0x30
 8008270:	d10a      	bne.n	8008288 <__cvt+0x8c>
 8008272:	2200      	movs	r2, #0
 8008274:	2300      	movs	r3, #0
 8008276:	4620      	mov	r0, r4
 8008278:	4629      	mov	r1, r5
 800827a:	f7f8 fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800827e:	b918      	cbnz	r0, 8008288 <__cvt+0x8c>
 8008280:	f1c6 0601 	rsb	r6, r6, #1
 8008284:	f8ca 6000 	str.w	r6, [sl]
 8008288:	f8da 3000 	ldr.w	r3, [sl]
 800828c:	4499      	add	r9, r3
 800828e:	2200      	movs	r2, #0
 8008290:	2300      	movs	r3, #0
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	f7f8 fc1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800829a:	b108      	cbz	r0, 80082a0 <__cvt+0xa4>
 800829c:	f8cd 900c 	str.w	r9, [sp, #12]
 80082a0:	2230      	movs	r2, #48	; 0x30
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	454b      	cmp	r3, r9
 80082a6:	d307      	bcc.n	80082b8 <__cvt+0xbc>
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ac:	1bdb      	subs	r3, r3, r7
 80082ae:	4638      	mov	r0, r7
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	b004      	add	sp, #16
 80082b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b8:	1c59      	adds	r1, r3, #1
 80082ba:	9103      	str	r1, [sp, #12]
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e7f0      	b.n	80082a2 <__cvt+0xa6>

080082c0 <__exponent>:
 80082c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c2:	4603      	mov	r3, r0
 80082c4:	2900      	cmp	r1, #0
 80082c6:	bfb8      	it	lt
 80082c8:	4249      	neglt	r1, r1
 80082ca:	f803 2b02 	strb.w	r2, [r3], #2
 80082ce:	bfb4      	ite	lt
 80082d0:	222d      	movlt	r2, #45	; 0x2d
 80082d2:	222b      	movge	r2, #43	; 0x2b
 80082d4:	2909      	cmp	r1, #9
 80082d6:	7042      	strb	r2, [r0, #1]
 80082d8:	dd2a      	ble.n	8008330 <__exponent+0x70>
 80082da:	f10d 0407 	add.w	r4, sp, #7
 80082de:	46a4      	mov	ip, r4
 80082e0:	270a      	movs	r7, #10
 80082e2:	46a6      	mov	lr, r4
 80082e4:	460a      	mov	r2, r1
 80082e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80082ea:	fb07 1516 	mls	r5, r7, r6, r1
 80082ee:	3530      	adds	r5, #48	; 0x30
 80082f0:	2a63      	cmp	r2, #99	; 0x63
 80082f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80082f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082fa:	4631      	mov	r1, r6
 80082fc:	dcf1      	bgt.n	80082e2 <__exponent+0x22>
 80082fe:	3130      	adds	r1, #48	; 0x30
 8008300:	f1ae 0502 	sub.w	r5, lr, #2
 8008304:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008308:	1c44      	adds	r4, r0, #1
 800830a:	4629      	mov	r1, r5
 800830c:	4561      	cmp	r1, ip
 800830e:	d30a      	bcc.n	8008326 <__exponent+0x66>
 8008310:	f10d 0209 	add.w	r2, sp, #9
 8008314:	eba2 020e 	sub.w	r2, r2, lr
 8008318:	4565      	cmp	r5, ip
 800831a:	bf88      	it	hi
 800831c:	2200      	movhi	r2, #0
 800831e:	4413      	add	r3, r2
 8008320:	1a18      	subs	r0, r3, r0
 8008322:	b003      	add	sp, #12
 8008324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800832e:	e7ed      	b.n	800830c <__exponent+0x4c>
 8008330:	2330      	movs	r3, #48	; 0x30
 8008332:	3130      	adds	r1, #48	; 0x30
 8008334:	7083      	strb	r3, [r0, #2]
 8008336:	70c1      	strb	r1, [r0, #3]
 8008338:	1d03      	adds	r3, r0, #4
 800833a:	e7f1      	b.n	8008320 <__exponent+0x60>

0800833c <_printf_float>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	ed2d 8b02 	vpush	{d8}
 8008344:	b08d      	sub	sp, #52	; 0x34
 8008346:	460c      	mov	r4, r1
 8008348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800834c:	4616      	mov	r6, r2
 800834e:	461f      	mov	r7, r3
 8008350:	4605      	mov	r5, r0
 8008352:	f001 fa35 	bl	80097c0 <_localeconv_r>
 8008356:	f8d0 a000 	ldr.w	sl, [r0]
 800835a:	4650      	mov	r0, sl
 800835c:	f7f7 ff40 	bl	80001e0 <strlen>
 8008360:	2300      	movs	r3, #0
 8008362:	930a      	str	r3, [sp, #40]	; 0x28
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	9305      	str	r3, [sp, #20]
 8008368:	f8d8 3000 	ldr.w	r3, [r8]
 800836c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008370:	3307      	adds	r3, #7
 8008372:	f023 0307 	bic.w	r3, r3, #7
 8008376:	f103 0208 	add.w	r2, r3, #8
 800837a:	f8c8 2000 	str.w	r2, [r8]
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008386:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800838a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800838e:	9307      	str	r3, [sp, #28]
 8008390:	f8cd 8018 	str.w	r8, [sp, #24]
 8008394:	ee08 0a10 	vmov	s16, r0
 8008398:	4b9f      	ldr	r3, [pc, #636]	; (8008618 <_printf_float+0x2dc>)
 800839a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800839e:	f04f 32ff 	mov.w	r2, #4294967295
 80083a2:	f7f8 fbcb 	bl	8000b3c <__aeabi_dcmpun>
 80083a6:	bb88      	cbnz	r0, 800840c <_printf_float+0xd0>
 80083a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ac:	4b9a      	ldr	r3, [pc, #616]	; (8008618 <_printf_float+0x2dc>)
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	f7f8 fba5 	bl	8000b00 <__aeabi_dcmple>
 80083b6:	bb48      	cbnz	r0, 800840c <_printf_float+0xd0>
 80083b8:	2200      	movs	r2, #0
 80083ba:	2300      	movs	r3, #0
 80083bc:	4640      	mov	r0, r8
 80083be:	4649      	mov	r1, r9
 80083c0:	f7f8 fb94 	bl	8000aec <__aeabi_dcmplt>
 80083c4:	b110      	cbz	r0, 80083cc <_printf_float+0x90>
 80083c6:	232d      	movs	r3, #45	; 0x2d
 80083c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083cc:	4b93      	ldr	r3, [pc, #588]	; (800861c <_printf_float+0x2e0>)
 80083ce:	4894      	ldr	r0, [pc, #592]	; (8008620 <_printf_float+0x2e4>)
 80083d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083d4:	bf94      	ite	ls
 80083d6:	4698      	movls	r8, r3
 80083d8:	4680      	movhi	r8, r0
 80083da:	2303      	movs	r3, #3
 80083dc:	6123      	str	r3, [r4, #16]
 80083de:	9b05      	ldr	r3, [sp, #20]
 80083e0:	f023 0204 	bic.w	r2, r3, #4
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	9700      	str	r7, [sp, #0]
 80083ec:	4633      	mov	r3, r6
 80083ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80083f0:	4621      	mov	r1, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 f9d8 	bl	80087a8 <_printf_common>
 80083f8:	3001      	adds	r0, #1
 80083fa:	f040 8090 	bne.w	800851e <_printf_float+0x1e2>
 80083fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008402:	b00d      	add	sp, #52	; 0x34
 8008404:	ecbd 8b02 	vpop	{d8}
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f8 fb92 	bl	8000b3c <__aeabi_dcmpun>
 8008418:	b140      	cbz	r0, 800842c <_printf_float+0xf0>
 800841a:	464b      	mov	r3, r9
 800841c:	2b00      	cmp	r3, #0
 800841e:	bfbc      	itt	lt
 8008420:	232d      	movlt	r3, #45	; 0x2d
 8008422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008426:	487f      	ldr	r0, [pc, #508]	; (8008624 <_printf_float+0x2e8>)
 8008428:	4b7f      	ldr	r3, [pc, #508]	; (8008628 <_printf_float+0x2ec>)
 800842a:	e7d1      	b.n	80083d0 <_printf_float+0x94>
 800842c:	6863      	ldr	r3, [r4, #4]
 800842e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008432:	9206      	str	r2, [sp, #24]
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	d13f      	bne.n	80084b8 <_printf_float+0x17c>
 8008438:	2306      	movs	r3, #6
 800843a:	6063      	str	r3, [r4, #4]
 800843c:	9b05      	ldr	r3, [sp, #20]
 800843e:	6861      	ldr	r1, [r4, #4]
 8008440:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008444:	2300      	movs	r3, #0
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	ab0a      	add	r3, sp, #40	; 0x28
 800844a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800844e:	ab09      	add	r3, sp, #36	; 0x24
 8008450:	ec49 8b10 	vmov	d0, r8, r9
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	6022      	str	r2, [r4, #0]
 8008458:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800845c:	4628      	mov	r0, r5
 800845e:	f7ff fecd 	bl	80081fc <__cvt>
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008466:	2b47      	cmp	r3, #71	; 0x47
 8008468:	4680      	mov	r8, r0
 800846a:	d108      	bne.n	800847e <_printf_float+0x142>
 800846c:	1cc8      	adds	r0, r1, #3
 800846e:	db02      	blt.n	8008476 <_printf_float+0x13a>
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	4299      	cmp	r1, r3
 8008474:	dd41      	ble.n	80084fa <_printf_float+0x1be>
 8008476:	f1ab 0b02 	sub.w	fp, fp, #2
 800847a:	fa5f fb8b 	uxtb.w	fp, fp
 800847e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008482:	d820      	bhi.n	80084c6 <_printf_float+0x18a>
 8008484:	3901      	subs	r1, #1
 8008486:	465a      	mov	r2, fp
 8008488:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800848c:	9109      	str	r1, [sp, #36]	; 0x24
 800848e:	f7ff ff17 	bl	80082c0 <__exponent>
 8008492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008494:	1813      	adds	r3, r2, r0
 8008496:	2a01      	cmp	r2, #1
 8008498:	4681      	mov	r9, r0
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	dc02      	bgt.n	80084a4 <_printf_float+0x168>
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	07d2      	lsls	r2, r2, #31
 80084a2:	d501      	bpl.n	80084a8 <_printf_float+0x16c>
 80084a4:	3301      	adds	r3, #1
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d09c      	beq.n	80083ea <_printf_float+0xae>
 80084b0:	232d      	movs	r3, #45	; 0x2d
 80084b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b6:	e798      	b.n	80083ea <_printf_float+0xae>
 80084b8:	9a06      	ldr	r2, [sp, #24]
 80084ba:	2a47      	cmp	r2, #71	; 0x47
 80084bc:	d1be      	bne.n	800843c <_printf_float+0x100>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1bc      	bne.n	800843c <_printf_float+0x100>
 80084c2:	2301      	movs	r3, #1
 80084c4:	e7b9      	b.n	800843a <_printf_float+0xfe>
 80084c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084ca:	d118      	bne.n	80084fe <_printf_float+0x1c2>
 80084cc:	2900      	cmp	r1, #0
 80084ce:	6863      	ldr	r3, [r4, #4]
 80084d0:	dd0b      	ble.n	80084ea <_printf_float+0x1ae>
 80084d2:	6121      	str	r1, [r4, #16]
 80084d4:	b913      	cbnz	r3, 80084dc <_printf_float+0x1a0>
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	07d0      	lsls	r0, r2, #31
 80084da:	d502      	bpl.n	80084e2 <_printf_float+0x1a6>
 80084dc:	3301      	adds	r3, #1
 80084de:	440b      	add	r3, r1
 80084e0:	6123      	str	r3, [r4, #16]
 80084e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80084e4:	f04f 0900 	mov.w	r9, #0
 80084e8:	e7de      	b.n	80084a8 <_printf_float+0x16c>
 80084ea:	b913      	cbnz	r3, 80084f2 <_printf_float+0x1b6>
 80084ec:	6822      	ldr	r2, [r4, #0]
 80084ee:	07d2      	lsls	r2, r2, #31
 80084f0:	d501      	bpl.n	80084f6 <_printf_float+0x1ba>
 80084f2:	3302      	adds	r3, #2
 80084f4:	e7f4      	b.n	80084e0 <_printf_float+0x1a4>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e7f2      	b.n	80084e0 <_printf_float+0x1a4>
 80084fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008500:	4299      	cmp	r1, r3
 8008502:	db05      	blt.n	8008510 <_printf_float+0x1d4>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	6121      	str	r1, [r4, #16]
 8008508:	07d8      	lsls	r0, r3, #31
 800850a:	d5ea      	bpl.n	80084e2 <_printf_float+0x1a6>
 800850c:	1c4b      	adds	r3, r1, #1
 800850e:	e7e7      	b.n	80084e0 <_printf_float+0x1a4>
 8008510:	2900      	cmp	r1, #0
 8008512:	bfd4      	ite	le
 8008514:	f1c1 0202 	rsble	r2, r1, #2
 8008518:	2201      	movgt	r2, #1
 800851a:	4413      	add	r3, r2
 800851c:	e7e0      	b.n	80084e0 <_printf_float+0x1a4>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	055a      	lsls	r2, r3, #21
 8008522:	d407      	bmi.n	8008534 <_printf_float+0x1f8>
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	4642      	mov	r2, r8
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	d12c      	bne.n	800858c <_printf_float+0x250>
 8008532:	e764      	b.n	80083fe <_printf_float+0xc2>
 8008534:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008538:	f240 80e0 	bls.w	80086fc <_printf_float+0x3c0>
 800853c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008540:	2200      	movs	r2, #0
 8008542:	2300      	movs	r3, #0
 8008544:	f7f8 fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008548:	2800      	cmp	r0, #0
 800854a:	d034      	beq.n	80085b6 <_printf_float+0x27a>
 800854c:	4a37      	ldr	r2, [pc, #220]	; (800862c <_printf_float+0x2f0>)
 800854e:	2301      	movs	r3, #1
 8008550:	4631      	mov	r1, r6
 8008552:	4628      	mov	r0, r5
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f af51 	beq.w	80083fe <_printf_float+0xc2>
 800855c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008560:	429a      	cmp	r2, r3
 8008562:	db02      	blt.n	800856a <_printf_float+0x22e>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	07d8      	lsls	r0, r3, #31
 8008568:	d510      	bpl.n	800858c <_printf_float+0x250>
 800856a:	ee18 3a10 	vmov	r3, s16
 800856e:	4652      	mov	r2, sl
 8008570:	4631      	mov	r1, r6
 8008572:	4628      	mov	r0, r5
 8008574:	47b8      	blx	r7
 8008576:	3001      	adds	r0, #1
 8008578:	f43f af41 	beq.w	80083fe <_printf_float+0xc2>
 800857c:	f04f 0800 	mov.w	r8, #0
 8008580:	f104 091a 	add.w	r9, r4, #26
 8008584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008586:	3b01      	subs	r3, #1
 8008588:	4543      	cmp	r3, r8
 800858a:	dc09      	bgt.n	80085a0 <_printf_float+0x264>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	079b      	lsls	r3, r3, #30
 8008590:	f100 8105 	bmi.w	800879e <_printf_float+0x462>
 8008594:	68e0      	ldr	r0, [r4, #12]
 8008596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008598:	4298      	cmp	r0, r3
 800859a:	bfb8      	it	lt
 800859c:	4618      	movlt	r0, r3
 800859e:	e730      	b.n	8008402 <_printf_float+0xc6>
 80085a0:	2301      	movs	r3, #1
 80085a2:	464a      	mov	r2, r9
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	f43f af27 	beq.w	80083fe <_printf_float+0xc2>
 80085b0:	f108 0801 	add.w	r8, r8, #1
 80085b4:	e7e6      	b.n	8008584 <_printf_float+0x248>
 80085b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dc39      	bgt.n	8008630 <_printf_float+0x2f4>
 80085bc:	4a1b      	ldr	r2, [pc, #108]	; (800862c <_printf_float+0x2f0>)
 80085be:	2301      	movs	r3, #1
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f af19 	beq.w	80083fe <_printf_float+0xc2>
 80085cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d0:	4313      	orrs	r3, r2
 80085d2:	d102      	bne.n	80085da <_printf_float+0x29e>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	07d9      	lsls	r1, r3, #31
 80085d8:	d5d8      	bpl.n	800858c <_printf_float+0x250>
 80085da:	ee18 3a10 	vmov	r3, s16
 80085de:	4652      	mov	r2, sl
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	f43f af09 	beq.w	80083fe <_printf_float+0xc2>
 80085ec:	f04f 0900 	mov.w	r9, #0
 80085f0:	f104 0a1a 	add.w	sl, r4, #26
 80085f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f6:	425b      	negs	r3, r3
 80085f8:	454b      	cmp	r3, r9
 80085fa:	dc01      	bgt.n	8008600 <_printf_float+0x2c4>
 80085fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fe:	e792      	b.n	8008526 <_printf_float+0x1ea>
 8008600:	2301      	movs	r3, #1
 8008602:	4652      	mov	r2, sl
 8008604:	4631      	mov	r1, r6
 8008606:	4628      	mov	r0, r5
 8008608:	47b8      	blx	r7
 800860a:	3001      	adds	r0, #1
 800860c:	f43f aef7 	beq.w	80083fe <_printf_float+0xc2>
 8008610:	f109 0901 	add.w	r9, r9, #1
 8008614:	e7ee      	b.n	80085f4 <_printf_float+0x2b8>
 8008616:	bf00      	nop
 8008618:	7fefffff 	.word	0x7fefffff
 800861c:	0800abe8 	.word	0x0800abe8
 8008620:	0800abec 	.word	0x0800abec
 8008624:	0800abf4 	.word	0x0800abf4
 8008628:	0800abf0 	.word	0x0800abf0
 800862c:	0800abf8 	.word	0x0800abf8
 8008630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008634:	429a      	cmp	r2, r3
 8008636:	bfa8      	it	ge
 8008638:	461a      	movge	r2, r3
 800863a:	2a00      	cmp	r2, #0
 800863c:	4691      	mov	r9, r2
 800863e:	dc37      	bgt.n	80086b0 <_printf_float+0x374>
 8008640:	f04f 0b00 	mov.w	fp, #0
 8008644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008648:	f104 021a 	add.w	r2, r4, #26
 800864c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800864e:	9305      	str	r3, [sp, #20]
 8008650:	eba3 0309 	sub.w	r3, r3, r9
 8008654:	455b      	cmp	r3, fp
 8008656:	dc33      	bgt.n	80086c0 <_printf_float+0x384>
 8008658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800865c:	429a      	cmp	r2, r3
 800865e:	db3b      	blt.n	80086d8 <_printf_float+0x39c>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	07da      	lsls	r2, r3, #31
 8008664:	d438      	bmi.n	80086d8 <_printf_float+0x39c>
 8008666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008668:	9b05      	ldr	r3, [sp, #20]
 800866a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	eba2 0901 	sub.w	r9, r2, r1
 8008672:	4599      	cmp	r9, r3
 8008674:	bfa8      	it	ge
 8008676:	4699      	movge	r9, r3
 8008678:	f1b9 0f00 	cmp.w	r9, #0
 800867c:	dc35      	bgt.n	80086ea <_printf_float+0x3ae>
 800867e:	f04f 0800 	mov.w	r8, #0
 8008682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008686:	f104 0a1a 	add.w	sl, r4, #26
 800868a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800868e:	1a9b      	subs	r3, r3, r2
 8008690:	eba3 0309 	sub.w	r3, r3, r9
 8008694:	4543      	cmp	r3, r8
 8008696:	f77f af79 	ble.w	800858c <_printf_float+0x250>
 800869a:	2301      	movs	r3, #1
 800869c:	4652      	mov	r2, sl
 800869e:	4631      	mov	r1, r6
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b8      	blx	r7
 80086a4:	3001      	adds	r0, #1
 80086a6:	f43f aeaa 	beq.w	80083fe <_printf_float+0xc2>
 80086aa:	f108 0801 	add.w	r8, r8, #1
 80086ae:	e7ec      	b.n	800868a <_printf_float+0x34e>
 80086b0:	4613      	mov	r3, r2
 80086b2:	4631      	mov	r1, r6
 80086b4:	4642      	mov	r2, r8
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b8      	blx	r7
 80086ba:	3001      	adds	r0, #1
 80086bc:	d1c0      	bne.n	8008640 <_printf_float+0x304>
 80086be:	e69e      	b.n	80083fe <_printf_float+0xc2>
 80086c0:	2301      	movs	r3, #1
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	9205      	str	r2, [sp, #20]
 80086c8:	47b8      	blx	r7
 80086ca:	3001      	adds	r0, #1
 80086cc:	f43f ae97 	beq.w	80083fe <_printf_float+0xc2>
 80086d0:	9a05      	ldr	r2, [sp, #20]
 80086d2:	f10b 0b01 	add.w	fp, fp, #1
 80086d6:	e7b9      	b.n	800864c <_printf_float+0x310>
 80086d8:	ee18 3a10 	vmov	r3, s16
 80086dc:	4652      	mov	r2, sl
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	d1be      	bne.n	8008666 <_printf_float+0x32a>
 80086e8:	e689      	b.n	80083fe <_printf_float+0xc2>
 80086ea:	9a05      	ldr	r2, [sp, #20]
 80086ec:	464b      	mov	r3, r9
 80086ee:	4442      	add	r2, r8
 80086f0:	4631      	mov	r1, r6
 80086f2:	4628      	mov	r0, r5
 80086f4:	47b8      	blx	r7
 80086f6:	3001      	adds	r0, #1
 80086f8:	d1c1      	bne.n	800867e <_printf_float+0x342>
 80086fa:	e680      	b.n	80083fe <_printf_float+0xc2>
 80086fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086fe:	2a01      	cmp	r2, #1
 8008700:	dc01      	bgt.n	8008706 <_printf_float+0x3ca>
 8008702:	07db      	lsls	r3, r3, #31
 8008704:	d538      	bpl.n	8008778 <_printf_float+0x43c>
 8008706:	2301      	movs	r3, #1
 8008708:	4642      	mov	r2, r8
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	f43f ae74 	beq.w	80083fe <_printf_float+0xc2>
 8008716:	ee18 3a10 	vmov	r3, s16
 800871a:	4652      	mov	r2, sl
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	47b8      	blx	r7
 8008722:	3001      	adds	r0, #1
 8008724:	f43f ae6b 	beq.w	80083fe <_printf_float+0xc2>
 8008728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800872c:	2200      	movs	r2, #0
 800872e:	2300      	movs	r3, #0
 8008730:	f7f8 f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008734:	b9d8      	cbnz	r0, 800876e <_printf_float+0x432>
 8008736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008738:	f108 0201 	add.w	r2, r8, #1
 800873c:	3b01      	subs	r3, #1
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	d10e      	bne.n	8008766 <_printf_float+0x42a>
 8008748:	e659      	b.n	80083fe <_printf_float+0xc2>
 800874a:	2301      	movs	r3, #1
 800874c:	4652      	mov	r2, sl
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	f43f ae52 	beq.w	80083fe <_printf_float+0xc2>
 800875a:	f108 0801 	add.w	r8, r8, #1
 800875e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008760:	3b01      	subs	r3, #1
 8008762:	4543      	cmp	r3, r8
 8008764:	dcf1      	bgt.n	800874a <_printf_float+0x40e>
 8008766:	464b      	mov	r3, r9
 8008768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800876c:	e6dc      	b.n	8008528 <_printf_float+0x1ec>
 800876e:	f04f 0800 	mov.w	r8, #0
 8008772:	f104 0a1a 	add.w	sl, r4, #26
 8008776:	e7f2      	b.n	800875e <_printf_float+0x422>
 8008778:	2301      	movs	r3, #1
 800877a:	4642      	mov	r2, r8
 800877c:	e7df      	b.n	800873e <_printf_float+0x402>
 800877e:	2301      	movs	r3, #1
 8008780:	464a      	mov	r2, r9
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	f43f ae38 	beq.w	80083fe <_printf_float+0xc2>
 800878e:	f108 0801 	add.w	r8, r8, #1
 8008792:	68e3      	ldr	r3, [r4, #12]
 8008794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008796:	1a5b      	subs	r3, r3, r1
 8008798:	4543      	cmp	r3, r8
 800879a:	dcf0      	bgt.n	800877e <_printf_float+0x442>
 800879c:	e6fa      	b.n	8008594 <_printf_float+0x258>
 800879e:	f04f 0800 	mov.w	r8, #0
 80087a2:	f104 0919 	add.w	r9, r4, #25
 80087a6:	e7f4      	b.n	8008792 <_printf_float+0x456>

080087a8 <_printf_common>:
 80087a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	4616      	mov	r6, r2
 80087ae:	4699      	mov	r9, r3
 80087b0:	688a      	ldr	r2, [r1, #8]
 80087b2:	690b      	ldr	r3, [r1, #16]
 80087b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	bfb8      	it	lt
 80087bc:	4613      	movlt	r3, r2
 80087be:	6033      	str	r3, [r6, #0]
 80087c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087c4:	4607      	mov	r7, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	b10a      	cbz	r2, 80087ce <_printf_common+0x26>
 80087ca:	3301      	adds	r3, #1
 80087cc:	6033      	str	r3, [r6, #0]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	0699      	lsls	r1, r3, #26
 80087d2:	bf42      	ittt	mi
 80087d4:	6833      	ldrmi	r3, [r6, #0]
 80087d6:	3302      	addmi	r3, #2
 80087d8:	6033      	strmi	r3, [r6, #0]
 80087da:	6825      	ldr	r5, [r4, #0]
 80087dc:	f015 0506 	ands.w	r5, r5, #6
 80087e0:	d106      	bne.n	80087f0 <_printf_common+0x48>
 80087e2:	f104 0a19 	add.w	sl, r4, #25
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	6832      	ldr	r2, [r6, #0]
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	dc26      	bgt.n	800883e <_printf_common+0x96>
 80087f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087f4:	1e13      	subs	r3, r2, #0
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	bf18      	it	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	0692      	lsls	r2, r2, #26
 80087fe:	d42b      	bmi.n	8008858 <_printf_common+0xb0>
 8008800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008804:	4649      	mov	r1, r9
 8008806:	4638      	mov	r0, r7
 8008808:	47c0      	blx	r8
 800880a:	3001      	adds	r0, #1
 800880c:	d01e      	beq.n	800884c <_printf_common+0xa4>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	68e5      	ldr	r5, [r4, #12]
 8008812:	6832      	ldr	r2, [r6, #0]
 8008814:	f003 0306 	and.w	r3, r3, #6
 8008818:	2b04      	cmp	r3, #4
 800881a:	bf08      	it	eq
 800881c:	1aad      	subeq	r5, r5, r2
 800881e:	68a3      	ldr	r3, [r4, #8]
 8008820:	6922      	ldr	r2, [r4, #16]
 8008822:	bf0c      	ite	eq
 8008824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008828:	2500      	movne	r5, #0
 800882a:	4293      	cmp	r3, r2
 800882c:	bfc4      	itt	gt
 800882e:	1a9b      	subgt	r3, r3, r2
 8008830:	18ed      	addgt	r5, r5, r3
 8008832:	2600      	movs	r6, #0
 8008834:	341a      	adds	r4, #26
 8008836:	42b5      	cmp	r5, r6
 8008838:	d11a      	bne.n	8008870 <_printf_common+0xc8>
 800883a:	2000      	movs	r0, #0
 800883c:	e008      	b.n	8008850 <_printf_common+0xa8>
 800883e:	2301      	movs	r3, #1
 8008840:	4652      	mov	r2, sl
 8008842:	4649      	mov	r1, r9
 8008844:	4638      	mov	r0, r7
 8008846:	47c0      	blx	r8
 8008848:	3001      	adds	r0, #1
 800884a:	d103      	bne.n	8008854 <_printf_common+0xac>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295
 8008850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008854:	3501      	adds	r5, #1
 8008856:	e7c6      	b.n	80087e6 <_printf_common+0x3e>
 8008858:	18e1      	adds	r1, r4, r3
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	2030      	movs	r0, #48	; 0x30
 800885e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008862:	4422      	add	r2, r4
 8008864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800886c:	3302      	adds	r3, #2
 800886e:	e7c7      	b.n	8008800 <_printf_common+0x58>
 8008870:	2301      	movs	r3, #1
 8008872:	4622      	mov	r2, r4
 8008874:	4649      	mov	r1, r9
 8008876:	4638      	mov	r0, r7
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d0e6      	beq.n	800884c <_printf_common+0xa4>
 800887e:	3601      	adds	r6, #1
 8008880:	e7d9      	b.n	8008836 <_printf_common+0x8e>
	...

08008884 <_printf_i>:
 8008884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	460c      	mov	r4, r1
 800888a:	4691      	mov	r9, r2
 800888c:	7e27      	ldrb	r7, [r4, #24]
 800888e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008890:	2f78      	cmp	r7, #120	; 0x78
 8008892:	4680      	mov	r8, r0
 8008894:	469a      	mov	sl, r3
 8008896:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800889a:	d807      	bhi.n	80088ac <_printf_i+0x28>
 800889c:	2f62      	cmp	r7, #98	; 0x62
 800889e:	d80a      	bhi.n	80088b6 <_printf_i+0x32>
 80088a0:	2f00      	cmp	r7, #0
 80088a2:	f000 80d8 	beq.w	8008a56 <_printf_i+0x1d2>
 80088a6:	2f58      	cmp	r7, #88	; 0x58
 80088a8:	f000 80a3 	beq.w	80089f2 <_printf_i+0x16e>
 80088ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088b4:	e03a      	b.n	800892c <_printf_i+0xa8>
 80088b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ba:	2b15      	cmp	r3, #21
 80088bc:	d8f6      	bhi.n	80088ac <_printf_i+0x28>
 80088be:	a001      	add	r0, pc, #4	; (adr r0, 80088c4 <_printf_i+0x40>)
 80088c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80088c4:	0800891d 	.word	0x0800891d
 80088c8:	08008931 	.word	0x08008931
 80088cc:	080088ad 	.word	0x080088ad
 80088d0:	080088ad 	.word	0x080088ad
 80088d4:	080088ad 	.word	0x080088ad
 80088d8:	080088ad 	.word	0x080088ad
 80088dc:	08008931 	.word	0x08008931
 80088e0:	080088ad 	.word	0x080088ad
 80088e4:	080088ad 	.word	0x080088ad
 80088e8:	080088ad 	.word	0x080088ad
 80088ec:	080088ad 	.word	0x080088ad
 80088f0:	08008a3d 	.word	0x08008a3d
 80088f4:	08008961 	.word	0x08008961
 80088f8:	08008a1f 	.word	0x08008a1f
 80088fc:	080088ad 	.word	0x080088ad
 8008900:	080088ad 	.word	0x080088ad
 8008904:	08008a5f 	.word	0x08008a5f
 8008908:	080088ad 	.word	0x080088ad
 800890c:	08008961 	.word	0x08008961
 8008910:	080088ad 	.word	0x080088ad
 8008914:	080088ad 	.word	0x080088ad
 8008918:	08008a27 	.word	0x08008a27
 800891c:	680b      	ldr	r3, [r1, #0]
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	600a      	str	r2, [r1, #0]
 8008924:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800892c:	2301      	movs	r3, #1
 800892e:	e0a3      	b.n	8008a78 <_printf_i+0x1f4>
 8008930:	6825      	ldr	r5, [r4, #0]
 8008932:	6808      	ldr	r0, [r1, #0]
 8008934:	062e      	lsls	r6, r5, #24
 8008936:	f100 0304 	add.w	r3, r0, #4
 800893a:	d50a      	bpl.n	8008952 <_printf_i+0xce>
 800893c:	6805      	ldr	r5, [r0, #0]
 800893e:	600b      	str	r3, [r1, #0]
 8008940:	2d00      	cmp	r5, #0
 8008942:	da03      	bge.n	800894c <_printf_i+0xc8>
 8008944:	232d      	movs	r3, #45	; 0x2d
 8008946:	426d      	negs	r5, r5
 8008948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800894c:	485e      	ldr	r0, [pc, #376]	; (8008ac8 <_printf_i+0x244>)
 800894e:	230a      	movs	r3, #10
 8008950:	e019      	b.n	8008986 <_printf_i+0x102>
 8008952:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008956:	6805      	ldr	r5, [r0, #0]
 8008958:	600b      	str	r3, [r1, #0]
 800895a:	bf18      	it	ne
 800895c:	b22d      	sxthne	r5, r5
 800895e:	e7ef      	b.n	8008940 <_printf_i+0xbc>
 8008960:	680b      	ldr	r3, [r1, #0]
 8008962:	6825      	ldr	r5, [r4, #0]
 8008964:	1d18      	adds	r0, r3, #4
 8008966:	6008      	str	r0, [r1, #0]
 8008968:	0628      	lsls	r0, r5, #24
 800896a:	d501      	bpl.n	8008970 <_printf_i+0xec>
 800896c:	681d      	ldr	r5, [r3, #0]
 800896e:	e002      	b.n	8008976 <_printf_i+0xf2>
 8008970:	0669      	lsls	r1, r5, #25
 8008972:	d5fb      	bpl.n	800896c <_printf_i+0xe8>
 8008974:	881d      	ldrh	r5, [r3, #0]
 8008976:	4854      	ldr	r0, [pc, #336]	; (8008ac8 <_printf_i+0x244>)
 8008978:	2f6f      	cmp	r7, #111	; 0x6f
 800897a:	bf0c      	ite	eq
 800897c:	2308      	moveq	r3, #8
 800897e:	230a      	movne	r3, #10
 8008980:	2100      	movs	r1, #0
 8008982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008986:	6866      	ldr	r6, [r4, #4]
 8008988:	60a6      	str	r6, [r4, #8]
 800898a:	2e00      	cmp	r6, #0
 800898c:	bfa2      	ittt	ge
 800898e:	6821      	ldrge	r1, [r4, #0]
 8008990:	f021 0104 	bicge.w	r1, r1, #4
 8008994:	6021      	strge	r1, [r4, #0]
 8008996:	b90d      	cbnz	r5, 800899c <_printf_i+0x118>
 8008998:	2e00      	cmp	r6, #0
 800899a:	d04d      	beq.n	8008a38 <_printf_i+0x1b4>
 800899c:	4616      	mov	r6, r2
 800899e:	fbb5 f1f3 	udiv	r1, r5, r3
 80089a2:	fb03 5711 	mls	r7, r3, r1, r5
 80089a6:	5dc7      	ldrb	r7, [r0, r7]
 80089a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089ac:	462f      	mov	r7, r5
 80089ae:	42bb      	cmp	r3, r7
 80089b0:	460d      	mov	r5, r1
 80089b2:	d9f4      	bls.n	800899e <_printf_i+0x11a>
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d10b      	bne.n	80089d0 <_printf_i+0x14c>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	07df      	lsls	r7, r3, #31
 80089bc:	d508      	bpl.n	80089d0 <_printf_i+0x14c>
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	6861      	ldr	r1, [r4, #4]
 80089c2:	4299      	cmp	r1, r3
 80089c4:	bfde      	ittt	le
 80089c6:	2330      	movle	r3, #48	; 0x30
 80089c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089d0:	1b92      	subs	r2, r2, r6
 80089d2:	6122      	str	r2, [r4, #16]
 80089d4:	f8cd a000 	str.w	sl, [sp]
 80089d8:	464b      	mov	r3, r9
 80089da:	aa03      	add	r2, sp, #12
 80089dc:	4621      	mov	r1, r4
 80089de:	4640      	mov	r0, r8
 80089e0:	f7ff fee2 	bl	80087a8 <_printf_common>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d14c      	bne.n	8008a82 <_printf_i+0x1fe>
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	b004      	add	sp, #16
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	4835      	ldr	r0, [pc, #212]	; (8008ac8 <_printf_i+0x244>)
 80089f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	680e      	ldr	r6, [r1, #0]
 80089fc:	061f      	lsls	r7, r3, #24
 80089fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a02:	600e      	str	r6, [r1, #0]
 8008a04:	d514      	bpl.n	8008a30 <_printf_i+0x1ac>
 8008a06:	07d9      	lsls	r1, r3, #31
 8008a08:	bf44      	itt	mi
 8008a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a0e:	6023      	strmi	r3, [r4, #0]
 8008a10:	b91d      	cbnz	r5, 8008a1a <_printf_i+0x196>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	f023 0320 	bic.w	r3, r3, #32
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	2310      	movs	r3, #16
 8008a1c:	e7b0      	b.n	8008980 <_printf_i+0xfc>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	f043 0320 	orr.w	r3, r3, #32
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	2378      	movs	r3, #120	; 0x78
 8008a28:	4828      	ldr	r0, [pc, #160]	; (8008acc <_printf_i+0x248>)
 8008a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a2e:	e7e3      	b.n	80089f8 <_printf_i+0x174>
 8008a30:	065e      	lsls	r6, r3, #25
 8008a32:	bf48      	it	mi
 8008a34:	b2ad      	uxthmi	r5, r5
 8008a36:	e7e6      	b.n	8008a06 <_printf_i+0x182>
 8008a38:	4616      	mov	r6, r2
 8008a3a:	e7bb      	b.n	80089b4 <_printf_i+0x130>
 8008a3c:	680b      	ldr	r3, [r1, #0]
 8008a3e:	6826      	ldr	r6, [r4, #0]
 8008a40:	6960      	ldr	r0, [r4, #20]
 8008a42:	1d1d      	adds	r5, r3, #4
 8008a44:	600d      	str	r5, [r1, #0]
 8008a46:	0635      	lsls	r5, r6, #24
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	d501      	bpl.n	8008a50 <_printf_i+0x1cc>
 8008a4c:	6018      	str	r0, [r3, #0]
 8008a4e:	e002      	b.n	8008a56 <_printf_i+0x1d2>
 8008a50:	0671      	lsls	r1, r6, #25
 8008a52:	d5fb      	bpl.n	8008a4c <_printf_i+0x1c8>
 8008a54:	8018      	strh	r0, [r3, #0]
 8008a56:	2300      	movs	r3, #0
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	4616      	mov	r6, r2
 8008a5c:	e7ba      	b.n	80089d4 <_printf_i+0x150>
 8008a5e:	680b      	ldr	r3, [r1, #0]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	600a      	str	r2, [r1, #0]
 8008a64:	681e      	ldr	r6, [r3, #0]
 8008a66:	6862      	ldr	r2, [r4, #4]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7f7 fbc0 	bl	80001f0 <memchr>
 8008a70:	b108      	cbz	r0, 8008a76 <_printf_i+0x1f2>
 8008a72:	1b80      	subs	r0, r0, r6
 8008a74:	6060      	str	r0, [r4, #4]
 8008a76:	6863      	ldr	r3, [r4, #4]
 8008a78:	6123      	str	r3, [r4, #16]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a80:	e7a8      	b.n	80089d4 <_printf_i+0x150>
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	4632      	mov	r2, r6
 8008a86:	4649      	mov	r1, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	47d0      	blx	sl
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d0ab      	beq.n	80089e8 <_printf_i+0x164>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	079b      	lsls	r3, r3, #30
 8008a94:	d413      	bmi.n	8008abe <_printf_i+0x23a>
 8008a96:	68e0      	ldr	r0, [r4, #12]
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	4298      	cmp	r0, r3
 8008a9c:	bfb8      	it	lt
 8008a9e:	4618      	movlt	r0, r3
 8008aa0:	e7a4      	b.n	80089ec <_printf_i+0x168>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4632      	mov	r2, r6
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	47d0      	blx	sl
 8008aac:	3001      	adds	r0, #1
 8008aae:	d09b      	beq.n	80089e8 <_printf_i+0x164>
 8008ab0:	3501      	adds	r5, #1
 8008ab2:	68e3      	ldr	r3, [r4, #12]
 8008ab4:	9903      	ldr	r1, [sp, #12]
 8008ab6:	1a5b      	subs	r3, r3, r1
 8008ab8:	42ab      	cmp	r3, r5
 8008aba:	dcf2      	bgt.n	8008aa2 <_printf_i+0x21e>
 8008abc:	e7eb      	b.n	8008a96 <_printf_i+0x212>
 8008abe:	2500      	movs	r5, #0
 8008ac0:	f104 0619 	add.w	r6, r4, #25
 8008ac4:	e7f5      	b.n	8008ab2 <_printf_i+0x22e>
 8008ac6:	bf00      	nop
 8008ac8:	0800abfa 	.word	0x0800abfa
 8008acc:	0800ac0b 	.word	0x0800ac0b

08008ad0 <quorem>:
 8008ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	6903      	ldr	r3, [r0, #16]
 8008ad6:	690c      	ldr	r4, [r1, #16]
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	4607      	mov	r7, r0
 8008adc:	f2c0 8081 	blt.w	8008be2 <quorem+0x112>
 8008ae0:	3c01      	subs	r4, #1
 8008ae2:	f101 0814 	add.w	r8, r1, #20
 8008ae6:	f100 0514 	add.w	r5, r0, #20
 8008aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008af4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008af8:	3301      	adds	r3, #1
 8008afa:	429a      	cmp	r2, r3
 8008afc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b04:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b08:	d331      	bcc.n	8008b6e <quorem+0x9e>
 8008b0a:	f04f 0e00 	mov.w	lr, #0
 8008b0e:	4640      	mov	r0, r8
 8008b10:	46ac      	mov	ip, r5
 8008b12:	46f2      	mov	sl, lr
 8008b14:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b18:	b293      	uxth	r3, r2
 8008b1a:	fb06 e303 	mla	r3, r6, r3, lr
 8008b1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	ebaa 0303 	sub.w	r3, sl, r3
 8008b28:	0c12      	lsrs	r2, r2, #16
 8008b2a:	f8dc a000 	ldr.w	sl, [ip]
 8008b2e:	fb06 e202 	mla	r2, r6, r2, lr
 8008b32:	fa13 f38a 	uxtah	r3, r3, sl
 8008b36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b3a:	fa1f fa82 	uxth.w	sl, r2
 8008b3e:	f8dc 2000 	ldr.w	r2, [ip]
 8008b42:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008b46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b50:	4581      	cmp	r9, r0
 8008b52:	f84c 3b04 	str.w	r3, [ip], #4
 8008b56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b5a:	d2db      	bcs.n	8008b14 <quorem+0x44>
 8008b5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b60:	b92b      	cbnz	r3, 8008b6e <quorem+0x9e>
 8008b62:	9b01      	ldr	r3, [sp, #4]
 8008b64:	3b04      	subs	r3, #4
 8008b66:	429d      	cmp	r5, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	d32e      	bcc.n	8008bca <quorem+0xfa>
 8008b6c:	613c      	str	r4, [r7, #16]
 8008b6e:	4638      	mov	r0, r7
 8008b70:	f001 f8be 	bl	8009cf0 <__mcmp>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	db24      	blt.n	8008bc2 <quorem+0xf2>
 8008b78:	3601      	adds	r6, #1
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f04f 0c00 	mov.w	ip, #0
 8008b80:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b84:	f8d0 e000 	ldr.w	lr, [r0]
 8008b88:	b293      	uxth	r3, r2
 8008b8a:	ebac 0303 	sub.w	r3, ip, r3
 8008b8e:	0c12      	lsrs	r2, r2, #16
 8008b90:	fa13 f38e 	uxtah	r3, r3, lr
 8008b94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ba2:	45c1      	cmp	r9, r8
 8008ba4:	f840 3b04 	str.w	r3, [r0], #4
 8008ba8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bac:	d2e8      	bcs.n	8008b80 <quorem+0xb0>
 8008bae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bb6:	b922      	cbnz	r2, 8008bc2 <quorem+0xf2>
 8008bb8:	3b04      	subs	r3, #4
 8008bba:	429d      	cmp	r5, r3
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	d30a      	bcc.n	8008bd6 <quorem+0x106>
 8008bc0:	613c      	str	r4, [r7, #16]
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	b003      	add	sp, #12
 8008bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	d1cc      	bne.n	8008b6c <quorem+0x9c>
 8008bd2:	3c01      	subs	r4, #1
 8008bd4:	e7c7      	b.n	8008b66 <quorem+0x96>
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	3b04      	subs	r3, #4
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	d1f0      	bne.n	8008bc0 <quorem+0xf0>
 8008bde:	3c01      	subs	r4, #1
 8008be0:	e7eb      	b.n	8008bba <quorem+0xea>
 8008be2:	2000      	movs	r0, #0
 8008be4:	e7ee      	b.n	8008bc4 <quorem+0xf4>
	...

08008be8 <_dtoa_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	ed2d 8b02 	vpush	{d8}
 8008bf0:	ec57 6b10 	vmov	r6, r7, d0
 8008bf4:	b095      	sub	sp, #84	; 0x54
 8008bf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bfc:	9105      	str	r1, [sp, #20]
 8008bfe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008c02:	4604      	mov	r4, r0
 8008c04:	9209      	str	r2, [sp, #36]	; 0x24
 8008c06:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c08:	b975      	cbnz	r5, 8008c28 <_dtoa_r+0x40>
 8008c0a:	2010      	movs	r0, #16
 8008c0c:	f000 fddc 	bl	80097c8 <malloc>
 8008c10:	4602      	mov	r2, r0
 8008c12:	6260      	str	r0, [r4, #36]	; 0x24
 8008c14:	b920      	cbnz	r0, 8008c20 <_dtoa_r+0x38>
 8008c16:	4bb2      	ldr	r3, [pc, #712]	; (8008ee0 <_dtoa_r+0x2f8>)
 8008c18:	21ea      	movs	r1, #234	; 0xea
 8008c1a:	48b2      	ldr	r0, [pc, #712]	; (8008ee4 <_dtoa_r+0x2fc>)
 8008c1c:	f001 fa32 	bl	800a084 <__assert_func>
 8008c20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c24:	6005      	str	r5, [r0, #0]
 8008c26:	60c5      	str	r5, [r0, #12]
 8008c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c2a:	6819      	ldr	r1, [r3, #0]
 8008c2c:	b151      	cbz	r1, 8008c44 <_dtoa_r+0x5c>
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	604a      	str	r2, [r1, #4]
 8008c32:	2301      	movs	r3, #1
 8008c34:	4093      	lsls	r3, r2
 8008c36:	608b      	str	r3, [r1, #8]
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f000 fe1b 	bl	8009874 <_Bfree>
 8008c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	1e3b      	subs	r3, r7, #0
 8008c46:	bfb9      	ittee	lt
 8008c48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c4c:	9303      	strlt	r3, [sp, #12]
 8008c4e:	2300      	movge	r3, #0
 8008c50:	f8c8 3000 	strge.w	r3, [r8]
 8008c54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008c58:	4ba3      	ldr	r3, [pc, #652]	; (8008ee8 <_dtoa_r+0x300>)
 8008c5a:	bfbc      	itt	lt
 8008c5c:	2201      	movlt	r2, #1
 8008c5e:	f8c8 2000 	strlt.w	r2, [r8]
 8008c62:	ea33 0309 	bics.w	r3, r3, r9
 8008c66:	d11b      	bne.n	8008ca0 <_dtoa_r+0xb8>
 8008c68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c74:	4333      	orrs	r3, r6
 8008c76:	f000 857a 	beq.w	800976e <_dtoa_r+0xb86>
 8008c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c7c:	b963      	cbnz	r3, 8008c98 <_dtoa_r+0xb0>
 8008c7e:	4b9b      	ldr	r3, [pc, #620]	; (8008eec <_dtoa_r+0x304>)
 8008c80:	e024      	b.n	8008ccc <_dtoa_r+0xe4>
 8008c82:	4b9b      	ldr	r3, [pc, #620]	; (8008ef0 <_dtoa_r+0x308>)
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	9800      	ldr	r0, [sp, #0]
 8008c8e:	b015      	add	sp, #84	; 0x54
 8008c90:	ecbd 8b02 	vpop	{d8}
 8008c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c98:	4b94      	ldr	r3, [pc, #592]	; (8008eec <_dtoa_r+0x304>)
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	3303      	adds	r3, #3
 8008c9e:	e7f3      	b.n	8008c88 <_dtoa_r+0xa0>
 8008ca0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	ec51 0b17 	vmov	r0, r1, d7
 8008caa:	2300      	movs	r3, #0
 8008cac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008cb0:	f7f7 ff12 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	b158      	cbz	r0, 8008cd0 <_dtoa_r+0xe8>
 8008cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cba:	2301      	movs	r3, #1
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 8551 	beq.w	8009768 <_dtoa_r+0xb80>
 8008cc6:	488b      	ldr	r0, [pc, #556]	; (8008ef4 <_dtoa_r+0x30c>)
 8008cc8:	6018      	str	r0, [r3, #0]
 8008cca:	1e43      	subs	r3, r0, #1
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	e7dd      	b.n	8008c8c <_dtoa_r+0xa4>
 8008cd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008cd4:	aa12      	add	r2, sp, #72	; 0x48
 8008cd6:	a913      	add	r1, sp, #76	; 0x4c
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f001 f8ad 	bl	8009e38 <__d2b>
 8008cde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ce2:	4683      	mov	fp, r0
 8008ce4:	2d00      	cmp	r5, #0
 8008ce6:	d07c      	beq.n	8008de2 <_dtoa_r+0x1fa>
 8008ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cf2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008cf6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d02:	4b7d      	ldr	r3, [pc, #500]	; (8008ef8 <_dtoa_r+0x310>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	4630      	mov	r0, r6
 8008d08:	4639      	mov	r1, r7
 8008d0a:	f7f7 fac5 	bl	8000298 <__aeabi_dsub>
 8008d0e:	a36e      	add	r3, pc, #440	; (adr r3, 8008ec8 <_dtoa_r+0x2e0>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	f7f7 fc78 	bl	8000608 <__aeabi_dmul>
 8008d18:	a36d      	add	r3, pc, #436	; (adr r3, 8008ed0 <_dtoa_r+0x2e8>)
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	f7f7 fabd 	bl	800029c <__adddf3>
 8008d22:	4606      	mov	r6, r0
 8008d24:	4628      	mov	r0, r5
 8008d26:	460f      	mov	r7, r1
 8008d28:	f7f7 fc04 	bl	8000534 <__aeabi_i2d>
 8008d2c:	a36a      	add	r3, pc, #424	; (adr r3, 8008ed8 <_dtoa_r+0x2f0>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 fc69 	bl	8000608 <__aeabi_dmul>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	f7f7 faad 	bl	800029c <__adddf3>
 8008d42:	4606      	mov	r6, r0
 8008d44:	460f      	mov	r7, r1
 8008d46:	f7f7 ff0f 	bl	8000b68 <__aeabi_d2iz>
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	4682      	mov	sl, r0
 8008d4e:	2300      	movs	r3, #0
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7f7 feca 	bl	8000aec <__aeabi_dcmplt>
 8008d58:	b148      	cbz	r0, 8008d6e <_dtoa_r+0x186>
 8008d5a:	4650      	mov	r0, sl
 8008d5c:	f7f7 fbea 	bl	8000534 <__aeabi_i2d>
 8008d60:	4632      	mov	r2, r6
 8008d62:	463b      	mov	r3, r7
 8008d64:	f7f7 feb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d68:	b908      	cbnz	r0, 8008d6e <_dtoa_r+0x186>
 8008d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d6e:	f1ba 0f16 	cmp.w	sl, #22
 8008d72:	d854      	bhi.n	8008e1e <_dtoa_r+0x236>
 8008d74:	4b61      	ldr	r3, [pc, #388]	; (8008efc <_dtoa_r+0x314>)
 8008d76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d82:	f7f7 feb3 	bl	8000aec <__aeabi_dcmplt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d04b      	beq.n	8008e22 <_dtoa_r+0x23a>
 8008d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d8e:	2300      	movs	r3, #0
 8008d90:	930e      	str	r3, [sp, #56]	; 0x38
 8008d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d94:	1b5d      	subs	r5, r3, r5
 8008d96:	1e6b      	subs	r3, r5, #1
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	bf43      	ittte	mi
 8008d9c:	2300      	movmi	r3, #0
 8008d9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008da2:	9304      	strmi	r3, [sp, #16]
 8008da4:	f04f 0800 	movpl.w	r8, #0
 8008da8:	f1ba 0f00 	cmp.w	sl, #0
 8008dac:	db3b      	blt.n	8008e26 <_dtoa_r+0x23e>
 8008dae:	9b04      	ldr	r3, [sp, #16]
 8008db0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008db4:	4453      	add	r3, sl
 8008db6:	9304      	str	r3, [sp, #16]
 8008db8:	2300      	movs	r3, #0
 8008dba:	9306      	str	r3, [sp, #24]
 8008dbc:	9b05      	ldr	r3, [sp, #20]
 8008dbe:	2b09      	cmp	r3, #9
 8008dc0:	d869      	bhi.n	8008e96 <_dtoa_r+0x2ae>
 8008dc2:	2b05      	cmp	r3, #5
 8008dc4:	bfc4      	itt	gt
 8008dc6:	3b04      	subgt	r3, #4
 8008dc8:	9305      	strgt	r3, [sp, #20]
 8008dca:	9b05      	ldr	r3, [sp, #20]
 8008dcc:	f1a3 0302 	sub.w	r3, r3, #2
 8008dd0:	bfcc      	ite	gt
 8008dd2:	2500      	movgt	r5, #0
 8008dd4:	2501      	movle	r5, #1
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d869      	bhi.n	8008eae <_dtoa_r+0x2c6>
 8008dda:	e8df f003 	tbb	[pc, r3]
 8008dde:	4e2c      	.short	0x4e2c
 8008de0:	5a4c      	.short	0x5a4c
 8008de2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008de6:	441d      	add	r5, r3
 8008de8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dec:	2b20      	cmp	r3, #32
 8008dee:	bfc1      	itttt	gt
 8008df0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008df4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008df8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008dfc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e00:	bfda      	itte	le
 8008e02:	f1c3 0320 	rsble	r3, r3, #32
 8008e06:	fa06 f003 	lslle.w	r0, r6, r3
 8008e0a:	4318      	orrgt	r0, r3
 8008e0c:	f7f7 fb82 	bl	8000514 <__aeabi_ui2d>
 8008e10:	2301      	movs	r3, #1
 8008e12:	4606      	mov	r6, r0
 8008e14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e18:	3d01      	subs	r5, #1
 8008e1a:	9310      	str	r3, [sp, #64]	; 0x40
 8008e1c:	e771      	b.n	8008d02 <_dtoa_r+0x11a>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e7b6      	b.n	8008d90 <_dtoa_r+0x1a8>
 8008e22:	900e      	str	r0, [sp, #56]	; 0x38
 8008e24:	e7b5      	b.n	8008d92 <_dtoa_r+0x1aa>
 8008e26:	f1ca 0300 	rsb	r3, sl, #0
 8008e2a:	9306      	str	r3, [sp, #24]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	eba8 080a 	sub.w	r8, r8, sl
 8008e32:	930d      	str	r3, [sp, #52]	; 0x34
 8008e34:	e7c2      	b.n	8008dbc <_dtoa_r+0x1d4>
 8008e36:	2300      	movs	r3, #0
 8008e38:	9308      	str	r3, [sp, #32]
 8008e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dc39      	bgt.n	8008eb4 <_dtoa_r+0x2cc>
 8008e40:	f04f 0901 	mov.w	r9, #1
 8008e44:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e48:	464b      	mov	r3, r9
 8008e4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008e4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e50:	2200      	movs	r2, #0
 8008e52:	6042      	str	r2, [r0, #4]
 8008e54:	2204      	movs	r2, #4
 8008e56:	f102 0614 	add.w	r6, r2, #20
 8008e5a:	429e      	cmp	r6, r3
 8008e5c:	6841      	ldr	r1, [r0, #4]
 8008e5e:	d92f      	bls.n	8008ec0 <_dtoa_r+0x2d8>
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 fcc7 	bl	80097f4 <_Balloc>
 8008e66:	9000      	str	r0, [sp, #0]
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d14b      	bne.n	8008f04 <_dtoa_r+0x31c>
 8008e6c:	4b24      	ldr	r3, [pc, #144]	; (8008f00 <_dtoa_r+0x318>)
 8008e6e:	4602      	mov	r2, r0
 8008e70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e74:	e6d1      	b.n	8008c1a <_dtoa_r+0x32>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e7de      	b.n	8008e38 <_dtoa_r+0x250>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	9308      	str	r3, [sp, #32]
 8008e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e80:	eb0a 0903 	add.w	r9, sl, r3
 8008e84:	f109 0301 	add.w	r3, r9, #1
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	bfb8      	it	lt
 8008e8e:	2301      	movlt	r3, #1
 8008e90:	e7dd      	b.n	8008e4e <_dtoa_r+0x266>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e7f2      	b.n	8008e7c <_dtoa_r+0x294>
 8008e96:	2501      	movs	r5, #1
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9305      	str	r3, [sp, #20]
 8008e9c:	9508      	str	r5, [sp, #32]
 8008e9e:	f04f 39ff 	mov.w	r9, #4294967295
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ea8:	2312      	movs	r3, #18
 8008eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8008eac:	e7cf      	b.n	8008e4e <_dtoa_r+0x266>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	9308      	str	r3, [sp, #32]
 8008eb2:	e7f4      	b.n	8008e9e <_dtoa_r+0x2b6>
 8008eb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008eb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	e7c6      	b.n	8008e4e <_dtoa_r+0x266>
 8008ec0:	3101      	adds	r1, #1
 8008ec2:	6041      	str	r1, [r0, #4]
 8008ec4:	0052      	lsls	r2, r2, #1
 8008ec6:	e7c6      	b.n	8008e56 <_dtoa_r+0x26e>
 8008ec8:	636f4361 	.word	0x636f4361
 8008ecc:	3fd287a7 	.word	0x3fd287a7
 8008ed0:	8b60c8b3 	.word	0x8b60c8b3
 8008ed4:	3fc68a28 	.word	0x3fc68a28
 8008ed8:	509f79fb 	.word	0x509f79fb
 8008edc:	3fd34413 	.word	0x3fd34413
 8008ee0:	0800ac29 	.word	0x0800ac29
 8008ee4:	0800ac40 	.word	0x0800ac40
 8008ee8:	7ff00000 	.word	0x7ff00000
 8008eec:	0800ac25 	.word	0x0800ac25
 8008ef0:	0800ac1c 	.word	0x0800ac1c
 8008ef4:	0800abf9 	.word	0x0800abf9
 8008ef8:	3ff80000 	.word	0x3ff80000
 8008efc:	0800ad38 	.word	0x0800ad38
 8008f00:	0800ac9f 	.word	0x0800ac9f
 8008f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f06:	9a00      	ldr	r2, [sp, #0]
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	9b01      	ldr	r3, [sp, #4]
 8008f0c:	2b0e      	cmp	r3, #14
 8008f0e:	f200 80ad 	bhi.w	800906c <_dtoa_r+0x484>
 8008f12:	2d00      	cmp	r5, #0
 8008f14:	f000 80aa 	beq.w	800906c <_dtoa_r+0x484>
 8008f18:	f1ba 0f00 	cmp.w	sl, #0
 8008f1c:	dd36      	ble.n	8008f8c <_dtoa_r+0x3a4>
 8008f1e:	4ac3      	ldr	r2, [pc, #780]	; (800922c <_dtoa_r+0x644>)
 8008f20:	f00a 030f 	and.w	r3, sl, #15
 8008f24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f28:	ed93 7b00 	vldr	d7, [r3]
 8008f2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008f30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008f34:	eeb0 8a47 	vmov.f32	s16, s14
 8008f38:	eef0 8a67 	vmov.f32	s17, s15
 8008f3c:	d016      	beq.n	8008f6c <_dtoa_r+0x384>
 8008f3e:	4bbc      	ldr	r3, [pc, #752]	; (8009230 <_dtoa_r+0x648>)
 8008f40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f48:	f7f7 fc88 	bl	800085c <__aeabi_ddiv>
 8008f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f50:	f007 070f 	and.w	r7, r7, #15
 8008f54:	2503      	movs	r5, #3
 8008f56:	4eb6      	ldr	r6, [pc, #728]	; (8009230 <_dtoa_r+0x648>)
 8008f58:	b957      	cbnz	r7, 8008f70 <_dtoa_r+0x388>
 8008f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f5e:	ec53 2b18 	vmov	r2, r3, d8
 8008f62:	f7f7 fc7b 	bl	800085c <__aeabi_ddiv>
 8008f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f6a:	e029      	b.n	8008fc0 <_dtoa_r+0x3d8>
 8008f6c:	2502      	movs	r5, #2
 8008f6e:	e7f2      	b.n	8008f56 <_dtoa_r+0x36e>
 8008f70:	07f9      	lsls	r1, r7, #31
 8008f72:	d508      	bpl.n	8008f86 <_dtoa_r+0x39e>
 8008f74:	ec51 0b18 	vmov	r0, r1, d8
 8008f78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f7c:	f7f7 fb44 	bl	8000608 <__aeabi_dmul>
 8008f80:	ec41 0b18 	vmov	d8, r0, r1
 8008f84:	3501      	adds	r5, #1
 8008f86:	107f      	asrs	r7, r7, #1
 8008f88:	3608      	adds	r6, #8
 8008f8a:	e7e5      	b.n	8008f58 <_dtoa_r+0x370>
 8008f8c:	f000 80a6 	beq.w	80090dc <_dtoa_r+0x4f4>
 8008f90:	f1ca 0600 	rsb	r6, sl, #0
 8008f94:	4ba5      	ldr	r3, [pc, #660]	; (800922c <_dtoa_r+0x644>)
 8008f96:	4fa6      	ldr	r7, [pc, #664]	; (8009230 <_dtoa_r+0x648>)
 8008f98:	f006 020f 	and.w	r2, r6, #15
 8008f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008fa8:	f7f7 fb2e 	bl	8000608 <__aeabi_dmul>
 8008fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fb0:	1136      	asrs	r6, r6, #4
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2502      	movs	r5, #2
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	f040 8085 	bne.w	80090c6 <_dtoa_r+0x4de>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1d2      	bne.n	8008f66 <_dtoa_r+0x37e>
 8008fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 808c 	beq.w	80090e0 <_dtoa_r+0x4f8>
 8008fc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fcc:	4b99      	ldr	r3, [pc, #612]	; (8009234 <_dtoa_r+0x64c>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	f7f7 fd8a 	bl	8000aec <__aeabi_dcmplt>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	f000 8081 	beq.w	80090e0 <_dtoa_r+0x4f8>
 8008fde:	9b01      	ldr	r3, [sp, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d07d      	beq.n	80090e0 <_dtoa_r+0x4f8>
 8008fe4:	f1b9 0f00 	cmp.w	r9, #0
 8008fe8:	dd3c      	ble.n	8009064 <_dtoa_r+0x47c>
 8008fea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008fee:	9307      	str	r3, [sp, #28]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	4b91      	ldr	r3, [pc, #580]	; (8009238 <_dtoa_r+0x650>)
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 fb06 	bl	8000608 <__aeabi_dmul>
 8008ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009000:	3501      	adds	r5, #1
 8009002:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009006:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800900a:	4628      	mov	r0, r5
 800900c:	f7f7 fa92 	bl	8000534 <__aeabi_i2d>
 8009010:	4632      	mov	r2, r6
 8009012:	463b      	mov	r3, r7
 8009014:	f7f7 faf8 	bl	8000608 <__aeabi_dmul>
 8009018:	4b88      	ldr	r3, [pc, #544]	; (800923c <_dtoa_r+0x654>)
 800901a:	2200      	movs	r2, #0
 800901c:	f7f7 f93e 	bl	800029c <__adddf3>
 8009020:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009028:	9303      	str	r3, [sp, #12]
 800902a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800902c:	2b00      	cmp	r3, #0
 800902e:	d15c      	bne.n	80090ea <_dtoa_r+0x502>
 8009030:	4b83      	ldr	r3, [pc, #524]	; (8009240 <_dtoa_r+0x658>)
 8009032:	2200      	movs	r2, #0
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	f7f7 f92e 	bl	8000298 <__aeabi_dsub>
 800903c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009040:	4606      	mov	r6, r0
 8009042:	460f      	mov	r7, r1
 8009044:	f7f7 fd70 	bl	8000b28 <__aeabi_dcmpgt>
 8009048:	2800      	cmp	r0, #0
 800904a:	f040 8296 	bne.w	800957a <_dtoa_r+0x992>
 800904e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009052:	4630      	mov	r0, r6
 8009054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009058:	4639      	mov	r1, r7
 800905a:	f7f7 fd47 	bl	8000aec <__aeabi_dcmplt>
 800905e:	2800      	cmp	r0, #0
 8009060:	f040 8288 	bne.w	8009574 <_dtoa_r+0x98c>
 8009064:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009068:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800906c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800906e:	2b00      	cmp	r3, #0
 8009070:	f2c0 8158 	blt.w	8009324 <_dtoa_r+0x73c>
 8009074:	f1ba 0f0e 	cmp.w	sl, #14
 8009078:	f300 8154 	bgt.w	8009324 <_dtoa_r+0x73c>
 800907c:	4b6b      	ldr	r3, [pc, #428]	; (800922c <_dtoa_r+0x644>)
 800907e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009082:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	f280 80e3 	bge.w	8009254 <_dtoa_r+0x66c>
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f300 80df 	bgt.w	8009254 <_dtoa_r+0x66c>
 8009096:	f040 826d 	bne.w	8009574 <_dtoa_r+0x98c>
 800909a:	4b69      	ldr	r3, [pc, #420]	; (8009240 <_dtoa_r+0x658>)
 800909c:	2200      	movs	r2, #0
 800909e:	4640      	mov	r0, r8
 80090a0:	4649      	mov	r1, r9
 80090a2:	f7f7 fab1 	bl	8000608 <__aeabi_dmul>
 80090a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090aa:	f7f7 fd33 	bl	8000b14 <__aeabi_dcmpge>
 80090ae:	9e01      	ldr	r6, [sp, #4]
 80090b0:	4637      	mov	r7, r6
 80090b2:	2800      	cmp	r0, #0
 80090b4:	f040 8243 	bne.w	800953e <_dtoa_r+0x956>
 80090b8:	9d00      	ldr	r5, [sp, #0]
 80090ba:	2331      	movs	r3, #49	; 0x31
 80090bc:	f805 3b01 	strb.w	r3, [r5], #1
 80090c0:	f10a 0a01 	add.w	sl, sl, #1
 80090c4:	e23f      	b.n	8009546 <_dtoa_r+0x95e>
 80090c6:	07f2      	lsls	r2, r6, #31
 80090c8:	d505      	bpl.n	80090d6 <_dtoa_r+0x4ee>
 80090ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ce:	f7f7 fa9b 	bl	8000608 <__aeabi_dmul>
 80090d2:	3501      	adds	r5, #1
 80090d4:	2301      	movs	r3, #1
 80090d6:	1076      	asrs	r6, r6, #1
 80090d8:	3708      	adds	r7, #8
 80090da:	e76c      	b.n	8008fb6 <_dtoa_r+0x3ce>
 80090dc:	2502      	movs	r5, #2
 80090de:	e76f      	b.n	8008fc0 <_dtoa_r+0x3d8>
 80090e0:	9b01      	ldr	r3, [sp, #4]
 80090e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80090e6:	930c      	str	r3, [sp, #48]	; 0x30
 80090e8:	e78d      	b.n	8009006 <_dtoa_r+0x41e>
 80090ea:	9900      	ldr	r1, [sp, #0]
 80090ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80090ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090f0:	4b4e      	ldr	r3, [pc, #312]	; (800922c <_dtoa_r+0x644>)
 80090f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090f6:	4401      	add	r1, r0
 80090f8:	9102      	str	r1, [sp, #8]
 80090fa:	9908      	ldr	r1, [sp, #32]
 80090fc:	eeb0 8a47 	vmov.f32	s16, s14
 8009100:	eef0 8a67 	vmov.f32	s17, s15
 8009104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009108:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800910c:	2900      	cmp	r1, #0
 800910e:	d045      	beq.n	800919c <_dtoa_r+0x5b4>
 8009110:	494c      	ldr	r1, [pc, #304]	; (8009244 <_dtoa_r+0x65c>)
 8009112:	2000      	movs	r0, #0
 8009114:	f7f7 fba2 	bl	800085c <__aeabi_ddiv>
 8009118:	ec53 2b18 	vmov	r2, r3, d8
 800911c:	f7f7 f8bc 	bl	8000298 <__aeabi_dsub>
 8009120:	9d00      	ldr	r5, [sp, #0]
 8009122:	ec41 0b18 	vmov	d8, r0, r1
 8009126:	4639      	mov	r1, r7
 8009128:	4630      	mov	r0, r6
 800912a:	f7f7 fd1d 	bl	8000b68 <__aeabi_d2iz>
 800912e:	900c      	str	r0, [sp, #48]	; 0x30
 8009130:	f7f7 fa00 	bl	8000534 <__aeabi_i2d>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4630      	mov	r0, r6
 800913a:	4639      	mov	r1, r7
 800913c:	f7f7 f8ac 	bl	8000298 <__aeabi_dsub>
 8009140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009142:	3330      	adds	r3, #48	; 0x30
 8009144:	f805 3b01 	strb.w	r3, [r5], #1
 8009148:	ec53 2b18 	vmov	r2, r3, d8
 800914c:	4606      	mov	r6, r0
 800914e:	460f      	mov	r7, r1
 8009150:	f7f7 fccc 	bl	8000aec <__aeabi_dcmplt>
 8009154:	2800      	cmp	r0, #0
 8009156:	d165      	bne.n	8009224 <_dtoa_r+0x63c>
 8009158:	4632      	mov	r2, r6
 800915a:	463b      	mov	r3, r7
 800915c:	4935      	ldr	r1, [pc, #212]	; (8009234 <_dtoa_r+0x64c>)
 800915e:	2000      	movs	r0, #0
 8009160:	f7f7 f89a 	bl	8000298 <__aeabi_dsub>
 8009164:	ec53 2b18 	vmov	r2, r3, d8
 8009168:	f7f7 fcc0 	bl	8000aec <__aeabi_dcmplt>
 800916c:	2800      	cmp	r0, #0
 800916e:	f040 80b9 	bne.w	80092e4 <_dtoa_r+0x6fc>
 8009172:	9b02      	ldr	r3, [sp, #8]
 8009174:	429d      	cmp	r5, r3
 8009176:	f43f af75 	beq.w	8009064 <_dtoa_r+0x47c>
 800917a:	4b2f      	ldr	r3, [pc, #188]	; (8009238 <_dtoa_r+0x650>)
 800917c:	ec51 0b18 	vmov	r0, r1, d8
 8009180:	2200      	movs	r2, #0
 8009182:	f7f7 fa41 	bl	8000608 <__aeabi_dmul>
 8009186:	4b2c      	ldr	r3, [pc, #176]	; (8009238 <_dtoa_r+0x650>)
 8009188:	ec41 0b18 	vmov	d8, r0, r1
 800918c:	2200      	movs	r2, #0
 800918e:	4630      	mov	r0, r6
 8009190:	4639      	mov	r1, r7
 8009192:	f7f7 fa39 	bl	8000608 <__aeabi_dmul>
 8009196:	4606      	mov	r6, r0
 8009198:	460f      	mov	r7, r1
 800919a:	e7c4      	b.n	8009126 <_dtoa_r+0x53e>
 800919c:	ec51 0b17 	vmov	r0, r1, d7
 80091a0:	f7f7 fa32 	bl	8000608 <__aeabi_dmul>
 80091a4:	9b02      	ldr	r3, [sp, #8]
 80091a6:	9d00      	ldr	r5, [sp, #0]
 80091a8:	930c      	str	r3, [sp, #48]	; 0x30
 80091aa:	ec41 0b18 	vmov	d8, r0, r1
 80091ae:	4639      	mov	r1, r7
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7f7 fcd9 	bl	8000b68 <__aeabi_d2iz>
 80091b6:	9011      	str	r0, [sp, #68]	; 0x44
 80091b8:	f7f7 f9bc 	bl	8000534 <__aeabi_i2d>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 f868 	bl	8000298 <__aeabi_dsub>
 80091c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091ca:	3330      	adds	r3, #48	; 0x30
 80091cc:	f805 3b01 	strb.w	r3, [r5], #1
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	429d      	cmp	r5, r3
 80091d4:	4606      	mov	r6, r0
 80091d6:	460f      	mov	r7, r1
 80091d8:	f04f 0200 	mov.w	r2, #0
 80091dc:	d134      	bne.n	8009248 <_dtoa_r+0x660>
 80091de:	4b19      	ldr	r3, [pc, #100]	; (8009244 <_dtoa_r+0x65c>)
 80091e0:	ec51 0b18 	vmov	r0, r1, d8
 80091e4:	f7f7 f85a 	bl	800029c <__adddf3>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4630      	mov	r0, r6
 80091ee:	4639      	mov	r1, r7
 80091f0:	f7f7 fc9a 	bl	8000b28 <__aeabi_dcmpgt>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d175      	bne.n	80092e4 <_dtoa_r+0x6fc>
 80091f8:	ec53 2b18 	vmov	r2, r3, d8
 80091fc:	4911      	ldr	r1, [pc, #68]	; (8009244 <_dtoa_r+0x65c>)
 80091fe:	2000      	movs	r0, #0
 8009200:	f7f7 f84a 	bl	8000298 <__aeabi_dsub>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4630      	mov	r0, r6
 800920a:	4639      	mov	r1, r7
 800920c:	f7f7 fc6e 	bl	8000aec <__aeabi_dcmplt>
 8009210:	2800      	cmp	r0, #0
 8009212:	f43f af27 	beq.w	8009064 <_dtoa_r+0x47c>
 8009216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009218:	1e6b      	subs	r3, r5, #1
 800921a:	930c      	str	r3, [sp, #48]	; 0x30
 800921c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009220:	2b30      	cmp	r3, #48	; 0x30
 8009222:	d0f8      	beq.n	8009216 <_dtoa_r+0x62e>
 8009224:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009228:	e04a      	b.n	80092c0 <_dtoa_r+0x6d8>
 800922a:	bf00      	nop
 800922c:	0800ad38 	.word	0x0800ad38
 8009230:	0800ad10 	.word	0x0800ad10
 8009234:	3ff00000 	.word	0x3ff00000
 8009238:	40240000 	.word	0x40240000
 800923c:	401c0000 	.word	0x401c0000
 8009240:	40140000 	.word	0x40140000
 8009244:	3fe00000 	.word	0x3fe00000
 8009248:	4baf      	ldr	r3, [pc, #700]	; (8009508 <_dtoa_r+0x920>)
 800924a:	f7f7 f9dd 	bl	8000608 <__aeabi_dmul>
 800924e:	4606      	mov	r6, r0
 8009250:	460f      	mov	r7, r1
 8009252:	e7ac      	b.n	80091ae <_dtoa_r+0x5c6>
 8009254:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009258:	9d00      	ldr	r5, [sp, #0]
 800925a:	4642      	mov	r2, r8
 800925c:	464b      	mov	r3, r9
 800925e:	4630      	mov	r0, r6
 8009260:	4639      	mov	r1, r7
 8009262:	f7f7 fafb 	bl	800085c <__aeabi_ddiv>
 8009266:	f7f7 fc7f 	bl	8000b68 <__aeabi_d2iz>
 800926a:	9002      	str	r0, [sp, #8]
 800926c:	f7f7 f962 	bl	8000534 <__aeabi_i2d>
 8009270:	4642      	mov	r2, r8
 8009272:	464b      	mov	r3, r9
 8009274:	f7f7 f9c8 	bl	8000608 <__aeabi_dmul>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4630      	mov	r0, r6
 800927e:	4639      	mov	r1, r7
 8009280:	f7f7 f80a 	bl	8000298 <__aeabi_dsub>
 8009284:	9e02      	ldr	r6, [sp, #8]
 8009286:	9f01      	ldr	r7, [sp, #4]
 8009288:	3630      	adds	r6, #48	; 0x30
 800928a:	f805 6b01 	strb.w	r6, [r5], #1
 800928e:	9e00      	ldr	r6, [sp, #0]
 8009290:	1bae      	subs	r6, r5, r6
 8009292:	42b7      	cmp	r7, r6
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	d137      	bne.n	800930a <_dtoa_r+0x722>
 800929a:	f7f6 ffff 	bl	800029c <__adddf3>
 800929e:	4642      	mov	r2, r8
 80092a0:	464b      	mov	r3, r9
 80092a2:	4606      	mov	r6, r0
 80092a4:	460f      	mov	r7, r1
 80092a6:	f7f7 fc3f 	bl	8000b28 <__aeabi_dcmpgt>
 80092aa:	b9c8      	cbnz	r0, 80092e0 <_dtoa_r+0x6f8>
 80092ac:	4642      	mov	r2, r8
 80092ae:	464b      	mov	r3, r9
 80092b0:	4630      	mov	r0, r6
 80092b2:	4639      	mov	r1, r7
 80092b4:	f7f7 fc10 	bl	8000ad8 <__aeabi_dcmpeq>
 80092b8:	b110      	cbz	r0, 80092c0 <_dtoa_r+0x6d8>
 80092ba:	9b02      	ldr	r3, [sp, #8]
 80092bc:	07d9      	lsls	r1, r3, #31
 80092be:	d40f      	bmi.n	80092e0 <_dtoa_r+0x6f8>
 80092c0:	4620      	mov	r0, r4
 80092c2:	4659      	mov	r1, fp
 80092c4:	f000 fad6 	bl	8009874 <_Bfree>
 80092c8:	2300      	movs	r3, #0
 80092ca:	702b      	strb	r3, [r5, #0]
 80092cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092ce:	f10a 0001 	add.w	r0, sl, #1
 80092d2:	6018      	str	r0, [r3, #0]
 80092d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f43f acd8 	beq.w	8008c8c <_dtoa_r+0xa4>
 80092dc:	601d      	str	r5, [r3, #0]
 80092de:	e4d5      	b.n	8008c8c <_dtoa_r+0xa4>
 80092e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80092e4:	462b      	mov	r3, r5
 80092e6:	461d      	mov	r5, r3
 80092e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092ec:	2a39      	cmp	r2, #57	; 0x39
 80092ee:	d108      	bne.n	8009302 <_dtoa_r+0x71a>
 80092f0:	9a00      	ldr	r2, [sp, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d1f7      	bne.n	80092e6 <_dtoa_r+0x6fe>
 80092f6:	9a07      	ldr	r2, [sp, #28]
 80092f8:	9900      	ldr	r1, [sp, #0]
 80092fa:	3201      	adds	r2, #1
 80092fc:	9207      	str	r2, [sp, #28]
 80092fe:	2230      	movs	r2, #48	; 0x30
 8009300:	700a      	strb	r2, [r1, #0]
 8009302:	781a      	ldrb	r2, [r3, #0]
 8009304:	3201      	adds	r2, #1
 8009306:	701a      	strb	r2, [r3, #0]
 8009308:	e78c      	b.n	8009224 <_dtoa_r+0x63c>
 800930a:	4b7f      	ldr	r3, [pc, #508]	; (8009508 <_dtoa_r+0x920>)
 800930c:	2200      	movs	r2, #0
 800930e:	f7f7 f97b 	bl	8000608 <__aeabi_dmul>
 8009312:	2200      	movs	r2, #0
 8009314:	2300      	movs	r3, #0
 8009316:	4606      	mov	r6, r0
 8009318:	460f      	mov	r7, r1
 800931a:	f7f7 fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800931e:	2800      	cmp	r0, #0
 8009320:	d09b      	beq.n	800925a <_dtoa_r+0x672>
 8009322:	e7cd      	b.n	80092c0 <_dtoa_r+0x6d8>
 8009324:	9a08      	ldr	r2, [sp, #32]
 8009326:	2a00      	cmp	r2, #0
 8009328:	f000 80c4 	beq.w	80094b4 <_dtoa_r+0x8cc>
 800932c:	9a05      	ldr	r2, [sp, #20]
 800932e:	2a01      	cmp	r2, #1
 8009330:	f300 80a8 	bgt.w	8009484 <_dtoa_r+0x89c>
 8009334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009336:	2a00      	cmp	r2, #0
 8009338:	f000 80a0 	beq.w	800947c <_dtoa_r+0x894>
 800933c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009340:	9e06      	ldr	r6, [sp, #24]
 8009342:	4645      	mov	r5, r8
 8009344:	9a04      	ldr	r2, [sp, #16]
 8009346:	2101      	movs	r1, #1
 8009348:	441a      	add	r2, r3
 800934a:	4620      	mov	r0, r4
 800934c:	4498      	add	r8, r3
 800934e:	9204      	str	r2, [sp, #16]
 8009350:	f000 fb4c 	bl	80099ec <__i2b>
 8009354:	4607      	mov	r7, r0
 8009356:	2d00      	cmp	r5, #0
 8009358:	dd0b      	ble.n	8009372 <_dtoa_r+0x78a>
 800935a:	9b04      	ldr	r3, [sp, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	dd08      	ble.n	8009372 <_dtoa_r+0x78a>
 8009360:	42ab      	cmp	r3, r5
 8009362:	9a04      	ldr	r2, [sp, #16]
 8009364:	bfa8      	it	ge
 8009366:	462b      	movge	r3, r5
 8009368:	eba8 0803 	sub.w	r8, r8, r3
 800936c:	1aed      	subs	r5, r5, r3
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	9b06      	ldr	r3, [sp, #24]
 8009374:	b1fb      	cbz	r3, 80093b6 <_dtoa_r+0x7ce>
 8009376:	9b08      	ldr	r3, [sp, #32]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 809f 	beq.w	80094bc <_dtoa_r+0x8d4>
 800937e:	2e00      	cmp	r6, #0
 8009380:	dd11      	ble.n	80093a6 <_dtoa_r+0x7be>
 8009382:	4639      	mov	r1, r7
 8009384:	4632      	mov	r2, r6
 8009386:	4620      	mov	r0, r4
 8009388:	f000 fbec 	bl	8009b64 <__pow5mult>
 800938c:	465a      	mov	r2, fp
 800938e:	4601      	mov	r1, r0
 8009390:	4607      	mov	r7, r0
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fb40 	bl	8009a18 <__multiply>
 8009398:	4659      	mov	r1, fp
 800939a:	9007      	str	r0, [sp, #28]
 800939c:	4620      	mov	r0, r4
 800939e:	f000 fa69 	bl	8009874 <_Bfree>
 80093a2:	9b07      	ldr	r3, [sp, #28]
 80093a4:	469b      	mov	fp, r3
 80093a6:	9b06      	ldr	r3, [sp, #24]
 80093a8:	1b9a      	subs	r2, r3, r6
 80093aa:	d004      	beq.n	80093b6 <_dtoa_r+0x7ce>
 80093ac:	4659      	mov	r1, fp
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 fbd8 	bl	8009b64 <__pow5mult>
 80093b4:	4683      	mov	fp, r0
 80093b6:	2101      	movs	r1, #1
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fb17 	bl	80099ec <__i2b>
 80093be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	4606      	mov	r6, r0
 80093c4:	dd7c      	ble.n	80094c0 <_dtoa_r+0x8d8>
 80093c6:	461a      	mov	r2, r3
 80093c8:	4601      	mov	r1, r0
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 fbca 	bl	8009b64 <__pow5mult>
 80093d0:	9b05      	ldr	r3, [sp, #20]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	4606      	mov	r6, r0
 80093d6:	dd76      	ble.n	80094c6 <_dtoa_r+0x8de>
 80093d8:	2300      	movs	r3, #0
 80093da:	9306      	str	r3, [sp, #24]
 80093dc:	6933      	ldr	r3, [r6, #16]
 80093de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093e2:	6918      	ldr	r0, [r3, #16]
 80093e4:	f000 fab2 	bl	800994c <__hi0bits>
 80093e8:	f1c0 0020 	rsb	r0, r0, #32
 80093ec:	9b04      	ldr	r3, [sp, #16]
 80093ee:	4418      	add	r0, r3
 80093f0:	f010 001f 	ands.w	r0, r0, #31
 80093f4:	f000 8086 	beq.w	8009504 <_dtoa_r+0x91c>
 80093f8:	f1c0 0320 	rsb	r3, r0, #32
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	dd7f      	ble.n	8009500 <_dtoa_r+0x918>
 8009400:	f1c0 001c 	rsb	r0, r0, #28
 8009404:	9b04      	ldr	r3, [sp, #16]
 8009406:	4403      	add	r3, r0
 8009408:	4480      	add	r8, r0
 800940a:	4405      	add	r5, r0
 800940c:	9304      	str	r3, [sp, #16]
 800940e:	f1b8 0f00 	cmp.w	r8, #0
 8009412:	dd05      	ble.n	8009420 <_dtoa_r+0x838>
 8009414:	4659      	mov	r1, fp
 8009416:	4642      	mov	r2, r8
 8009418:	4620      	mov	r0, r4
 800941a:	f000 fbfd 	bl	8009c18 <__lshift>
 800941e:	4683      	mov	fp, r0
 8009420:	9b04      	ldr	r3, [sp, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dd05      	ble.n	8009432 <_dtoa_r+0x84a>
 8009426:	4631      	mov	r1, r6
 8009428:	461a      	mov	r2, r3
 800942a:	4620      	mov	r0, r4
 800942c:	f000 fbf4 	bl	8009c18 <__lshift>
 8009430:	4606      	mov	r6, r0
 8009432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009434:	2b00      	cmp	r3, #0
 8009436:	d069      	beq.n	800950c <_dtoa_r+0x924>
 8009438:	4631      	mov	r1, r6
 800943a:	4658      	mov	r0, fp
 800943c:	f000 fc58 	bl	8009cf0 <__mcmp>
 8009440:	2800      	cmp	r0, #0
 8009442:	da63      	bge.n	800950c <_dtoa_r+0x924>
 8009444:	2300      	movs	r3, #0
 8009446:	4659      	mov	r1, fp
 8009448:	220a      	movs	r2, #10
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fa34 	bl	80098b8 <__multadd>
 8009450:	9b08      	ldr	r3, [sp, #32]
 8009452:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009456:	4683      	mov	fp, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 818f 	beq.w	800977c <_dtoa_r+0xb94>
 800945e:	4639      	mov	r1, r7
 8009460:	2300      	movs	r3, #0
 8009462:	220a      	movs	r2, #10
 8009464:	4620      	mov	r0, r4
 8009466:	f000 fa27 	bl	80098b8 <__multadd>
 800946a:	f1b9 0f00 	cmp.w	r9, #0
 800946e:	4607      	mov	r7, r0
 8009470:	f300 808e 	bgt.w	8009590 <_dtoa_r+0x9a8>
 8009474:	9b05      	ldr	r3, [sp, #20]
 8009476:	2b02      	cmp	r3, #2
 8009478:	dc50      	bgt.n	800951c <_dtoa_r+0x934>
 800947a:	e089      	b.n	8009590 <_dtoa_r+0x9a8>
 800947c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800947e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009482:	e75d      	b.n	8009340 <_dtoa_r+0x758>
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	1e5e      	subs	r6, r3, #1
 8009488:	9b06      	ldr	r3, [sp, #24]
 800948a:	42b3      	cmp	r3, r6
 800948c:	bfbf      	itttt	lt
 800948e:	9b06      	ldrlt	r3, [sp, #24]
 8009490:	9606      	strlt	r6, [sp, #24]
 8009492:	1af2      	sublt	r2, r6, r3
 8009494:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009496:	bfb6      	itet	lt
 8009498:	189b      	addlt	r3, r3, r2
 800949a:	1b9e      	subge	r6, r3, r6
 800949c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	bfb8      	it	lt
 80094a2:	2600      	movlt	r6, #0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bfb5      	itete	lt
 80094a8:	eba8 0503 	sublt.w	r5, r8, r3
 80094ac:	9b01      	ldrge	r3, [sp, #4]
 80094ae:	2300      	movlt	r3, #0
 80094b0:	4645      	movge	r5, r8
 80094b2:	e747      	b.n	8009344 <_dtoa_r+0x75c>
 80094b4:	9e06      	ldr	r6, [sp, #24]
 80094b6:	9f08      	ldr	r7, [sp, #32]
 80094b8:	4645      	mov	r5, r8
 80094ba:	e74c      	b.n	8009356 <_dtoa_r+0x76e>
 80094bc:	9a06      	ldr	r2, [sp, #24]
 80094be:	e775      	b.n	80093ac <_dtoa_r+0x7c4>
 80094c0:	9b05      	ldr	r3, [sp, #20]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	dc18      	bgt.n	80094f8 <_dtoa_r+0x910>
 80094c6:	9b02      	ldr	r3, [sp, #8]
 80094c8:	b9b3      	cbnz	r3, 80094f8 <_dtoa_r+0x910>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094d0:	b9a3      	cbnz	r3, 80094fc <_dtoa_r+0x914>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094d8:	0d1b      	lsrs	r3, r3, #20
 80094da:	051b      	lsls	r3, r3, #20
 80094dc:	b12b      	cbz	r3, 80094ea <_dtoa_r+0x902>
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	3301      	adds	r3, #1
 80094e2:	9304      	str	r3, [sp, #16]
 80094e4:	f108 0801 	add.w	r8, r8, #1
 80094e8:	2301      	movs	r3, #1
 80094ea:	9306      	str	r3, [sp, #24]
 80094ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f47f af74 	bne.w	80093dc <_dtoa_r+0x7f4>
 80094f4:	2001      	movs	r0, #1
 80094f6:	e779      	b.n	80093ec <_dtoa_r+0x804>
 80094f8:	2300      	movs	r3, #0
 80094fa:	e7f6      	b.n	80094ea <_dtoa_r+0x902>
 80094fc:	9b02      	ldr	r3, [sp, #8]
 80094fe:	e7f4      	b.n	80094ea <_dtoa_r+0x902>
 8009500:	d085      	beq.n	800940e <_dtoa_r+0x826>
 8009502:	4618      	mov	r0, r3
 8009504:	301c      	adds	r0, #28
 8009506:	e77d      	b.n	8009404 <_dtoa_r+0x81c>
 8009508:	40240000 	.word	0x40240000
 800950c:	9b01      	ldr	r3, [sp, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	dc38      	bgt.n	8009584 <_dtoa_r+0x99c>
 8009512:	9b05      	ldr	r3, [sp, #20]
 8009514:	2b02      	cmp	r3, #2
 8009516:	dd35      	ble.n	8009584 <_dtoa_r+0x99c>
 8009518:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800951c:	f1b9 0f00 	cmp.w	r9, #0
 8009520:	d10d      	bne.n	800953e <_dtoa_r+0x956>
 8009522:	4631      	mov	r1, r6
 8009524:	464b      	mov	r3, r9
 8009526:	2205      	movs	r2, #5
 8009528:	4620      	mov	r0, r4
 800952a:	f000 f9c5 	bl	80098b8 <__multadd>
 800952e:	4601      	mov	r1, r0
 8009530:	4606      	mov	r6, r0
 8009532:	4658      	mov	r0, fp
 8009534:	f000 fbdc 	bl	8009cf0 <__mcmp>
 8009538:	2800      	cmp	r0, #0
 800953a:	f73f adbd 	bgt.w	80090b8 <_dtoa_r+0x4d0>
 800953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009540:	9d00      	ldr	r5, [sp, #0]
 8009542:	ea6f 0a03 	mvn.w	sl, r3
 8009546:	f04f 0800 	mov.w	r8, #0
 800954a:	4631      	mov	r1, r6
 800954c:	4620      	mov	r0, r4
 800954e:	f000 f991 	bl	8009874 <_Bfree>
 8009552:	2f00      	cmp	r7, #0
 8009554:	f43f aeb4 	beq.w	80092c0 <_dtoa_r+0x6d8>
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	d005      	beq.n	800956a <_dtoa_r+0x982>
 800955e:	45b8      	cmp	r8, r7
 8009560:	d003      	beq.n	800956a <_dtoa_r+0x982>
 8009562:	4641      	mov	r1, r8
 8009564:	4620      	mov	r0, r4
 8009566:	f000 f985 	bl	8009874 <_Bfree>
 800956a:	4639      	mov	r1, r7
 800956c:	4620      	mov	r0, r4
 800956e:	f000 f981 	bl	8009874 <_Bfree>
 8009572:	e6a5      	b.n	80092c0 <_dtoa_r+0x6d8>
 8009574:	2600      	movs	r6, #0
 8009576:	4637      	mov	r7, r6
 8009578:	e7e1      	b.n	800953e <_dtoa_r+0x956>
 800957a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800957c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009580:	4637      	mov	r7, r6
 8009582:	e599      	b.n	80090b8 <_dtoa_r+0x4d0>
 8009584:	9b08      	ldr	r3, [sp, #32]
 8009586:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 80fd 	beq.w	800978a <_dtoa_r+0xba2>
 8009590:	2d00      	cmp	r5, #0
 8009592:	dd05      	ble.n	80095a0 <_dtoa_r+0x9b8>
 8009594:	4639      	mov	r1, r7
 8009596:	462a      	mov	r2, r5
 8009598:	4620      	mov	r0, r4
 800959a:	f000 fb3d 	bl	8009c18 <__lshift>
 800959e:	4607      	mov	r7, r0
 80095a0:	9b06      	ldr	r3, [sp, #24]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d05c      	beq.n	8009660 <_dtoa_r+0xa78>
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 f923 	bl	80097f4 <_Balloc>
 80095ae:	4605      	mov	r5, r0
 80095b0:	b928      	cbnz	r0, 80095be <_dtoa_r+0x9d6>
 80095b2:	4b80      	ldr	r3, [pc, #512]	; (80097b4 <_dtoa_r+0xbcc>)
 80095b4:	4602      	mov	r2, r0
 80095b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095ba:	f7ff bb2e 	b.w	8008c1a <_dtoa_r+0x32>
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	3202      	adds	r2, #2
 80095c2:	0092      	lsls	r2, r2, #2
 80095c4:	f107 010c 	add.w	r1, r7, #12
 80095c8:	300c      	adds	r0, #12
 80095ca:	f000 f905 	bl	80097d8 <memcpy>
 80095ce:	2201      	movs	r2, #1
 80095d0:	4629      	mov	r1, r5
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fb20 	bl	8009c18 <__lshift>
 80095d8:	9b00      	ldr	r3, [sp, #0]
 80095da:	3301      	adds	r3, #1
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	9b00      	ldr	r3, [sp, #0]
 80095e0:	444b      	add	r3, r9
 80095e2:	9307      	str	r3, [sp, #28]
 80095e4:	9b02      	ldr	r3, [sp, #8]
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	46b8      	mov	r8, r7
 80095ec:	9306      	str	r3, [sp, #24]
 80095ee:	4607      	mov	r7, r0
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	4631      	mov	r1, r6
 80095f4:	3b01      	subs	r3, #1
 80095f6:	4658      	mov	r0, fp
 80095f8:	9302      	str	r3, [sp, #8]
 80095fa:	f7ff fa69 	bl	8008ad0 <quorem>
 80095fe:	4603      	mov	r3, r0
 8009600:	3330      	adds	r3, #48	; 0x30
 8009602:	9004      	str	r0, [sp, #16]
 8009604:	4641      	mov	r1, r8
 8009606:	4658      	mov	r0, fp
 8009608:	9308      	str	r3, [sp, #32]
 800960a:	f000 fb71 	bl	8009cf0 <__mcmp>
 800960e:	463a      	mov	r2, r7
 8009610:	4681      	mov	r9, r0
 8009612:	4631      	mov	r1, r6
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fb87 	bl	8009d28 <__mdiff>
 800961a:	68c2      	ldr	r2, [r0, #12]
 800961c:	9b08      	ldr	r3, [sp, #32]
 800961e:	4605      	mov	r5, r0
 8009620:	bb02      	cbnz	r2, 8009664 <_dtoa_r+0xa7c>
 8009622:	4601      	mov	r1, r0
 8009624:	4658      	mov	r0, fp
 8009626:	f000 fb63 	bl	8009cf0 <__mcmp>
 800962a:	9b08      	ldr	r3, [sp, #32]
 800962c:	4602      	mov	r2, r0
 800962e:	4629      	mov	r1, r5
 8009630:	4620      	mov	r0, r4
 8009632:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009636:	f000 f91d 	bl	8009874 <_Bfree>
 800963a:	9b05      	ldr	r3, [sp, #20]
 800963c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800963e:	9d01      	ldr	r5, [sp, #4]
 8009640:	ea43 0102 	orr.w	r1, r3, r2
 8009644:	9b06      	ldr	r3, [sp, #24]
 8009646:	430b      	orrs	r3, r1
 8009648:	9b08      	ldr	r3, [sp, #32]
 800964a:	d10d      	bne.n	8009668 <_dtoa_r+0xa80>
 800964c:	2b39      	cmp	r3, #57	; 0x39
 800964e:	d029      	beq.n	80096a4 <_dtoa_r+0xabc>
 8009650:	f1b9 0f00 	cmp.w	r9, #0
 8009654:	dd01      	ble.n	800965a <_dtoa_r+0xa72>
 8009656:	9b04      	ldr	r3, [sp, #16]
 8009658:	3331      	adds	r3, #49	; 0x31
 800965a:	9a02      	ldr	r2, [sp, #8]
 800965c:	7013      	strb	r3, [r2, #0]
 800965e:	e774      	b.n	800954a <_dtoa_r+0x962>
 8009660:	4638      	mov	r0, r7
 8009662:	e7b9      	b.n	80095d8 <_dtoa_r+0x9f0>
 8009664:	2201      	movs	r2, #1
 8009666:	e7e2      	b.n	800962e <_dtoa_r+0xa46>
 8009668:	f1b9 0f00 	cmp.w	r9, #0
 800966c:	db06      	blt.n	800967c <_dtoa_r+0xa94>
 800966e:	9905      	ldr	r1, [sp, #20]
 8009670:	ea41 0909 	orr.w	r9, r1, r9
 8009674:	9906      	ldr	r1, [sp, #24]
 8009676:	ea59 0101 	orrs.w	r1, r9, r1
 800967a:	d120      	bne.n	80096be <_dtoa_r+0xad6>
 800967c:	2a00      	cmp	r2, #0
 800967e:	ddec      	ble.n	800965a <_dtoa_r+0xa72>
 8009680:	4659      	mov	r1, fp
 8009682:	2201      	movs	r2, #1
 8009684:	4620      	mov	r0, r4
 8009686:	9301      	str	r3, [sp, #4]
 8009688:	f000 fac6 	bl	8009c18 <__lshift>
 800968c:	4631      	mov	r1, r6
 800968e:	4683      	mov	fp, r0
 8009690:	f000 fb2e 	bl	8009cf0 <__mcmp>
 8009694:	2800      	cmp	r0, #0
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	dc02      	bgt.n	80096a0 <_dtoa_r+0xab8>
 800969a:	d1de      	bne.n	800965a <_dtoa_r+0xa72>
 800969c:	07da      	lsls	r2, r3, #31
 800969e:	d5dc      	bpl.n	800965a <_dtoa_r+0xa72>
 80096a0:	2b39      	cmp	r3, #57	; 0x39
 80096a2:	d1d8      	bne.n	8009656 <_dtoa_r+0xa6e>
 80096a4:	9a02      	ldr	r2, [sp, #8]
 80096a6:	2339      	movs	r3, #57	; 0x39
 80096a8:	7013      	strb	r3, [r2, #0]
 80096aa:	462b      	mov	r3, r5
 80096ac:	461d      	mov	r5, r3
 80096ae:	3b01      	subs	r3, #1
 80096b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096b4:	2a39      	cmp	r2, #57	; 0x39
 80096b6:	d050      	beq.n	800975a <_dtoa_r+0xb72>
 80096b8:	3201      	adds	r2, #1
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	e745      	b.n	800954a <_dtoa_r+0x962>
 80096be:	2a00      	cmp	r2, #0
 80096c0:	dd03      	ble.n	80096ca <_dtoa_r+0xae2>
 80096c2:	2b39      	cmp	r3, #57	; 0x39
 80096c4:	d0ee      	beq.n	80096a4 <_dtoa_r+0xabc>
 80096c6:	3301      	adds	r3, #1
 80096c8:	e7c7      	b.n	800965a <_dtoa_r+0xa72>
 80096ca:	9a01      	ldr	r2, [sp, #4]
 80096cc:	9907      	ldr	r1, [sp, #28]
 80096ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80096d2:	428a      	cmp	r2, r1
 80096d4:	d02a      	beq.n	800972c <_dtoa_r+0xb44>
 80096d6:	4659      	mov	r1, fp
 80096d8:	2300      	movs	r3, #0
 80096da:	220a      	movs	r2, #10
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 f8eb 	bl	80098b8 <__multadd>
 80096e2:	45b8      	cmp	r8, r7
 80096e4:	4683      	mov	fp, r0
 80096e6:	f04f 0300 	mov.w	r3, #0
 80096ea:	f04f 020a 	mov.w	r2, #10
 80096ee:	4641      	mov	r1, r8
 80096f0:	4620      	mov	r0, r4
 80096f2:	d107      	bne.n	8009704 <_dtoa_r+0xb1c>
 80096f4:	f000 f8e0 	bl	80098b8 <__multadd>
 80096f8:	4680      	mov	r8, r0
 80096fa:	4607      	mov	r7, r0
 80096fc:	9b01      	ldr	r3, [sp, #4]
 80096fe:	3301      	adds	r3, #1
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	e775      	b.n	80095f0 <_dtoa_r+0xa08>
 8009704:	f000 f8d8 	bl	80098b8 <__multadd>
 8009708:	4639      	mov	r1, r7
 800970a:	4680      	mov	r8, r0
 800970c:	2300      	movs	r3, #0
 800970e:	220a      	movs	r2, #10
 8009710:	4620      	mov	r0, r4
 8009712:	f000 f8d1 	bl	80098b8 <__multadd>
 8009716:	4607      	mov	r7, r0
 8009718:	e7f0      	b.n	80096fc <_dtoa_r+0xb14>
 800971a:	f1b9 0f00 	cmp.w	r9, #0
 800971e:	9a00      	ldr	r2, [sp, #0]
 8009720:	bfcc      	ite	gt
 8009722:	464d      	movgt	r5, r9
 8009724:	2501      	movle	r5, #1
 8009726:	4415      	add	r5, r2
 8009728:	f04f 0800 	mov.w	r8, #0
 800972c:	4659      	mov	r1, fp
 800972e:	2201      	movs	r2, #1
 8009730:	4620      	mov	r0, r4
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	f000 fa70 	bl	8009c18 <__lshift>
 8009738:	4631      	mov	r1, r6
 800973a:	4683      	mov	fp, r0
 800973c:	f000 fad8 	bl	8009cf0 <__mcmp>
 8009740:	2800      	cmp	r0, #0
 8009742:	dcb2      	bgt.n	80096aa <_dtoa_r+0xac2>
 8009744:	d102      	bne.n	800974c <_dtoa_r+0xb64>
 8009746:	9b01      	ldr	r3, [sp, #4]
 8009748:	07db      	lsls	r3, r3, #31
 800974a:	d4ae      	bmi.n	80096aa <_dtoa_r+0xac2>
 800974c:	462b      	mov	r3, r5
 800974e:	461d      	mov	r5, r3
 8009750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009754:	2a30      	cmp	r2, #48	; 0x30
 8009756:	d0fa      	beq.n	800974e <_dtoa_r+0xb66>
 8009758:	e6f7      	b.n	800954a <_dtoa_r+0x962>
 800975a:	9a00      	ldr	r2, [sp, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d1a5      	bne.n	80096ac <_dtoa_r+0xac4>
 8009760:	f10a 0a01 	add.w	sl, sl, #1
 8009764:	2331      	movs	r3, #49	; 0x31
 8009766:	e779      	b.n	800965c <_dtoa_r+0xa74>
 8009768:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <_dtoa_r+0xbd0>)
 800976a:	f7ff baaf 	b.w	8008ccc <_dtoa_r+0xe4>
 800976e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009770:	2b00      	cmp	r3, #0
 8009772:	f47f aa86 	bne.w	8008c82 <_dtoa_r+0x9a>
 8009776:	4b11      	ldr	r3, [pc, #68]	; (80097bc <_dtoa_r+0xbd4>)
 8009778:	f7ff baa8 	b.w	8008ccc <_dtoa_r+0xe4>
 800977c:	f1b9 0f00 	cmp.w	r9, #0
 8009780:	dc03      	bgt.n	800978a <_dtoa_r+0xba2>
 8009782:	9b05      	ldr	r3, [sp, #20]
 8009784:	2b02      	cmp	r3, #2
 8009786:	f73f aec9 	bgt.w	800951c <_dtoa_r+0x934>
 800978a:	9d00      	ldr	r5, [sp, #0]
 800978c:	4631      	mov	r1, r6
 800978e:	4658      	mov	r0, fp
 8009790:	f7ff f99e 	bl	8008ad0 <quorem>
 8009794:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009798:	f805 3b01 	strb.w	r3, [r5], #1
 800979c:	9a00      	ldr	r2, [sp, #0]
 800979e:	1aaa      	subs	r2, r5, r2
 80097a0:	4591      	cmp	r9, r2
 80097a2:	ddba      	ble.n	800971a <_dtoa_r+0xb32>
 80097a4:	4659      	mov	r1, fp
 80097a6:	2300      	movs	r3, #0
 80097a8:	220a      	movs	r2, #10
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 f884 	bl	80098b8 <__multadd>
 80097b0:	4683      	mov	fp, r0
 80097b2:	e7eb      	b.n	800978c <_dtoa_r+0xba4>
 80097b4:	0800ac9f 	.word	0x0800ac9f
 80097b8:	0800abf8 	.word	0x0800abf8
 80097bc:	0800ac1c 	.word	0x0800ac1c

080097c0 <_localeconv_r>:
 80097c0:	4800      	ldr	r0, [pc, #0]	; (80097c4 <_localeconv_r+0x4>)
 80097c2:	4770      	bx	lr
 80097c4:	200002d8 	.word	0x200002d8

080097c8 <malloc>:
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <malloc+0xc>)
 80097ca:	4601      	mov	r1, r0
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	f000 bbef 	b.w	8009fb0 <_malloc_r>
 80097d2:	bf00      	nop
 80097d4:	20000184 	.word	0x20000184

080097d8 <memcpy>:
 80097d8:	440a      	add	r2, r1
 80097da:	4291      	cmp	r1, r2
 80097dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80097e0:	d100      	bne.n	80097e4 <memcpy+0xc>
 80097e2:	4770      	bx	lr
 80097e4:	b510      	push	{r4, lr}
 80097e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ee:	4291      	cmp	r1, r2
 80097f0:	d1f9      	bne.n	80097e6 <memcpy+0xe>
 80097f2:	bd10      	pop	{r4, pc}

080097f4 <_Balloc>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097f8:	4604      	mov	r4, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	b976      	cbnz	r6, 800981c <_Balloc+0x28>
 80097fe:	2010      	movs	r0, #16
 8009800:	f7ff ffe2 	bl	80097c8 <malloc>
 8009804:	4602      	mov	r2, r0
 8009806:	6260      	str	r0, [r4, #36]	; 0x24
 8009808:	b920      	cbnz	r0, 8009814 <_Balloc+0x20>
 800980a:	4b18      	ldr	r3, [pc, #96]	; (800986c <_Balloc+0x78>)
 800980c:	4818      	ldr	r0, [pc, #96]	; (8009870 <_Balloc+0x7c>)
 800980e:	2166      	movs	r1, #102	; 0x66
 8009810:	f000 fc38 	bl	800a084 <__assert_func>
 8009814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009818:	6006      	str	r6, [r0, #0]
 800981a:	60c6      	str	r6, [r0, #12]
 800981c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800981e:	68f3      	ldr	r3, [r6, #12]
 8009820:	b183      	cbz	r3, 8009844 <_Balloc+0x50>
 8009822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800982a:	b9b8      	cbnz	r0, 800985c <_Balloc+0x68>
 800982c:	2101      	movs	r1, #1
 800982e:	fa01 f605 	lsl.w	r6, r1, r5
 8009832:	1d72      	adds	r2, r6, #5
 8009834:	0092      	lsls	r2, r2, #2
 8009836:	4620      	mov	r0, r4
 8009838:	f000 fb5a 	bl	8009ef0 <_calloc_r>
 800983c:	b160      	cbz	r0, 8009858 <_Balloc+0x64>
 800983e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009842:	e00e      	b.n	8009862 <_Balloc+0x6e>
 8009844:	2221      	movs	r2, #33	; 0x21
 8009846:	2104      	movs	r1, #4
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fb51 	bl	8009ef0 <_calloc_r>
 800984e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009850:	60f0      	str	r0, [r6, #12]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e4      	bne.n	8009822 <_Balloc+0x2e>
 8009858:	2000      	movs	r0, #0
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	6802      	ldr	r2, [r0, #0]
 800985e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009862:	2300      	movs	r3, #0
 8009864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009868:	e7f7      	b.n	800985a <_Balloc+0x66>
 800986a:	bf00      	nop
 800986c:	0800ac29 	.word	0x0800ac29
 8009870:	0800acb0 	.word	0x0800acb0

08009874 <_Bfree>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009878:	4605      	mov	r5, r0
 800987a:	460c      	mov	r4, r1
 800987c:	b976      	cbnz	r6, 800989c <_Bfree+0x28>
 800987e:	2010      	movs	r0, #16
 8009880:	f7ff ffa2 	bl	80097c8 <malloc>
 8009884:	4602      	mov	r2, r0
 8009886:	6268      	str	r0, [r5, #36]	; 0x24
 8009888:	b920      	cbnz	r0, 8009894 <_Bfree+0x20>
 800988a:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <_Bfree+0x3c>)
 800988c:	4809      	ldr	r0, [pc, #36]	; (80098b4 <_Bfree+0x40>)
 800988e:	218a      	movs	r1, #138	; 0x8a
 8009890:	f000 fbf8 	bl	800a084 <__assert_func>
 8009894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009898:	6006      	str	r6, [r0, #0]
 800989a:	60c6      	str	r6, [r0, #12]
 800989c:	b13c      	cbz	r4, 80098ae <_Bfree+0x3a>
 800989e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098a0:	6862      	ldr	r2, [r4, #4]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098a8:	6021      	str	r1, [r4, #0]
 80098aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098ae:	bd70      	pop	{r4, r5, r6, pc}
 80098b0:	0800ac29 	.word	0x0800ac29
 80098b4:	0800acb0 	.word	0x0800acb0

080098b8 <__multadd>:
 80098b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098bc:	690e      	ldr	r6, [r1, #16]
 80098be:	4607      	mov	r7, r0
 80098c0:	4698      	mov	r8, r3
 80098c2:	460c      	mov	r4, r1
 80098c4:	f101 0014 	add.w	r0, r1, #20
 80098c8:	2300      	movs	r3, #0
 80098ca:	6805      	ldr	r5, [r0, #0]
 80098cc:	b2a9      	uxth	r1, r5
 80098ce:	fb02 8101 	mla	r1, r2, r1, r8
 80098d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80098d6:	0c2d      	lsrs	r5, r5, #16
 80098d8:	fb02 c505 	mla	r5, r2, r5, ip
 80098dc:	b289      	uxth	r1, r1
 80098de:	3301      	adds	r3, #1
 80098e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80098e4:	429e      	cmp	r6, r3
 80098e6:	f840 1b04 	str.w	r1, [r0], #4
 80098ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80098ee:	dcec      	bgt.n	80098ca <__multadd+0x12>
 80098f0:	f1b8 0f00 	cmp.w	r8, #0
 80098f4:	d022      	beq.n	800993c <__multadd+0x84>
 80098f6:	68a3      	ldr	r3, [r4, #8]
 80098f8:	42b3      	cmp	r3, r6
 80098fa:	dc19      	bgt.n	8009930 <__multadd+0x78>
 80098fc:	6861      	ldr	r1, [r4, #4]
 80098fe:	4638      	mov	r0, r7
 8009900:	3101      	adds	r1, #1
 8009902:	f7ff ff77 	bl	80097f4 <_Balloc>
 8009906:	4605      	mov	r5, r0
 8009908:	b928      	cbnz	r0, 8009916 <__multadd+0x5e>
 800990a:	4602      	mov	r2, r0
 800990c:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <__multadd+0x8c>)
 800990e:	480e      	ldr	r0, [pc, #56]	; (8009948 <__multadd+0x90>)
 8009910:	21b5      	movs	r1, #181	; 0xb5
 8009912:	f000 fbb7 	bl	800a084 <__assert_func>
 8009916:	6922      	ldr	r2, [r4, #16]
 8009918:	3202      	adds	r2, #2
 800991a:	f104 010c 	add.w	r1, r4, #12
 800991e:	0092      	lsls	r2, r2, #2
 8009920:	300c      	adds	r0, #12
 8009922:	f7ff ff59 	bl	80097d8 <memcpy>
 8009926:	4621      	mov	r1, r4
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff ffa3 	bl	8009874 <_Bfree>
 800992e:	462c      	mov	r4, r5
 8009930:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009934:	3601      	adds	r6, #1
 8009936:	f8c3 8014 	str.w	r8, [r3, #20]
 800993a:	6126      	str	r6, [r4, #16]
 800993c:	4620      	mov	r0, r4
 800993e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009942:	bf00      	nop
 8009944:	0800ac9f 	.word	0x0800ac9f
 8009948:	0800acb0 	.word	0x0800acb0

0800994c <__hi0bits>:
 800994c:	0c03      	lsrs	r3, r0, #16
 800994e:	041b      	lsls	r3, r3, #16
 8009950:	b9d3      	cbnz	r3, 8009988 <__hi0bits+0x3c>
 8009952:	0400      	lsls	r0, r0, #16
 8009954:	2310      	movs	r3, #16
 8009956:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800995a:	bf04      	itt	eq
 800995c:	0200      	lsleq	r0, r0, #8
 800995e:	3308      	addeq	r3, #8
 8009960:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009964:	bf04      	itt	eq
 8009966:	0100      	lsleq	r0, r0, #4
 8009968:	3304      	addeq	r3, #4
 800996a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800996e:	bf04      	itt	eq
 8009970:	0080      	lsleq	r0, r0, #2
 8009972:	3302      	addeq	r3, #2
 8009974:	2800      	cmp	r0, #0
 8009976:	db05      	blt.n	8009984 <__hi0bits+0x38>
 8009978:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800997c:	f103 0301 	add.w	r3, r3, #1
 8009980:	bf08      	it	eq
 8009982:	2320      	moveq	r3, #32
 8009984:	4618      	mov	r0, r3
 8009986:	4770      	bx	lr
 8009988:	2300      	movs	r3, #0
 800998a:	e7e4      	b.n	8009956 <__hi0bits+0xa>

0800998c <__lo0bits>:
 800998c:	6803      	ldr	r3, [r0, #0]
 800998e:	f013 0207 	ands.w	r2, r3, #7
 8009992:	4601      	mov	r1, r0
 8009994:	d00b      	beq.n	80099ae <__lo0bits+0x22>
 8009996:	07da      	lsls	r2, r3, #31
 8009998:	d424      	bmi.n	80099e4 <__lo0bits+0x58>
 800999a:	0798      	lsls	r0, r3, #30
 800999c:	bf49      	itett	mi
 800999e:	085b      	lsrmi	r3, r3, #1
 80099a0:	089b      	lsrpl	r3, r3, #2
 80099a2:	2001      	movmi	r0, #1
 80099a4:	600b      	strmi	r3, [r1, #0]
 80099a6:	bf5c      	itt	pl
 80099a8:	600b      	strpl	r3, [r1, #0]
 80099aa:	2002      	movpl	r0, #2
 80099ac:	4770      	bx	lr
 80099ae:	b298      	uxth	r0, r3
 80099b0:	b9b0      	cbnz	r0, 80099e0 <__lo0bits+0x54>
 80099b2:	0c1b      	lsrs	r3, r3, #16
 80099b4:	2010      	movs	r0, #16
 80099b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80099ba:	bf04      	itt	eq
 80099bc:	0a1b      	lsreq	r3, r3, #8
 80099be:	3008      	addeq	r0, #8
 80099c0:	071a      	lsls	r2, r3, #28
 80099c2:	bf04      	itt	eq
 80099c4:	091b      	lsreq	r3, r3, #4
 80099c6:	3004      	addeq	r0, #4
 80099c8:	079a      	lsls	r2, r3, #30
 80099ca:	bf04      	itt	eq
 80099cc:	089b      	lsreq	r3, r3, #2
 80099ce:	3002      	addeq	r0, #2
 80099d0:	07da      	lsls	r2, r3, #31
 80099d2:	d403      	bmi.n	80099dc <__lo0bits+0x50>
 80099d4:	085b      	lsrs	r3, r3, #1
 80099d6:	f100 0001 	add.w	r0, r0, #1
 80099da:	d005      	beq.n	80099e8 <__lo0bits+0x5c>
 80099dc:	600b      	str	r3, [r1, #0]
 80099de:	4770      	bx	lr
 80099e0:	4610      	mov	r0, r2
 80099e2:	e7e8      	b.n	80099b6 <__lo0bits+0x2a>
 80099e4:	2000      	movs	r0, #0
 80099e6:	4770      	bx	lr
 80099e8:	2020      	movs	r0, #32
 80099ea:	4770      	bx	lr

080099ec <__i2b>:
 80099ec:	b510      	push	{r4, lr}
 80099ee:	460c      	mov	r4, r1
 80099f0:	2101      	movs	r1, #1
 80099f2:	f7ff feff 	bl	80097f4 <_Balloc>
 80099f6:	4602      	mov	r2, r0
 80099f8:	b928      	cbnz	r0, 8009a06 <__i2b+0x1a>
 80099fa:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <__i2b+0x24>)
 80099fc:	4805      	ldr	r0, [pc, #20]	; (8009a14 <__i2b+0x28>)
 80099fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a02:	f000 fb3f 	bl	800a084 <__assert_func>
 8009a06:	2301      	movs	r3, #1
 8009a08:	6144      	str	r4, [r0, #20]
 8009a0a:	6103      	str	r3, [r0, #16]
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	bf00      	nop
 8009a10:	0800ac9f 	.word	0x0800ac9f
 8009a14:	0800acb0 	.word	0x0800acb0

08009a18 <__multiply>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	4614      	mov	r4, r2
 8009a1e:	690a      	ldr	r2, [r1, #16]
 8009a20:	6923      	ldr	r3, [r4, #16]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	bfb8      	it	lt
 8009a26:	460b      	movlt	r3, r1
 8009a28:	460d      	mov	r5, r1
 8009a2a:	bfbc      	itt	lt
 8009a2c:	4625      	movlt	r5, r4
 8009a2e:	461c      	movlt	r4, r3
 8009a30:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a38:	68ab      	ldr	r3, [r5, #8]
 8009a3a:	6869      	ldr	r1, [r5, #4]
 8009a3c:	eb0a 0709 	add.w	r7, sl, r9
 8009a40:	42bb      	cmp	r3, r7
 8009a42:	b085      	sub	sp, #20
 8009a44:	bfb8      	it	lt
 8009a46:	3101      	addlt	r1, #1
 8009a48:	f7ff fed4 	bl	80097f4 <_Balloc>
 8009a4c:	b930      	cbnz	r0, 8009a5c <__multiply+0x44>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	4b42      	ldr	r3, [pc, #264]	; (8009b5c <__multiply+0x144>)
 8009a52:	4843      	ldr	r0, [pc, #268]	; (8009b60 <__multiply+0x148>)
 8009a54:	f240 115d 	movw	r1, #349	; 0x15d
 8009a58:	f000 fb14 	bl	800a084 <__assert_func>
 8009a5c:	f100 0614 	add.w	r6, r0, #20
 8009a60:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a64:	4633      	mov	r3, r6
 8009a66:	2200      	movs	r2, #0
 8009a68:	4543      	cmp	r3, r8
 8009a6a:	d31e      	bcc.n	8009aaa <__multiply+0x92>
 8009a6c:	f105 0c14 	add.w	ip, r5, #20
 8009a70:	f104 0314 	add.w	r3, r4, #20
 8009a74:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a78:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a7c:	9202      	str	r2, [sp, #8]
 8009a7e:	ebac 0205 	sub.w	r2, ip, r5
 8009a82:	3a15      	subs	r2, #21
 8009a84:	f022 0203 	bic.w	r2, r2, #3
 8009a88:	3204      	adds	r2, #4
 8009a8a:	f105 0115 	add.w	r1, r5, #21
 8009a8e:	458c      	cmp	ip, r1
 8009a90:	bf38      	it	cc
 8009a92:	2204      	movcc	r2, #4
 8009a94:	9201      	str	r2, [sp, #4]
 8009a96:	9a02      	ldr	r2, [sp, #8]
 8009a98:	9303      	str	r3, [sp, #12]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d808      	bhi.n	8009ab0 <__multiply+0x98>
 8009a9e:	2f00      	cmp	r7, #0
 8009aa0:	dc55      	bgt.n	8009b4e <__multiply+0x136>
 8009aa2:	6107      	str	r7, [r0, #16]
 8009aa4:	b005      	add	sp, #20
 8009aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aaa:	f843 2b04 	str.w	r2, [r3], #4
 8009aae:	e7db      	b.n	8009a68 <__multiply+0x50>
 8009ab0:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ab4:	f1ba 0f00 	cmp.w	sl, #0
 8009ab8:	d020      	beq.n	8009afc <__multiply+0xe4>
 8009aba:	f105 0e14 	add.w	lr, r5, #20
 8009abe:	46b1      	mov	r9, r6
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009ac6:	f8d9 b000 	ldr.w	fp, [r9]
 8009aca:	b2a1      	uxth	r1, r4
 8009acc:	fa1f fb8b 	uxth.w	fp, fp
 8009ad0:	fb0a b101 	mla	r1, sl, r1, fp
 8009ad4:	4411      	add	r1, r2
 8009ad6:	f8d9 2000 	ldr.w	r2, [r9]
 8009ada:	0c24      	lsrs	r4, r4, #16
 8009adc:	0c12      	lsrs	r2, r2, #16
 8009ade:	fb0a 2404 	mla	r4, sl, r4, r2
 8009ae2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ae6:	b289      	uxth	r1, r1
 8009ae8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009aec:	45f4      	cmp	ip, lr
 8009aee:	f849 1b04 	str.w	r1, [r9], #4
 8009af2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009af6:	d8e4      	bhi.n	8009ac2 <__multiply+0xaa>
 8009af8:	9901      	ldr	r1, [sp, #4]
 8009afa:	5072      	str	r2, [r6, r1]
 8009afc:	9a03      	ldr	r2, [sp, #12]
 8009afe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b02:	3304      	adds	r3, #4
 8009b04:	f1b9 0f00 	cmp.w	r9, #0
 8009b08:	d01f      	beq.n	8009b4a <__multiply+0x132>
 8009b0a:	6834      	ldr	r4, [r6, #0]
 8009b0c:	f105 0114 	add.w	r1, r5, #20
 8009b10:	46b6      	mov	lr, r6
 8009b12:	f04f 0a00 	mov.w	sl, #0
 8009b16:	880a      	ldrh	r2, [r1, #0]
 8009b18:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b1c:	fb09 b202 	mla	r2, r9, r2, fp
 8009b20:	4492      	add	sl, r2
 8009b22:	b2a4      	uxth	r4, r4
 8009b24:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b28:	f84e 4b04 	str.w	r4, [lr], #4
 8009b2c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b30:	f8be 2000 	ldrh.w	r2, [lr]
 8009b34:	0c24      	lsrs	r4, r4, #16
 8009b36:	fb09 2404 	mla	r4, r9, r4, r2
 8009b3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b3e:	458c      	cmp	ip, r1
 8009b40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b44:	d8e7      	bhi.n	8009b16 <__multiply+0xfe>
 8009b46:	9a01      	ldr	r2, [sp, #4]
 8009b48:	50b4      	str	r4, [r6, r2]
 8009b4a:	3604      	adds	r6, #4
 8009b4c:	e7a3      	b.n	8009a96 <__multiply+0x7e>
 8009b4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1a5      	bne.n	8009aa2 <__multiply+0x8a>
 8009b56:	3f01      	subs	r7, #1
 8009b58:	e7a1      	b.n	8009a9e <__multiply+0x86>
 8009b5a:	bf00      	nop
 8009b5c:	0800ac9f 	.word	0x0800ac9f
 8009b60:	0800acb0 	.word	0x0800acb0

08009b64 <__pow5mult>:
 8009b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b68:	4615      	mov	r5, r2
 8009b6a:	f012 0203 	ands.w	r2, r2, #3
 8009b6e:	4606      	mov	r6, r0
 8009b70:	460f      	mov	r7, r1
 8009b72:	d007      	beq.n	8009b84 <__pow5mult+0x20>
 8009b74:	4c25      	ldr	r4, [pc, #148]	; (8009c0c <__pow5mult+0xa8>)
 8009b76:	3a01      	subs	r2, #1
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b7e:	f7ff fe9b 	bl	80098b8 <__multadd>
 8009b82:	4607      	mov	r7, r0
 8009b84:	10ad      	asrs	r5, r5, #2
 8009b86:	d03d      	beq.n	8009c04 <__pow5mult+0xa0>
 8009b88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b8a:	b97c      	cbnz	r4, 8009bac <__pow5mult+0x48>
 8009b8c:	2010      	movs	r0, #16
 8009b8e:	f7ff fe1b 	bl	80097c8 <malloc>
 8009b92:	4602      	mov	r2, r0
 8009b94:	6270      	str	r0, [r6, #36]	; 0x24
 8009b96:	b928      	cbnz	r0, 8009ba4 <__pow5mult+0x40>
 8009b98:	4b1d      	ldr	r3, [pc, #116]	; (8009c10 <__pow5mult+0xac>)
 8009b9a:	481e      	ldr	r0, [pc, #120]	; (8009c14 <__pow5mult+0xb0>)
 8009b9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ba0:	f000 fa70 	bl	800a084 <__assert_func>
 8009ba4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ba8:	6004      	str	r4, [r0, #0]
 8009baa:	60c4      	str	r4, [r0, #12]
 8009bac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bb4:	b94c      	cbnz	r4, 8009bca <__pow5mult+0x66>
 8009bb6:	f240 2171 	movw	r1, #625	; 0x271
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff ff16 	bl	80099ec <__i2b>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	6003      	str	r3, [r0, #0]
 8009bca:	f04f 0900 	mov.w	r9, #0
 8009bce:	07eb      	lsls	r3, r5, #31
 8009bd0:	d50a      	bpl.n	8009be8 <__pow5mult+0x84>
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f7ff ff1e 	bl	8009a18 <__multiply>
 8009bdc:	4639      	mov	r1, r7
 8009bde:	4680      	mov	r8, r0
 8009be0:	4630      	mov	r0, r6
 8009be2:	f7ff fe47 	bl	8009874 <_Bfree>
 8009be6:	4647      	mov	r7, r8
 8009be8:	106d      	asrs	r5, r5, #1
 8009bea:	d00b      	beq.n	8009c04 <__pow5mult+0xa0>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	b938      	cbnz	r0, 8009c00 <__pow5mult+0x9c>
 8009bf0:	4622      	mov	r2, r4
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7ff ff0f 	bl	8009a18 <__multiply>
 8009bfa:	6020      	str	r0, [r4, #0]
 8009bfc:	f8c0 9000 	str.w	r9, [r0]
 8009c00:	4604      	mov	r4, r0
 8009c02:	e7e4      	b.n	8009bce <__pow5mult+0x6a>
 8009c04:	4638      	mov	r0, r7
 8009c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c0a:	bf00      	nop
 8009c0c:	0800ae00 	.word	0x0800ae00
 8009c10:	0800ac29 	.word	0x0800ac29
 8009c14:	0800acb0 	.word	0x0800acb0

08009c18 <__lshift>:
 8009c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	6849      	ldr	r1, [r1, #4]
 8009c20:	6923      	ldr	r3, [r4, #16]
 8009c22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c26:	68a3      	ldr	r3, [r4, #8]
 8009c28:	4607      	mov	r7, r0
 8009c2a:	4691      	mov	r9, r2
 8009c2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c30:	f108 0601 	add.w	r6, r8, #1
 8009c34:	42b3      	cmp	r3, r6
 8009c36:	db0b      	blt.n	8009c50 <__lshift+0x38>
 8009c38:	4638      	mov	r0, r7
 8009c3a:	f7ff fddb 	bl	80097f4 <_Balloc>
 8009c3e:	4605      	mov	r5, r0
 8009c40:	b948      	cbnz	r0, 8009c56 <__lshift+0x3e>
 8009c42:	4602      	mov	r2, r0
 8009c44:	4b28      	ldr	r3, [pc, #160]	; (8009ce8 <__lshift+0xd0>)
 8009c46:	4829      	ldr	r0, [pc, #164]	; (8009cec <__lshift+0xd4>)
 8009c48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c4c:	f000 fa1a 	bl	800a084 <__assert_func>
 8009c50:	3101      	adds	r1, #1
 8009c52:	005b      	lsls	r3, r3, #1
 8009c54:	e7ee      	b.n	8009c34 <__lshift+0x1c>
 8009c56:	2300      	movs	r3, #0
 8009c58:	f100 0114 	add.w	r1, r0, #20
 8009c5c:	f100 0210 	add.w	r2, r0, #16
 8009c60:	4618      	mov	r0, r3
 8009c62:	4553      	cmp	r3, sl
 8009c64:	db33      	blt.n	8009cce <__lshift+0xb6>
 8009c66:	6920      	ldr	r0, [r4, #16]
 8009c68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c6c:	f104 0314 	add.w	r3, r4, #20
 8009c70:	f019 091f 	ands.w	r9, r9, #31
 8009c74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c7c:	d02b      	beq.n	8009cd6 <__lshift+0xbe>
 8009c7e:	f1c9 0e20 	rsb	lr, r9, #32
 8009c82:	468a      	mov	sl, r1
 8009c84:	2200      	movs	r2, #0
 8009c86:	6818      	ldr	r0, [r3, #0]
 8009c88:	fa00 f009 	lsl.w	r0, r0, r9
 8009c8c:	4302      	orrs	r2, r0
 8009c8e:	f84a 2b04 	str.w	r2, [sl], #4
 8009c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c96:	459c      	cmp	ip, r3
 8009c98:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c9c:	d8f3      	bhi.n	8009c86 <__lshift+0x6e>
 8009c9e:	ebac 0304 	sub.w	r3, ip, r4
 8009ca2:	3b15      	subs	r3, #21
 8009ca4:	f023 0303 	bic.w	r3, r3, #3
 8009ca8:	3304      	adds	r3, #4
 8009caa:	f104 0015 	add.w	r0, r4, #21
 8009cae:	4584      	cmp	ip, r0
 8009cb0:	bf38      	it	cc
 8009cb2:	2304      	movcc	r3, #4
 8009cb4:	50ca      	str	r2, [r1, r3]
 8009cb6:	b10a      	cbz	r2, 8009cbc <__lshift+0xa4>
 8009cb8:	f108 0602 	add.w	r6, r8, #2
 8009cbc:	3e01      	subs	r6, #1
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	612e      	str	r6, [r5, #16]
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	f7ff fdd6 	bl	8009874 <_Bfree>
 8009cc8:	4628      	mov	r0, r5
 8009cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cce:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	e7c5      	b.n	8009c62 <__lshift+0x4a>
 8009cd6:	3904      	subs	r1, #4
 8009cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ce0:	459c      	cmp	ip, r3
 8009ce2:	d8f9      	bhi.n	8009cd8 <__lshift+0xc0>
 8009ce4:	e7ea      	b.n	8009cbc <__lshift+0xa4>
 8009ce6:	bf00      	nop
 8009ce8:	0800ac9f 	.word	0x0800ac9f
 8009cec:	0800acb0 	.word	0x0800acb0

08009cf0 <__mcmp>:
 8009cf0:	b530      	push	{r4, r5, lr}
 8009cf2:	6902      	ldr	r2, [r0, #16]
 8009cf4:	690c      	ldr	r4, [r1, #16]
 8009cf6:	1b12      	subs	r2, r2, r4
 8009cf8:	d10e      	bne.n	8009d18 <__mcmp+0x28>
 8009cfa:	f100 0314 	add.w	r3, r0, #20
 8009cfe:	3114      	adds	r1, #20
 8009d00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d10:	42a5      	cmp	r5, r4
 8009d12:	d003      	beq.n	8009d1c <__mcmp+0x2c>
 8009d14:	d305      	bcc.n	8009d22 <__mcmp+0x32>
 8009d16:	2201      	movs	r2, #1
 8009d18:	4610      	mov	r0, r2
 8009d1a:	bd30      	pop	{r4, r5, pc}
 8009d1c:	4283      	cmp	r3, r0
 8009d1e:	d3f3      	bcc.n	8009d08 <__mcmp+0x18>
 8009d20:	e7fa      	b.n	8009d18 <__mcmp+0x28>
 8009d22:	f04f 32ff 	mov.w	r2, #4294967295
 8009d26:	e7f7      	b.n	8009d18 <__mcmp+0x28>

08009d28 <__mdiff>:
 8009d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	4606      	mov	r6, r0
 8009d30:	4611      	mov	r1, r2
 8009d32:	4620      	mov	r0, r4
 8009d34:	4617      	mov	r7, r2
 8009d36:	f7ff ffdb 	bl	8009cf0 <__mcmp>
 8009d3a:	1e05      	subs	r5, r0, #0
 8009d3c:	d110      	bne.n	8009d60 <__mdiff+0x38>
 8009d3e:	4629      	mov	r1, r5
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7ff fd57 	bl	80097f4 <_Balloc>
 8009d46:	b930      	cbnz	r0, 8009d56 <__mdiff+0x2e>
 8009d48:	4b39      	ldr	r3, [pc, #228]	; (8009e30 <__mdiff+0x108>)
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	f240 2132 	movw	r1, #562	; 0x232
 8009d50:	4838      	ldr	r0, [pc, #224]	; (8009e34 <__mdiff+0x10c>)
 8009d52:	f000 f997 	bl	800a084 <__assert_func>
 8009d56:	2301      	movs	r3, #1
 8009d58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d60:	bfa4      	itt	ge
 8009d62:	463b      	movge	r3, r7
 8009d64:	4627      	movge	r7, r4
 8009d66:	4630      	mov	r0, r6
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	bfa6      	itte	ge
 8009d6c:	461c      	movge	r4, r3
 8009d6e:	2500      	movge	r5, #0
 8009d70:	2501      	movlt	r5, #1
 8009d72:	f7ff fd3f 	bl	80097f4 <_Balloc>
 8009d76:	b920      	cbnz	r0, 8009d82 <__mdiff+0x5a>
 8009d78:	4b2d      	ldr	r3, [pc, #180]	; (8009e30 <__mdiff+0x108>)
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d80:	e7e6      	b.n	8009d50 <__mdiff+0x28>
 8009d82:	693e      	ldr	r6, [r7, #16]
 8009d84:	60c5      	str	r5, [r0, #12]
 8009d86:	6925      	ldr	r5, [r4, #16]
 8009d88:	f107 0114 	add.w	r1, r7, #20
 8009d8c:	f104 0914 	add.w	r9, r4, #20
 8009d90:	f100 0e14 	add.w	lr, r0, #20
 8009d94:	f107 0210 	add.w	r2, r7, #16
 8009d98:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d9c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009da0:	46f2      	mov	sl, lr
 8009da2:	2700      	movs	r7, #0
 8009da4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009da8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009dac:	fa1f f883 	uxth.w	r8, r3
 8009db0:	fa17 f78b 	uxtah	r7, r7, fp
 8009db4:	0c1b      	lsrs	r3, r3, #16
 8009db6:	eba7 0808 	sub.w	r8, r7, r8
 8009dba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009dc2:	fa1f f888 	uxth.w	r8, r8
 8009dc6:	141f      	asrs	r7, r3, #16
 8009dc8:	454d      	cmp	r5, r9
 8009dca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009dce:	f84a 3b04 	str.w	r3, [sl], #4
 8009dd2:	d8e7      	bhi.n	8009da4 <__mdiff+0x7c>
 8009dd4:	1b2b      	subs	r3, r5, r4
 8009dd6:	3b15      	subs	r3, #21
 8009dd8:	f023 0303 	bic.w	r3, r3, #3
 8009ddc:	3304      	adds	r3, #4
 8009dde:	3415      	adds	r4, #21
 8009de0:	42a5      	cmp	r5, r4
 8009de2:	bf38      	it	cc
 8009de4:	2304      	movcc	r3, #4
 8009de6:	4419      	add	r1, r3
 8009de8:	4473      	add	r3, lr
 8009dea:	469e      	mov	lr, r3
 8009dec:	460d      	mov	r5, r1
 8009dee:	4565      	cmp	r5, ip
 8009df0:	d30e      	bcc.n	8009e10 <__mdiff+0xe8>
 8009df2:	f10c 0203 	add.w	r2, ip, #3
 8009df6:	1a52      	subs	r2, r2, r1
 8009df8:	f022 0203 	bic.w	r2, r2, #3
 8009dfc:	3903      	subs	r1, #3
 8009dfe:	458c      	cmp	ip, r1
 8009e00:	bf38      	it	cc
 8009e02:	2200      	movcc	r2, #0
 8009e04:	441a      	add	r2, r3
 8009e06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e0a:	b17b      	cbz	r3, 8009e2c <__mdiff+0x104>
 8009e0c:	6106      	str	r6, [r0, #16]
 8009e0e:	e7a5      	b.n	8009d5c <__mdiff+0x34>
 8009e10:	f855 8b04 	ldr.w	r8, [r5], #4
 8009e14:	fa17 f488 	uxtah	r4, r7, r8
 8009e18:	1422      	asrs	r2, r4, #16
 8009e1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009e1e:	b2a4      	uxth	r4, r4
 8009e20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e24:	f84e 4b04 	str.w	r4, [lr], #4
 8009e28:	1417      	asrs	r7, r2, #16
 8009e2a:	e7e0      	b.n	8009dee <__mdiff+0xc6>
 8009e2c:	3e01      	subs	r6, #1
 8009e2e:	e7ea      	b.n	8009e06 <__mdiff+0xde>
 8009e30:	0800ac9f 	.word	0x0800ac9f
 8009e34:	0800acb0 	.word	0x0800acb0

08009e38 <__d2b>:
 8009e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e3c:	4689      	mov	r9, r1
 8009e3e:	2101      	movs	r1, #1
 8009e40:	ec57 6b10 	vmov	r6, r7, d0
 8009e44:	4690      	mov	r8, r2
 8009e46:	f7ff fcd5 	bl	80097f4 <_Balloc>
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	b930      	cbnz	r0, 8009e5c <__d2b+0x24>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	4b25      	ldr	r3, [pc, #148]	; (8009ee8 <__d2b+0xb0>)
 8009e52:	4826      	ldr	r0, [pc, #152]	; (8009eec <__d2b+0xb4>)
 8009e54:	f240 310a 	movw	r1, #778	; 0x30a
 8009e58:	f000 f914 	bl	800a084 <__assert_func>
 8009e5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e64:	bb35      	cbnz	r5, 8009eb4 <__d2b+0x7c>
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	9301      	str	r3, [sp, #4]
 8009e6a:	d028      	beq.n	8009ebe <__d2b+0x86>
 8009e6c:	4668      	mov	r0, sp
 8009e6e:	9600      	str	r6, [sp, #0]
 8009e70:	f7ff fd8c 	bl	800998c <__lo0bits>
 8009e74:	9900      	ldr	r1, [sp, #0]
 8009e76:	b300      	cbz	r0, 8009eba <__d2b+0x82>
 8009e78:	9a01      	ldr	r2, [sp, #4]
 8009e7a:	f1c0 0320 	rsb	r3, r0, #32
 8009e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e82:	430b      	orrs	r3, r1
 8009e84:	40c2      	lsrs	r2, r0
 8009e86:	6163      	str	r3, [r4, #20]
 8009e88:	9201      	str	r2, [sp, #4]
 8009e8a:	9b01      	ldr	r3, [sp, #4]
 8009e8c:	61a3      	str	r3, [r4, #24]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bf14      	ite	ne
 8009e92:	2202      	movne	r2, #2
 8009e94:	2201      	moveq	r2, #1
 8009e96:	6122      	str	r2, [r4, #16]
 8009e98:	b1d5      	cbz	r5, 8009ed0 <__d2b+0x98>
 8009e9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e9e:	4405      	add	r5, r0
 8009ea0:	f8c9 5000 	str.w	r5, [r9]
 8009ea4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ea8:	f8c8 0000 	str.w	r0, [r8]
 8009eac:	4620      	mov	r0, r4
 8009eae:	b003      	add	sp, #12
 8009eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eb8:	e7d5      	b.n	8009e66 <__d2b+0x2e>
 8009eba:	6161      	str	r1, [r4, #20]
 8009ebc:	e7e5      	b.n	8009e8a <__d2b+0x52>
 8009ebe:	a801      	add	r0, sp, #4
 8009ec0:	f7ff fd64 	bl	800998c <__lo0bits>
 8009ec4:	9b01      	ldr	r3, [sp, #4]
 8009ec6:	6163      	str	r3, [r4, #20]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	6122      	str	r2, [r4, #16]
 8009ecc:	3020      	adds	r0, #32
 8009ece:	e7e3      	b.n	8009e98 <__d2b+0x60>
 8009ed0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ed4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ed8:	f8c9 0000 	str.w	r0, [r9]
 8009edc:	6918      	ldr	r0, [r3, #16]
 8009ede:	f7ff fd35 	bl	800994c <__hi0bits>
 8009ee2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ee6:	e7df      	b.n	8009ea8 <__d2b+0x70>
 8009ee8:	0800ac9f 	.word	0x0800ac9f
 8009eec:	0800acb0 	.word	0x0800acb0

08009ef0 <_calloc_r>:
 8009ef0:	b513      	push	{r0, r1, r4, lr}
 8009ef2:	434a      	muls	r2, r1
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	9201      	str	r2, [sp, #4]
 8009ef8:	f000 f85a 	bl	8009fb0 <_malloc_r>
 8009efc:	4604      	mov	r4, r0
 8009efe:	b118      	cbz	r0, 8009f08 <_calloc_r+0x18>
 8009f00:	9a01      	ldr	r2, [sp, #4]
 8009f02:	2100      	movs	r1, #0
 8009f04:	f7fe f972 	bl	80081ec <memset>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	b002      	add	sp, #8
 8009f0c:	bd10      	pop	{r4, pc}
	...

08009f10 <_free_r>:
 8009f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f12:	2900      	cmp	r1, #0
 8009f14:	d048      	beq.n	8009fa8 <_free_r+0x98>
 8009f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f1a:	9001      	str	r0, [sp, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f22:	bfb8      	it	lt
 8009f24:	18e4      	addlt	r4, r4, r3
 8009f26:	f000 f8ef 	bl	800a108 <__malloc_lock>
 8009f2a:	4a20      	ldr	r2, [pc, #128]	; (8009fac <_free_r+0x9c>)
 8009f2c:	9801      	ldr	r0, [sp, #4]
 8009f2e:	6813      	ldr	r3, [r2, #0]
 8009f30:	4615      	mov	r5, r2
 8009f32:	b933      	cbnz	r3, 8009f42 <_free_r+0x32>
 8009f34:	6063      	str	r3, [r4, #4]
 8009f36:	6014      	str	r4, [r2, #0]
 8009f38:	b003      	add	sp, #12
 8009f3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f3e:	f000 b8e9 	b.w	800a114 <__malloc_unlock>
 8009f42:	42a3      	cmp	r3, r4
 8009f44:	d90b      	bls.n	8009f5e <_free_r+0x4e>
 8009f46:	6821      	ldr	r1, [r4, #0]
 8009f48:	1862      	adds	r2, r4, r1
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	bf04      	itt	eq
 8009f4e:	681a      	ldreq	r2, [r3, #0]
 8009f50:	685b      	ldreq	r3, [r3, #4]
 8009f52:	6063      	str	r3, [r4, #4]
 8009f54:	bf04      	itt	eq
 8009f56:	1852      	addeq	r2, r2, r1
 8009f58:	6022      	streq	r2, [r4, #0]
 8009f5a:	602c      	str	r4, [r5, #0]
 8009f5c:	e7ec      	b.n	8009f38 <_free_r+0x28>
 8009f5e:	461a      	mov	r2, r3
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	b10b      	cbz	r3, 8009f68 <_free_r+0x58>
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	d9fa      	bls.n	8009f5e <_free_r+0x4e>
 8009f68:	6811      	ldr	r1, [r2, #0]
 8009f6a:	1855      	adds	r5, r2, r1
 8009f6c:	42a5      	cmp	r5, r4
 8009f6e:	d10b      	bne.n	8009f88 <_free_r+0x78>
 8009f70:	6824      	ldr	r4, [r4, #0]
 8009f72:	4421      	add	r1, r4
 8009f74:	1854      	adds	r4, r2, r1
 8009f76:	42a3      	cmp	r3, r4
 8009f78:	6011      	str	r1, [r2, #0]
 8009f7a:	d1dd      	bne.n	8009f38 <_free_r+0x28>
 8009f7c:	681c      	ldr	r4, [r3, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	6053      	str	r3, [r2, #4]
 8009f82:	4421      	add	r1, r4
 8009f84:	6011      	str	r1, [r2, #0]
 8009f86:	e7d7      	b.n	8009f38 <_free_r+0x28>
 8009f88:	d902      	bls.n	8009f90 <_free_r+0x80>
 8009f8a:	230c      	movs	r3, #12
 8009f8c:	6003      	str	r3, [r0, #0]
 8009f8e:	e7d3      	b.n	8009f38 <_free_r+0x28>
 8009f90:	6825      	ldr	r5, [r4, #0]
 8009f92:	1961      	adds	r1, r4, r5
 8009f94:	428b      	cmp	r3, r1
 8009f96:	bf04      	itt	eq
 8009f98:	6819      	ldreq	r1, [r3, #0]
 8009f9a:	685b      	ldreq	r3, [r3, #4]
 8009f9c:	6063      	str	r3, [r4, #4]
 8009f9e:	bf04      	itt	eq
 8009fa0:	1949      	addeq	r1, r1, r5
 8009fa2:	6021      	streq	r1, [r4, #0]
 8009fa4:	6054      	str	r4, [r2, #4]
 8009fa6:	e7c7      	b.n	8009f38 <_free_r+0x28>
 8009fa8:	b003      	add	sp, #12
 8009faa:	bd30      	pop	{r4, r5, pc}
 8009fac:	200005a8 	.word	0x200005a8

08009fb0 <_malloc_r>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	1ccd      	adds	r5, r1, #3
 8009fb4:	f025 0503 	bic.w	r5, r5, #3
 8009fb8:	3508      	adds	r5, #8
 8009fba:	2d0c      	cmp	r5, #12
 8009fbc:	bf38      	it	cc
 8009fbe:	250c      	movcc	r5, #12
 8009fc0:	2d00      	cmp	r5, #0
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	db01      	blt.n	8009fca <_malloc_r+0x1a>
 8009fc6:	42a9      	cmp	r1, r5
 8009fc8:	d903      	bls.n	8009fd2 <_malloc_r+0x22>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	6033      	str	r3, [r6, #0]
 8009fce:	2000      	movs	r0, #0
 8009fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd2:	f000 f899 	bl	800a108 <__malloc_lock>
 8009fd6:	4921      	ldr	r1, [pc, #132]	; (800a05c <_malloc_r+0xac>)
 8009fd8:	680a      	ldr	r2, [r1, #0]
 8009fda:	4614      	mov	r4, r2
 8009fdc:	b99c      	cbnz	r4, 800a006 <_malloc_r+0x56>
 8009fde:	4f20      	ldr	r7, [pc, #128]	; (800a060 <_malloc_r+0xb0>)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	b923      	cbnz	r3, 8009fee <_malloc_r+0x3e>
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	f000 f83c 	bl	800a064 <_sbrk_r>
 8009fec:	6038      	str	r0, [r7, #0]
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f000 f837 	bl	800a064 <_sbrk_r>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	d123      	bne.n	800a042 <_malloc_r+0x92>
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	6033      	str	r3, [r6, #0]
 8009ffe:	4630      	mov	r0, r6
 800a000:	f000 f888 	bl	800a114 <__malloc_unlock>
 800a004:	e7e3      	b.n	8009fce <_malloc_r+0x1e>
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	1b5b      	subs	r3, r3, r5
 800a00a:	d417      	bmi.n	800a03c <_malloc_r+0x8c>
 800a00c:	2b0b      	cmp	r3, #11
 800a00e:	d903      	bls.n	800a018 <_malloc_r+0x68>
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	441c      	add	r4, r3
 800a014:	6025      	str	r5, [r4, #0]
 800a016:	e004      	b.n	800a022 <_malloc_r+0x72>
 800a018:	6863      	ldr	r3, [r4, #4]
 800a01a:	42a2      	cmp	r2, r4
 800a01c:	bf0c      	ite	eq
 800a01e:	600b      	streq	r3, [r1, #0]
 800a020:	6053      	strne	r3, [r2, #4]
 800a022:	4630      	mov	r0, r6
 800a024:	f000 f876 	bl	800a114 <__malloc_unlock>
 800a028:	f104 000b 	add.w	r0, r4, #11
 800a02c:	1d23      	adds	r3, r4, #4
 800a02e:	f020 0007 	bic.w	r0, r0, #7
 800a032:	1ac2      	subs	r2, r0, r3
 800a034:	d0cc      	beq.n	8009fd0 <_malloc_r+0x20>
 800a036:	1a1b      	subs	r3, r3, r0
 800a038:	50a3      	str	r3, [r4, r2]
 800a03a:	e7c9      	b.n	8009fd0 <_malloc_r+0x20>
 800a03c:	4622      	mov	r2, r4
 800a03e:	6864      	ldr	r4, [r4, #4]
 800a040:	e7cc      	b.n	8009fdc <_malloc_r+0x2c>
 800a042:	1cc4      	adds	r4, r0, #3
 800a044:	f024 0403 	bic.w	r4, r4, #3
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d0e3      	beq.n	800a014 <_malloc_r+0x64>
 800a04c:	1a21      	subs	r1, r4, r0
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 f808 	bl	800a064 <_sbrk_r>
 800a054:	3001      	adds	r0, #1
 800a056:	d1dd      	bne.n	800a014 <_malloc_r+0x64>
 800a058:	e7cf      	b.n	8009ffa <_malloc_r+0x4a>
 800a05a:	bf00      	nop
 800a05c:	200005a8 	.word	0x200005a8
 800a060:	200005ac 	.word	0x200005ac

0800a064 <_sbrk_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4d06      	ldr	r5, [pc, #24]	; (800a080 <_sbrk_r+0x1c>)
 800a068:	2300      	movs	r3, #0
 800a06a:	4604      	mov	r4, r0
 800a06c:	4608      	mov	r0, r1
 800a06e:	602b      	str	r3, [r5, #0]
 800a070:	f7f7 fb5e 	bl	8001730 <_sbrk>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_sbrk_r+0x1a>
 800a078:	682b      	ldr	r3, [r5, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_sbrk_r+0x1a>
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	20009c24 	.word	0x20009c24

0800a084 <__assert_func>:
 800a084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a086:	4614      	mov	r4, r2
 800a088:	461a      	mov	r2, r3
 800a08a:	4b09      	ldr	r3, [pc, #36]	; (800a0b0 <__assert_func+0x2c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4605      	mov	r5, r0
 800a090:	68d8      	ldr	r0, [r3, #12]
 800a092:	b14c      	cbz	r4, 800a0a8 <__assert_func+0x24>
 800a094:	4b07      	ldr	r3, [pc, #28]	; (800a0b4 <__assert_func+0x30>)
 800a096:	9100      	str	r1, [sp, #0]
 800a098:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a09c:	4906      	ldr	r1, [pc, #24]	; (800a0b8 <__assert_func+0x34>)
 800a09e:	462b      	mov	r3, r5
 800a0a0:	f000 f80e 	bl	800a0c0 <fiprintf>
 800a0a4:	f000 fa64 	bl	800a570 <abort>
 800a0a8:	4b04      	ldr	r3, [pc, #16]	; (800a0bc <__assert_func+0x38>)
 800a0aa:	461c      	mov	r4, r3
 800a0ac:	e7f3      	b.n	800a096 <__assert_func+0x12>
 800a0ae:	bf00      	nop
 800a0b0:	20000184 	.word	0x20000184
 800a0b4:	0800ae0c 	.word	0x0800ae0c
 800a0b8:	0800ae19 	.word	0x0800ae19
 800a0bc:	0800ae47 	.word	0x0800ae47

0800a0c0 <fiprintf>:
 800a0c0:	b40e      	push	{r1, r2, r3}
 800a0c2:	b503      	push	{r0, r1, lr}
 800a0c4:	4601      	mov	r1, r0
 800a0c6:	ab03      	add	r3, sp, #12
 800a0c8:	4805      	ldr	r0, [pc, #20]	; (800a0e0 <fiprintf+0x20>)
 800a0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ce:	6800      	ldr	r0, [r0, #0]
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	f000 f84f 	bl	800a174 <_vfiprintf_r>
 800a0d6:	b002      	add	sp, #8
 800a0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0dc:	b003      	add	sp, #12
 800a0de:	4770      	bx	lr
 800a0e0:	20000184 	.word	0x20000184

0800a0e4 <__ascii_mbtowc>:
 800a0e4:	b082      	sub	sp, #8
 800a0e6:	b901      	cbnz	r1, 800a0ea <__ascii_mbtowc+0x6>
 800a0e8:	a901      	add	r1, sp, #4
 800a0ea:	b142      	cbz	r2, 800a0fe <__ascii_mbtowc+0x1a>
 800a0ec:	b14b      	cbz	r3, 800a102 <__ascii_mbtowc+0x1e>
 800a0ee:	7813      	ldrb	r3, [r2, #0]
 800a0f0:	600b      	str	r3, [r1, #0]
 800a0f2:	7812      	ldrb	r2, [r2, #0]
 800a0f4:	1e10      	subs	r0, r2, #0
 800a0f6:	bf18      	it	ne
 800a0f8:	2001      	movne	r0, #1
 800a0fa:	b002      	add	sp, #8
 800a0fc:	4770      	bx	lr
 800a0fe:	4610      	mov	r0, r2
 800a100:	e7fb      	b.n	800a0fa <__ascii_mbtowc+0x16>
 800a102:	f06f 0001 	mvn.w	r0, #1
 800a106:	e7f8      	b.n	800a0fa <__ascii_mbtowc+0x16>

0800a108 <__malloc_lock>:
 800a108:	4801      	ldr	r0, [pc, #4]	; (800a110 <__malloc_lock+0x8>)
 800a10a:	f000 bbf1 	b.w	800a8f0 <__retarget_lock_acquire_recursive>
 800a10e:	bf00      	nop
 800a110:	20009c2c 	.word	0x20009c2c

0800a114 <__malloc_unlock>:
 800a114:	4801      	ldr	r0, [pc, #4]	; (800a11c <__malloc_unlock+0x8>)
 800a116:	f000 bbec 	b.w	800a8f2 <__retarget_lock_release_recursive>
 800a11a:	bf00      	nop
 800a11c:	20009c2c 	.word	0x20009c2c

0800a120 <__sfputc_r>:
 800a120:	6893      	ldr	r3, [r2, #8]
 800a122:	3b01      	subs	r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	b410      	push	{r4}
 800a128:	6093      	str	r3, [r2, #8]
 800a12a:	da08      	bge.n	800a13e <__sfputc_r+0x1e>
 800a12c:	6994      	ldr	r4, [r2, #24]
 800a12e:	42a3      	cmp	r3, r4
 800a130:	db01      	blt.n	800a136 <__sfputc_r+0x16>
 800a132:	290a      	cmp	r1, #10
 800a134:	d103      	bne.n	800a13e <__sfputc_r+0x1e>
 800a136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a13a:	f000 b94b 	b.w	800a3d4 <__swbuf_r>
 800a13e:	6813      	ldr	r3, [r2, #0]
 800a140:	1c58      	adds	r0, r3, #1
 800a142:	6010      	str	r0, [r2, #0]
 800a144:	7019      	strb	r1, [r3, #0]
 800a146:	4608      	mov	r0, r1
 800a148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <__sfputs_r>:
 800a14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a150:	4606      	mov	r6, r0
 800a152:	460f      	mov	r7, r1
 800a154:	4614      	mov	r4, r2
 800a156:	18d5      	adds	r5, r2, r3
 800a158:	42ac      	cmp	r4, r5
 800a15a:	d101      	bne.n	800a160 <__sfputs_r+0x12>
 800a15c:	2000      	movs	r0, #0
 800a15e:	e007      	b.n	800a170 <__sfputs_r+0x22>
 800a160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a164:	463a      	mov	r2, r7
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ffda 	bl	800a120 <__sfputc_r>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d1f3      	bne.n	800a158 <__sfputs_r+0xa>
 800a170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a174 <_vfiprintf_r>:
 800a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a178:	460d      	mov	r5, r1
 800a17a:	b09d      	sub	sp, #116	; 0x74
 800a17c:	4614      	mov	r4, r2
 800a17e:	4698      	mov	r8, r3
 800a180:	4606      	mov	r6, r0
 800a182:	b118      	cbz	r0, 800a18c <_vfiprintf_r+0x18>
 800a184:	6983      	ldr	r3, [r0, #24]
 800a186:	b90b      	cbnz	r3, 800a18c <_vfiprintf_r+0x18>
 800a188:	f000 fb14 	bl	800a7b4 <__sinit>
 800a18c:	4b89      	ldr	r3, [pc, #548]	; (800a3b4 <_vfiprintf_r+0x240>)
 800a18e:	429d      	cmp	r5, r3
 800a190:	d11b      	bne.n	800a1ca <_vfiprintf_r+0x56>
 800a192:	6875      	ldr	r5, [r6, #4]
 800a194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a196:	07d9      	lsls	r1, r3, #31
 800a198:	d405      	bmi.n	800a1a6 <_vfiprintf_r+0x32>
 800a19a:	89ab      	ldrh	r3, [r5, #12]
 800a19c:	059a      	lsls	r2, r3, #22
 800a19e:	d402      	bmi.n	800a1a6 <_vfiprintf_r+0x32>
 800a1a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1a2:	f000 fba5 	bl	800a8f0 <__retarget_lock_acquire_recursive>
 800a1a6:	89ab      	ldrh	r3, [r5, #12]
 800a1a8:	071b      	lsls	r3, r3, #28
 800a1aa:	d501      	bpl.n	800a1b0 <_vfiprintf_r+0x3c>
 800a1ac:	692b      	ldr	r3, [r5, #16]
 800a1ae:	b9eb      	cbnz	r3, 800a1ec <_vfiprintf_r+0x78>
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f000 f96e 	bl	800a494 <__swsetup_r>
 800a1b8:	b1c0      	cbz	r0, 800a1ec <_vfiprintf_r+0x78>
 800a1ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1bc:	07dc      	lsls	r4, r3, #31
 800a1be:	d50e      	bpl.n	800a1de <_vfiprintf_r+0x6a>
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c4:	b01d      	add	sp, #116	; 0x74
 800a1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ca:	4b7b      	ldr	r3, [pc, #492]	; (800a3b8 <_vfiprintf_r+0x244>)
 800a1cc:	429d      	cmp	r5, r3
 800a1ce:	d101      	bne.n	800a1d4 <_vfiprintf_r+0x60>
 800a1d0:	68b5      	ldr	r5, [r6, #8]
 800a1d2:	e7df      	b.n	800a194 <_vfiprintf_r+0x20>
 800a1d4:	4b79      	ldr	r3, [pc, #484]	; (800a3bc <_vfiprintf_r+0x248>)
 800a1d6:	429d      	cmp	r5, r3
 800a1d8:	bf08      	it	eq
 800a1da:	68f5      	ldreq	r5, [r6, #12]
 800a1dc:	e7da      	b.n	800a194 <_vfiprintf_r+0x20>
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	0598      	lsls	r0, r3, #22
 800a1e2:	d4ed      	bmi.n	800a1c0 <_vfiprintf_r+0x4c>
 800a1e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1e6:	f000 fb84 	bl	800a8f2 <__retarget_lock_release_recursive>
 800a1ea:	e7e9      	b.n	800a1c0 <_vfiprintf_r+0x4c>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1fa:	2330      	movs	r3, #48	; 0x30
 800a1fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a3c0 <_vfiprintf_r+0x24c>
 800a200:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a204:	f04f 0901 	mov.w	r9, #1
 800a208:	4623      	mov	r3, r4
 800a20a:	469a      	mov	sl, r3
 800a20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a210:	b10a      	cbz	r2, 800a216 <_vfiprintf_r+0xa2>
 800a212:	2a25      	cmp	r2, #37	; 0x25
 800a214:	d1f9      	bne.n	800a20a <_vfiprintf_r+0x96>
 800a216:	ebba 0b04 	subs.w	fp, sl, r4
 800a21a:	d00b      	beq.n	800a234 <_vfiprintf_r+0xc0>
 800a21c:	465b      	mov	r3, fp
 800a21e:	4622      	mov	r2, r4
 800a220:	4629      	mov	r1, r5
 800a222:	4630      	mov	r0, r6
 800a224:	f7ff ff93 	bl	800a14e <__sfputs_r>
 800a228:	3001      	adds	r0, #1
 800a22a:	f000 80aa 	beq.w	800a382 <_vfiprintf_r+0x20e>
 800a22e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a230:	445a      	add	r2, fp
 800a232:	9209      	str	r2, [sp, #36]	; 0x24
 800a234:	f89a 3000 	ldrb.w	r3, [sl]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 80a2 	beq.w	800a382 <_vfiprintf_r+0x20e>
 800a23e:	2300      	movs	r3, #0
 800a240:	f04f 32ff 	mov.w	r2, #4294967295
 800a244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a248:	f10a 0a01 	add.w	sl, sl, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	9307      	str	r3, [sp, #28]
 800a250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a254:	931a      	str	r3, [sp, #104]	; 0x68
 800a256:	4654      	mov	r4, sl
 800a258:	2205      	movs	r2, #5
 800a25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25e:	4858      	ldr	r0, [pc, #352]	; (800a3c0 <_vfiprintf_r+0x24c>)
 800a260:	f7f5 ffc6 	bl	80001f0 <memchr>
 800a264:	9a04      	ldr	r2, [sp, #16]
 800a266:	b9d8      	cbnz	r0, 800a2a0 <_vfiprintf_r+0x12c>
 800a268:	06d1      	lsls	r1, r2, #27
 800a26a:	bf44      	itt	mi
 800a26c:	2320      	movmi	r3, #32
 800a26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a272:	0713      	lsls	r3, r2, #28
 800a274:	bf44      	itt	mi
 800a276:	232b      	movmi	r3, #43	; 0x2b
 800a278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a27c:	f89a 3000 	ldrb.w	r3, [sl]
 800a280:	2b2a      	cmp	r3, #42	; 0x2a
 800a282:	d015      	beq.n	800a2b0 <_vfiprintf_r+0x13c>
 800a284:	9a07      	ldr	r2, [sp, #28]
 800a286:	4654      	mov	r4, sl
 800a288:	2000      	movs	r0, #0
 800a28a:	f04f 0c0a 	mov.w	ip, #10
 800a28e:	4621      	mov	r1, r4
 800a290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a294:	3b30      	subs	r3, #48	; 0x30
 800a296:	2b09      	cmp	r3, #9
 800a298:	d94e      	bls.n	800a338 <_vfiprintf_r+0x1c4>
 800a29a:	b1b0      	cbz	r0, 800a2ca <_vfiprintf_r+0x156>
 800a29c:	9207      	str	r2, [sp, #28]
 800a29e:	e014      	b.n	800a2ca <_vfiprintf_r+0x156>
 800a2a0:	eba0 0308 	sub.w	r3, r0, r8
 800a2a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	46a2      	mov	sl, r4
 800a2ae:	e7d2      	b.n	800a256 <_vfiprintf_r+0xe2>
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	1d19      	adds	r1, r3, #4
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	9103      	str	r1, [sp, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bfbb      	ittet	lt
 800a2bc:	425b      	neglt	r3, r3
 800a2be:	f042 0202 	orrlt.w	r2, r2, #2
 800a2c2:	9307      	strge	r3, [sp, #28]
 800a2c4:	9307      	strlt	r3, [sp, #28]
 800a2c6:	bfb8      	it	lt
 800a2c8:	9204      	strlt	r2, [sp, #16]
 800a2ca:	7823      	ldrb	r3, [r4, #0]
 800a2cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a2ce:	d10c      	bne.n	800a2ea <_vfiprintf_r+0x176>
 800a2d0:	7863      	ldrb	r3, [r4, #1]
 800a2d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d4:	d135      	bne.n	800a342 <_vfiprintf_r+0x1ce>
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	1d1a      	adds	r2, r3, #4
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	9203      	str	r2, [sp, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	bfb8      	it	lt
 800a2e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2e6:	3402      	adds	r4, #2
 800a2e8:	9305      	str	r3, [sp, #20]
 800a2ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3d0 <_vfiprintf_r+0x25c>
 800a2ee:	7821      	ldrb	r1, [r4, #0]
 800a2f0:	2203      	movs	r2, #3
 800a2f2:	4650      	mov	r0, sl
 800a2f4:	f7f5 ff7c 	bl	80001f0 <memchr>
 800a2f8:	b140      	cbz	r0, 800a30c <_vfiprintf_r+0x198>
 800a2fa:	2340      	movs	r3, #64	; 0x40
 800a2fc:	eba0 000a 	sub.w	r0, r0, sl
 800a300:	fa03 f000 	lsl.w	r0, r3, r0
 800a304:	9b04      	ldr	r3, [sp, #16]
 800a306:	4303      	orrs	r3, r0
 800a308:	3401      	adds	r4, #1
 800a30a:	9304      	str	r3, [sp, #16]
 800a30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a310:	482c      	ldr	r0, [pc, #176]	; (800a3c4 <_vfiprintf_r+0x250>)
 800a312:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a316:	2206      	movs	r2, #6
 800a318:	f7f5 ff6a 	bl	80001f0 <memchr>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d03f      	beq.n	800a3a0 <_vfiprintf_r+0x22c>
 800a320:	4b29      	ldr	r3, [pc, #164]	; (800a3c8 <_vfiprintf_r+0x254>)
 800a322:	bb1b      	cbnz	r3, 800a36c <_vfiprintf_r+0x1f8>
 800a324:	9b03      	ldr	r3, [sp, #12]
 800a326:	3307      	adds	r3, #7
 800a328:	f023 0307 	bic.w	r3, r3, #7
 800a32c:	3308      	adds	r3, #8
 800a32e:	9303      	str	r3, [sp, #12]
 800a330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a332:	443b      	add	r3, r7
 800a334:	9309      	str	r3, [sp, #36]	; 0x24
 800a336:	e767      	b.n	800a208 <_vfiprintf_r+0x94>
 800a338:	fb0c 3202 	mla	r2, ip, r2, r3
 800a33c:	460c      	mov	r4, r1
 800a33e:	2001      	movs	r0, #1
 800a340:	e7a5      	b.n	800a28e <_vfiprintf_r+0x11a>
 800a342:	2300      	movs	r3, #0
 800a344:	3401      	adds	r4, #1
 800a346:	9305      	str	r3, [sp, #20]
 800a348:	4619      	mov	r1, r3
 800a34a:	f04f 0c0a 	mov.w	ip, #10
 800a34e:	4620      	mov	r0, r4
 800a350:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a354:	3a30      	subs	r2, #48	; 0x30
 800a356:	2a09      	cmp	r2, #9
 800a358:	d903      	bls.n	800a362 <_vfiprintf_r+0x1ee>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d0c5      	beq.n	800a2ea <_vfiprintf_r+0x176>
 800a35e:	9105      	str	r1, [sp, #20]
 800a360:	e7c3      	b.n	800a2ea <_vfiprintf_r+0x176>
 800a362:	fb0c 2101 	mla	r1, ip, r1, r2
 800a366:	4604      	mov	r4, r0
 800a368:	2301      	movs	r3, #1
 800a36a:	e7f0      	b.n	800a34e <_vfiprintf_r+0x1da>
 800a36c:	ab03      	add	r3, sp, #12
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	462a      	mov	r2, r5
 800a372:	4b16      	ldr	r3, [pc, #88]	; (800a3cc <_vfiprintf_r+0x258>)
 800a374:	a904      	add	r1, sp, #16
 800a376:	4630      	mov	r0, r6
 800a378:	f7fd ffe0 	bl	800833c <_printf_float>
 800a37c:	4607      	mov	r7, r0
 800a37e:	1c78      	adds	r0, r7, #1
 800a380:	d1d6      	bne.n	800a330 <_vfiprintf_r+0x1bc>
 800a382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a384:	07d9      	lsls	r1, r3, #31
 800a386:	d405      	bmi.n	800a394 <_vfiprintf_r+0x220>
 800a388:	89ab      	ldrh	r3, [r5, #12]
 800a38a:	059a      	lsls	r2, r3, #22
 800a38c:	d402      	bmi.n	800a394 <_vfiprintf_r+0x220>
 800a38e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a390:	f000 faaf 	bl	800a8f2 <__retarget_lock_release_recursive>
 800a394:	89ab      	ldrh	r3, [r5, #12]
 800a396:	065b      	lsls	r3, r3, #25
 800a398:	f53f af12 	bmi.w	800a1c0 <_vfiprintf_r+0x4c>
 800a39c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a39e:	e711      	b.n	800a1c4 <_vfiprintf_r+0x50>
 800a3a0:	ab03      	add	r3, sp, #12
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	462a      	mov	r2, r5
 800a3a6:	4b09      	ldr	r3, [pc, #36]	; (800a3cc <_vfiprintf_r+0x258>)
 800a3a8:	a904      	add	r1, sp, #16
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f7fe fa6a 	bl	8008884 <_printf_i>
 800a3b0:	e7e4      	b.n	800a37c <_vfiprintf_r+0x208>
 800a3b2:	bf00      	nop
 800a3b4:	0800af84 	.word	0x0800af84
 800a3b8:	0800afa4 	.word	0x0800afa4
 800a3bc:	0800af64 	.word	0x0800af64
 800a3c0:	0800ae52 	.word	0x0800ae52
 800a3c4:	0800ae5c 	.word	0x0800ae5c
 800a3c8:	0800833d 	.word	0x0800833d
 800a3cc:	0800a14f 	.word	0x0800a14f
 800a3d0:	0800ae58 	.word	0x0800ae58

0800a3d4 <__swbuf_r>:
 800a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d6:	460e      	mov	r6, r1
 800a3d8:	4614      	mov	r4, r2
 800a3da:	4605      	mov	r5, r0
 800a3dc:	b118      	cbz	r0, 800a3e6 <__swbuf_r+0x12>
 800a3de:	6983      	ldr	r3, [r0, #24]
 800a3e0:	b90b      	cbnz	r3, 800a3e6 <__swbuf_r+0x12>
 800a3e2:	f000 f9e7 	bl	800a7b4 <__sinit>
 800a3e6:	4b21      	ldr	r3, [pc, #132]	; (800a46c <__swbuf_r+0x98>)
 800a3e8:	429c      	cmp	r4, r3
 800a3ea:	d12b      	bne.n	800a444 <__swbuf_r+0x70>
 800a3ec:	686c      	ldr	r4, [r5, #4]
 800a3ee:	69a3      	ldr	r3, [r4, #24]
 800a3f0:	60a3      	str	r3, [r4, #8]
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	071a      	lsls	r2, r3, #28
 800a3f6:	d52f      	bpl.n	800a458 <__swbuf_r+0x84>
 800a3f8:	6923      	ldr	r3, [r4, #16]
 800a3fa:	b36b      	cbz	r3, 800a458 <__swbuf_r+0x84>
 800a3fc:	6923      	ldr	r3, [r4, #16]
 800a3fe:	6820      	ldr	r0, [r4, #0]
 800a400:	1ac0      	subs	r0, r0, r3
 800a402:	6963      	ldr	r3, [r4, #20]
 800a404:	b2f6      	uxtb	r6, r6
 800a406:	4283      	cmp	r3, r0
 800a408:	4637      	mov	r7, r6
 800a40a:	dc04      	bgt.n	800a416 <__swbuf_r+0x42>
 800a40c:	4621      	mov	r1, r4
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 f93c 	bl	800a68c <_fflush_r>
 800a414:	bb30      	cbnz	r0, 800a464 <__swbuf_r+0x90>
 800a416:	68a3      	ldr	r3, [r4, #8]
 800a418:	3b01      	subs	r3, #1
 800a41a:	60a3      	str	r3, [r4, #8]
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	6022      	str	r2, [r4, #0]
 800a422:	701e      	strb	r6, [r3, #0]
 800a424:	6963      	ldr	r3, [r4, #20]
 800a426:	3001      	adds	r0, #1
 800a428:	4283      	cmp	r3, r0
 800a42a:	d004      	beq.n	800a436 <__swbuf_r+0x62>
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	07db      	lsls	r3, r3, #31
 800a430:	d506      	bpl.n	800a440 <__swbuf_r+0x6c>
 800a432:	2e0a      	cmp	r6, #10
 800a434:	d104      	bne.n	800a440 <__swbuf_r+0x6c>
 800a436:	4621      	mov	r1, r4
 800a438:	4628      	mov	r0, r5
 800a43a:	f000 f927 	bl	800a68c <_fflush_r>
 800a43e:	b988      	cbnz	r0, 800a464 <__swbuf_r+0x90>
 800a440:	4638      	mov	r0, r7
 800a442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a444:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <__swbuf_r+0x9c>)
 800a446:	429c      	cmp	r4, r3
 800a448:	d101      	bne.n	800a44e <__swbuf_r+0x7a>
 800a44a:	68ac      	ldr	r4, [r5, #8]
 800a44c:	e7cf      	b.n	800a3ee <__swbuf_r+0x1a>
 800a44e:	4b09      	ldr	r3, [pc, #36]	; (800a474 <__swbuf_r+0xa0>)
 800a450:	429c      	cmp	r4, r3
 800a452:	bf08      	it	eq
 800a454:	68ec      	ldreq	r4, [r5, #12]
 800a456:	e7ca      	b.n	800a3ee <__swbuf_r+0x1a>
 800a458:	4621      	mov	r1, r4
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 f81a 	bl	800a494 <__swsetup_r>
 800a460:	2800      	cmp	r0, #0
 800a462:	d0cb      	beq.n	800a3fc <__swbuf_r+0x28>
 800a464:	f04f 37ff 	mov.w	r7, #4294967295
 800a468:	e7ea      	b.n	800a440 <__swbuf_r+0x6c>
 800a46a:	bf00      	nop
 800a46c:	0800af84 	.word	0x0800af84
 800a470:	0800afa4 	.word	0x0800afa4
 800a474:	0800af64 	.word	0x0800af64

0800a478 <__ascii_wctomb>:
 800a478:	b149      	cbz	r1, 800a48e <__ascii_wctomb+0x16>
 800a47a:	2aff      	cmp	r2, #255	; 0xff
 800a47c:	bf85      	ittet	hi
 800a47e:	238a      	movhi	r3, #138	; 0x8a
 800a480:	6003      	strhi	r3, [r0, #0]
 800a482:	700a      	strbls	r2, [r1, #0]
 800a484:	f04f 30ff 	movhi.w	r0, #4294967295
 800a488:	bf98      	it	ls
 800a48a:	2001      	movls	r0, #1
 800a48c:	4770      	bx	lr
 800a48e:	4608      	mov	r0, r1
 800a490:	4770      	bx	lr
	...

0800a494 <__swsetup_r>:
 800a494:	4b32      	ldr	r3, [pc, #200]	; (800a560 <__swsetup_r+0xcc>)
 800a496:	b570      	push	{r4, r5, r6, lr}
 800a498:	681d      	ldr	r5, [r3, #0]
 800a49a:	4606      	mov	r6, r0
 800a49c:	460c      	mov	r4, r1
 800a49e:	b125      	cbz	r5, 800a4aa <__swsetup_r+0x16>
 800a4a0:	69ab      	ldr	r3, [r5, #24]
 800a4a2:	b913      	cbnz	r3, 800a4aa <__swsetup_r+0x16>
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f000 f985 	bl	800a7b4 <__sinit>
 800a4aa:	4b2e      	ldr	r3, [pc, #184]	; (800a564 <__swsetup_r+0xd0>)
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	d10f      	bne.n	800a4d0 <__swsetup_r+0x3c>
 800a4b0:	686c      	ldr	r4, [r5, #4]
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4b8:	0719      	lsls	r1, r3, #28
 800a4ba:	d42c      	bmi.n	800a516 <__swsetup_r+0x82>
 800a4bc:	06dd      	lsls	r5, r3, #27
 800a4be:	d411      	bmi.n	800a4e4 <__swsetup_r+0x50>
 800a4c0:	2309      	movs	r3, #9
 800a4c2:	6033      	str	r3, [r6, #0]
 800a4c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4c8:	81a3      	strh	r3, [r4, #12]
 800a4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ce:	e03e      	b.n	800a54e <__swsetup_r+0xba>
 800a4d0:	4b25      	ldr	r3, [pc, #148]	; (800a568 <__swsetup_r+0xd4>)
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d101      	bne.n	800a4da <__swsetup_r+0x46>
 800a4d6:	68ac      	ldr	r4, [r5, #8]
 800a4d8:	e7eb      	b.n	800a4b2 <__swsetup_r+0x1e>
 800a4da:	4b24      	ldr	r3, [pc, #144]	; (800a56c <__swsetup_r+0xd8>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	bf08      	it	eq
 800a4e0:	68ec      	ldreq	r4, [r5, #12]
 800a4e2:	e7e6      	b.n	800a4b2 <__swsetup_r+0x1e>
 800a4e4:	0758      	lsls	r0, r3, #29
 800a4e6:	d512      	bpl.n	800a50e <__swsetup_r+0x7a>
 800a4e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ea:	b141      	cbz	r1, 800a4fe <__swsetup_r+0x6a>
 800a4ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4f0:	4299      	cmp	r1, r3
 800a4f2:	d002      	beq.n	800a4fa <__swsetup_r+0x66>
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f7ff fd0b 	bl	8009f10 <_free_r>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	6363      	str	r3, [r4, #52]	; 0x34
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	2300      	movs	r3, #0
 800a508:	6063      	str	r3, [r4, #4]
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	f043 0308 	orr.w	r3, r3, #8
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	6923      	ldr	r3, [r4, #16]
 800a518:	b94b      	cbnz	r3, 800a52e <__swsetup_r+0x9a>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a524:	d003      	beq.n	800a52e <__swsetup_r+0x9a>
 800a526:	4621      	mov	r1, r4
 800a528:	4630      	mov	r0, r6
 800a52a:	f000 fa07 	bl	800a93c <__smakebuf_r>
 800a52e:	89a0      	ldrh	r0, [r4, #12]
 800a530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a534:	f010 0301 	ands.w	r3, r0, #1
 800a538:	d00a      	beq.n	800a550 <__swsetup_r+0xbc>
 800a53a:	2300      	movs	r3, #0
 800a53c:	60a3      	str	r3, [r4, #8]
 800a53e:	6963      	ldr	r3, [r4, #20]
 800a540:	425b      	negs	r3, r3
 800a542:	61a3      	str	r3, [r4, #24]
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	b943      	cbnz	r3, 800a55a <__swsetup_r+0xc6>
 800a548:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a54c:	d1ba      	bne.n	800a4c4 <__swsetup_r+0x30>
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	0781      	lsls	r1, r0, #30
 800a552:	bf58      	it	pl
 800a554:	6963      	ldrpl	r3, [r4, #20]
 800a556:	60a3      	str	r3, [r4, #8]
 800a558:	e7f4      	b.n	800a544 <__swsetup_r+0xb0>
 800a55a:	2000      	movs	r0, #0
 800a55c:	e7f7      	b.n	800a54e <__swsetup_r+0xba>
 800a55e:	bf00      	nop
 800a560:	20000184 	.word	0x20000184
 800a564:	0800af84 	.word	0x0800af84
 800a568:	0800afa4 	.word	0x0800afa4
 800a56c:	0800af64 	.word	0x0800af64

0800a570 <abort>:
 800a570:	b508      	push	{r3, lr}
 800a572:	2006      	movs	r0, #6
 800a574:	f000 fa4a 	bl	800aa0c <raise>
 800a578:	2001      	movs	r0, #1
 800a57a:	f7f7 f861 	bl	8001640 <_exit>
	...

0800a580 <__sflush_r>:
 800a580:	898a      	ldrh	r2, [r1, #12]
 800a582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a586:	4605      	mov	r5, r0
 800a588:	0710      	lsls	r0, r2, #28
 800a58a:	460c      	mov	r4, r1
 800a58c:	d458      	bmi.n	800a640 <__sflush_r+0xc0>
 800a58e:	684b      	ldr	r3, [r1, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	dc05      	bgt.n	800a5a0 <__sflush_r+0x20>
 800a594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a596:	2b00      	cmp	r3, #0
 800a598:	dc02      	bgt.n	800a5a0 <__sflush_r+0x20>
 800a59a:	2000      	movs	r0, #0
 800a59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5a2:	2e00      	cmp	r6, #0
 800a5a4:	d0f9      	beq.n	800a59a <__sflush_r+0x1a>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5ac:	682f      	ldr	r7, [r5, #0]
 800a5ae:	602b      	str	r3, [r5, #0]
 800a5b0:	d032      	beq.n	800a618 <__sflush_r+0x98>
 800a5b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	075a      	lsls	r2, r3, #29
 800a5b8:	d505      	bpl.n	800a5c6 <__sflush_r+0x46>
 800a5ba:	6863      	ldr	r3, [r4, #4]
 800a5bc:	1ac0      	subs	r0, r0, r3
 800a5be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5c0:	b10b      	cbz	r3, 800a5c6 <__sflush_r+0x46>
 800a5c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5c4:	1ac0      	subs	r0, r0, r3
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5cc:	6a21      	ldr	r1, [r4, #32]
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	47b0      	blx	r6
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	d106      	bne.n	800a5e6 <__sflush_r+0x66>
 800a5d8:	6829      	ldr	r1, [r5, #0]
 800a5da:	291d      	cmp	r1, #29
 800a5dc:	d82c      	bhi.n	800a638 <__sflush_r+0xb8>
 800a5de:	4a2a      	ldr	r2, [pc, #168]	; (800a688 <__sflush_r+0x108>)
 800a5e0:	40ca      	lsrs	r2, r1
 800a5e2:	07d6      	lsls	r6, r2, #31
 800a5e4:	d528      	bpl.n	800a638 <__sflush_r+0xb8>
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	6062      	str	r2, [r4, #4]
 800a5ea:	04d9      	lsls	r1, r3, #19
 800a5ec:	6922      	ldr	r2, [r4, #16]
 800a5ee:	6022      	str	r2, [r4, #0]
 800a5f0:	d504      	bpl.n	800a5fc <__sflush_r+0x7c>
 800a5f2:	1c42      	adds	r2, r0, #1
 800a5f4:	d101      	bne.n	800a5fa <__sflush_r+0x7a>
 800a5f6:	682b      	ldr	r3, [r5, #0]
 800a5f8:	b903      	cbnz	r3, 800a5fc <__sflush_r+0x7c>
 800a5fa:	6560      	str	r0, [r4, #84]	; 0x54
 800a5fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5fe:	602f      	str	r7, [r5, #0]
 800a600:	2900      	cmp	r1, #0
 800a602:	d0ca      	beq.n	800a59a <__sflush_r+0x1a>
 800a604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a608:	4299      	cmp	r1, r3
 800a60a:	d002      	beq.n	800a612 <__sflush_r+0x92>
 800a60c:	4628      	mov	r0, r5
 800a60e:	f7ff fc7f 	bl	8009f10 <_free_r>
 800a612:	2000      	movs	r0, #0
 800a614:	6360      	str	r0, [r4, #52]	; 0x34
 800a616:	e7c1      	b.n	800a59c <__sflush_r+0x1c>
 800a618:	6a21      	ldr	r1, [r4, #32]
 800a61a:	2301      	movs	r3, #1
 800a61c:	4628      	mov	r0, r5
 800a61e:	47b0      	blx	r6
 800a620:	1c41      	adds	r1, r0, #1
 800a622:	d1c7      	bne.n	800a5b4 <__sflush_r+0x34>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0c4      	beq.n	800a5b4 <__sflush_r+0x34>
 800a62a:	2b1d      	cmp	r3, #29
 800a62c:	d001      	beq.n	800a632 <__sflush_r+0xb2>
 800a62e:	2b16      	cmp	r3, #22
 800a630:	d101      	bne.n	800a636 <__sflush_r+0xb6>
 800a632:	602f      	str	r7, [r5, #0]
 800a634:	e7b1      	b.n	800a59a <__sflush_r+0x1a>
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a63c:	81a3      	strh	r3, [r4, #12]
 800a63e:	e7ad      	b.n	800a59c <__sflush_r+0x1c>
 800a640:	690f      	ldr	r7, [r1, #16]
 800a642:	2f00      	cmp	r7, #0
 800a644:	d0a9      	beq.n	800a59a <__sflush_r+0x1a>
 800a646:	0793      	lsls	r3, r2, #30
 800a648:	680e      	ldr	r6, [r1, #0]
 800a64a:	bf08      	it	eq
 800a64c:	694b      	ldreq	r3, [r1, #20]
 800a64e:	600f      	str	r7, [r1, #0]
 800a650:	bf18      	it	ne
 800a652:	2300      	movne	r3, #0
 800a654:	eba6 0807 	sub.w	r8, r6, r7
 800a658:	608b      	str	r3, [r1, #8]
 800a65a:	f1b8 0f00 	cmp.w	r8, #0
 800a65e:	dd9c      	ble.n	800a59a <__sflush_r+0x1a>
 800a660:	6a21      	ldr	r1, [r4, #32]
 800a662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a664:	4643      	mov	r3, r8
 800a666:	463a      	mov	r2, r7
 800a668:	4628      	mov	r0, r5
 800a66a:	47b0      	blx	r6
 800a66c:	2800      	cmp	r0, #0
 800a66e:	dc06      	bgt.n	800a67e <__sflush_r+0xfe>
 800a670:	89a3      	ldrh	r3, [r4, #12]
 800a672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a676:	81a3      	strh	r3, [r4, #12]
 800a678:	f04f 30ff 	mov.w	r0, #4294967295
 800a67c:	e78e      	b.n	800a59c <__sflush_r+0x1c>
 800a67e:	4407      	add	r7, r0
 800a680:	eba8 0800 	sub.w	r8, r8, r0
 800a684:	e7e9      	b.n	800a65a <__sflush_r+0xda>
 800a686:	bf00      	nop
 800a688:	20400001 	.word	0x20400001

0800a68c <_fflush_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	690b      	ldr	r3, [r1, #16]
 800a690:	4605      	mov	r5, r0
 800a692:	460c      	mov	r4, r1
 800a694:	b913      	cbnz	r3, 800a69c <_fflush_r+0x10>
 800a696:	2500      	movs	r5, #0
 800a698:	4628      	mov	r0, r5
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	b118      	cbz	r0, 800a6a6 <_fflush_r+0x1a>
 800a69e:	6983      	ldr	r3, [r0, #24]
 800a6a0:	b90b      	cbnz	r3, 800a6a6 <_fflush_r+0x1a>
 800a6a2:	f000 f887 	bl	800a7b4 <__sinit>
 800a6a6:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <_fflush_r+0x6c>)
 800a6a8:	429c      	cmp	r4, r3
 800a6aa:	d11b      	bne.n	800a6e4 <_fflush_r+0x58>
 800a6ac:	686c      	ldr	r4, [r5, #4]
 800a6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0ef      	beq.n	800a696 <_fflush_r+0xa>
 800a6b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6b8:	07d0      	lsls	r0, r2, #31
 800a6ba:	d404      	bmi.n	800a6c6 <_fflush_r+0x3a>
 800a6bc:	0599      	lsls	r1, r3, #22
 800a6be:	d402      	bmi.n	800a6c6 <_fflush_r+0x3a>
 800a6c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6c2:	f000 f915 	bl	800a8f0 <__retarget_lock_acquire_recursive>
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	f7ff ff59 	bl	800a580 <__sflush_r>
 800a6ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6d0:	07da      	lsls	r2, r3, #31
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	d4e0      	bmi.n	800a698 <_fflush_r+0xc>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	059b      	lsls	r3, r3, #22
 800a6da:	d4dd      	bmi.n	800a698 <_fflush_r+0xc>
 800a6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6de:	f000 f908 	bl	800a8f2 <__retarget_lock_release_recursive>
 800a6e2:	e7d9      	b.n	800a698 <_fflush_r+0xc>
 800a6e4:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <_fflush_r+0x70>)
 800a6e6:	429c      	cmp	r4, r3
 800a6e8:	d101      	bne.n	800a6ee <_fflush_r+0x62>
 800a6ea:	68ac      	ldr	r4, [r5, #8]
 800a6ec:	e7df      	b.n	800a6ae <_fflush_r+0x22>
 800a6ee:	4b04      	ldr	r3, [pc, #16]	; (800a700 <_fflush_r+0x74>)
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	bf08      	it	eq
 800a6f4:	68ec      	ldreq	r4, [r5, #12]
 800a6f6:	e7da      	b.n	800a6ae <_fflush_r+0x22>
 800a6f8:	0800af84 	.word	0x0800af84
 800a6fc:	0800afa4 	.word	0x0800afa4
 800a700:	0800af64 	.word	0x0800af64

0800a704 <std>:
 800a704:	2300      	movs	r3, #0
 800a706:	b510      	push	{r4, lr}
 800a708:	4604      	mov	r4, r0
 800a70a:	e9c0 3300 	strd	r3, r3, [r0]
 800a70e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a712:	6083      	str	r3, [r0, #8]
 800a714:	8181      	strh	r1, [r0, #12]
 800a716:	6643      	str	r3, [r0, #100]	; 0x64
 800a718:	81c2      	strh	r2, [r0, #14]
 800a71a:	6183      	str	r3, [r0, #24]
 800a71c:	4619      	mov	r1, r3
 800a71e:	2208      	movs	r2, #8
 800a720:	305c      	adds	r0, #92	; 0x5c
 800a722:	f7fd fd63 	bl	80081ec <memset>
 800a726:	4b05      	ldr	r3, [pc, #20]	; (800a73c <std+0x38>)
 800a728:	6263      	str	r3, [r4, #36]	; 0x24
 800a72a:	4b05      	ldr	r3, [pc, #20]	; (800a740 <std+0x3c>)
 800a72c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a72e:	4b05      	ldr	r3, [pc, #20]	; (800a744 <std+0x40>)
 800a730:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a732:	4b05      	ldr	r3, [pc, #20]	; (800a748 <std+0x44>)
 800a734:	6224      	str	r4, [r4, #32]
 800a736:	6323      	str	r3, [r4, #48]	; 0x30
 800a738:	bd10      	pop	{r4, pc}
 800a73a:	bf00      	nop
 800a73c:	0800aa45 	.word	0x0800aa45
 800a740:	0800aa67 	.word	0x0800aa67
 800a744:	0800aa9f 	.word	0x0800aa9f
 800a748:	0800aac3 	.word	0x0800aac3

0800a74c <_cleanup_r>:
 800a74c:	4901      	ldr	r1, [pc, #4]	; (800a754 <_cleanup_r+0x8>)
 800a74e:	f000 b8af 	b.w	800a8b0 <_fwalk_reent>
 800a752:	bf00      	nop
 800a754:	0800a68d 	.word	0x0800a68d

0800a758 <__sfmoreglue>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	1e4a      	subs	r2, r1, #1
 800a75c:	2568      	movs	r5, #104	; 0x68
 800a75e:	4355      	muls	r5, r2
 800a760:	460e      	mov	r6, r1
 800a762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a766:	f7ff fc23 	bl	8009fb0 <_malloc_r>
 800a76a:	4604      	mov	r4, r0
 800a76c:	b140      	cbz	r0, 800a780 <__sfmoreglue+0x28>
 800a76e:	2100      	movs	r1, #0
 800a770:	e9c0 1600 	strd	r1, r6, [r0]
 800a774:	300c      	adds	r0, #12
 800a776:	60a0      	str	r0, [r4, #8]
 800a778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a77c:	f7fd fd36 	bl	80081ec <memset>
 800a780:	4620      	mov	r0, r4
 800a782:	bd70      	pop	{r4, r5, r6, pc}

0800a784 <__sfp_lock_acquire>:
 800a784:	4801      	ldr	r0, [pc, #4]	; (800a78c <__sfp_lock_acquire+0x8>)
 800a786:	f000 b8b3 	b.w	800a8f0 <__retarget_lock_acquire_recursive>
 800a78a:	bf00      	nop
 800a78c:	20009c30 	.word	0x20009c30

0800a790 <__sfp_lock_release>:
 800a790:	4801      	ldr	r0, [pc, #4]	; (800a798 <__sfp_lock_release+0x8>)
 800a792:	f000 b8ae 	b.w	800a8f2 <__retarget_lock_release_recursive>
 800a796:	bf00      	nop
 800a798:	20009c30 	.word	0x20009c30

0800a79c <__sinit_lock_acquire>:
 800a79c:	4801      	ldr	r0, [pc, #4]	; (800a7a4 <__sinit_lock_acquire+0x8>)
 800a79e:	f000 b8a7 	b.w	800a8f0 <__retarget_lock_acquire_recursive>
 800a7a2:	bf00      	nop
 800a7a4:	20009c2b 	.word	0x20009c2b

0800a7a8 <__sinit_lock_release>:
 800a7a8:	4801      	ldr	r0, [pc, #4]	; (800a7b0 <__sinit_lock_release+0x8>)
 800a7aa:	f000 b8a2 	b.w	800a8f2 <__retarget_lock_release_recursive>
 800a7ae:	bf00      	nop
 800a7b0:	20009c2b 	.word	0x20009c2b

0800a7b4 <__sinit>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	f7ff fff0 	bl	800a79c <__sinit_lock_acquire>
 800a7bc:	69a3      	ldr	r3, [r4, #24]
 800a7be:	b11b      	cbz	r3, 800a7c8 <__sinit+0x14>
 800a7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7c4:	f7ff bff0 	b.w	800a7a8 <__sinit_lock_release>
 800a7c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7cc:	6523      	str	r3, [r4, #80]	; 0x50
 800a7ce:	4b13      	ldr	r3, [pc, #76]	; (800a81c <__sinit+0x68>)
 800a7d0:	4a13      	ldr	r2, [pc, #76]	; (800a820 <__sinit+0x6c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	bf04      	itt	eq
 800a7da:	2301      	moveq	r3, #1
 800a7dc:	61a3      	streq	r3, [r4, #24]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 f820 	bl	800a824 <__sfp>
 800a7e4:	6060      	str	r0, [r4, #4]
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f000 f81c 	bl	800a824 <__sfp>
 800a7ec:	60a0      	str	r0, [r4, #8]
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 f818 	bl	800a824 <__sfp>
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	60e0      	str	r0, [r4, #12]
 800a7f8:	2104      	movs	r1, #4
 800a7fa:	6860      	ldr	r0, [r4, #4]
 800a7fc:	f7ff ff82 	bl	800a704 <std>
 800a800:	68a0      	ldr	r0, [r4, #8]
 800a802:	2201      	movs	r2, #1
 800a804:	2109      	movs	r1, #9
 800a806:	f7ff ff7d 	bl	800a704 <std>
 800a80a:	68e0      	ldr	r0, [r4, #12]
 800a80c:	2202      	movs	r2, #2
 800a80e:	2112      	movs	r1, #18
 800a810:	f7ff ff78 	bl	800a704 <std>
 800a814:	2301      	movs	r3, #1
 800a816:	61a3      	str	r3, [r4, #24]
 800a818:	e7d2      	b.n	800a7c0 <__sinit+0xc>
 800a81a:	bf00      	nop
 800a81c:	0800abe4 	.word	0x0800abe4
 800a820:	0800a74d 	.word	0x0800a74d

0800a824 <__sfp>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	4607      	mov	r7, r0
 800a828:	f7ff ffac 	bl	800a784 <__sfp_lock_acquire>
 800a82c:	4b1e      	ldr	r3, [pc, #120]	; (800a8a8 <__sfp+0x84>)
 800a82e:	681e      	ldr	r6, [r3, #0]
 800a830:	69b3      	ldr	r3, [r6, #24]
 800a832:	b913      	cbnz	r3, 800a83a <__sfp+0x16>
 800a834:	4630      	mov	r0, r6
 800a836:	f7ff ffbd 	bl	800a7b4 <__sinit>
 800a83a:	3648      	adds	r6, #72	; 0x48
 800a83c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a840:	3b01      	subs	r3, #1
 800a842:	d503      	bpl.n	800a84c <__sfp+0x28>
 800a844:	6833      	ldr	r3, [r6, #0]
 800a846:	b30b      	cbz	r3, 800a88c <__sfp+0x68>
 800a848:	6836      	ldr	r6, [r6, #0]
 800a84a:	e7f7      	b.n	800a83c <__sfp+0x18>
 800a84c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a850:	b9d5      	cbnz	r5, 800a888 <__sfp+0x64>
 800a852:	4b16      	ldr	r3, [pc, #88]	; (800a8ac <__sfp+0x88>)
 800a854:	60e3      	str	r3, [r4, #12]
 800a856:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a85a:	6665      	str	r5, [r4, #100]	; 0x64
 800a85c:	f000 f847 	bl	800a8ee <__retarget_lock_init_recursive>
 800a860:	f7ff ff96 	bl	800a790 <__sfp_lock_release>
 800a864:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a868:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a86c:	6025      	str	r5, [r4, #0]
 800a86e:	61a5      	str	r5, [r4, #24]
 800a870:	2208      	movs	r2, #8
 800a872:	4629      	mov	r1, r5
 800a874:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a878:	f7fd fcb8 	bl	80081ec <memset>
 800a87c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a880:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a884:	4620      	mov	r0, r4
 800a886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a888:	3468      	adds	r4, #104	; 0x68
 800a88a:	e7d9      	b.n	800a840 <__sfp+0x1c>
 800a88c:	2104      	movs	r1, #4
 800a88e:	4638      	mov	r0, r7
 800a890:	f7ff ff62 	bl	800a758 <__sfmoreglue>
 800a894:	4604      	mov	r4, r0
 800a896:	6030      	str	r0, [r6, #0]
 800a898:	2800      	cmp	r0, #0
 800a89a:	d1d5      	bne.n	800a848 <__sfp+0x24>
 800a89c:	f7ff ff78 	bl	800a790 <__sfp_lock_release>
 800a8a0:	230c      	movs	r3, #12
 800a8a2:	603b      	str	r3, [r7, #0]
 800a8a4:	e7ee      	b.n	800a884 <__sfp+0x60>
 800a8a6:	bf00      	nop
 800a8a8:	0800abe4 	.word	0x0800abe4
 800a8ac:	ffff0001 	.word	0xffff0001

0800a8b0 <_fwalk_reent>:
 800a8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	4688      	mov	r8, r1
 800a8b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8bc:	2700      	movs	r7, #0
 800a8be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8c2:	f1b9 0901 	subs.w	r9, r9, #1
 800a8c6:	d505      	bpl.n	800a8d4 <_fwalk_reent+0x24>
 800a8c8:	6824      	ldr	r4, [r4, #0]
 800a8ca:	2c00      	cmp	r4, #0
 800a8cc:	d1f7      	bne.n	800a8be <_fwalk_reent+0xe>
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8d4:	89ab      	ldrh	r3, [r5, #12]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d907      	bls.n	800a8ea <_fwalk_reent+0x3a>
 800a8da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	d003      	beq.n	800a8ea <_fwalk_reent+0x3a>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	47c0      	blx	r8
 800a8e8:	4307      	orrs	r7, r0
 800a8ea:	3568      	adds	r5, #104	; 0x68
 800a8ec:	e7e9      	b.n	800a8c2 <_fwalk_reent+0x12>

0800a8ee <__retarget_lock_init_recursive>:
 800a8ee:	4770      	bx	lr

0800a8f0 <__retarget_lock_acquire_recursive>:
 800a8f0:	4770      	bx	lr

0800a8f2 <__retarget_lock_release_recursive>:
 800a8f2:	4770      	bx	lr

0800a8f4 <__swhatbuf_r>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	460e      	mov	r6, r1
 800a8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fc:	2900      	cmp	r1, #0
 800a8fe:	b096      	sub	sp, #88	; 0x58
 800a900:	4614      	mov	r4, r2
 800a902:	461d      	mov	r5, r3
 800a904:	da07      	bge.n	800a916 <__swhatbuf_r+0x22>
 800a906:	2300      	movs	r3, #0
 800a908:	602b      	str	r3, [r5, #0]
 800a90a:	89b3      	ldrh	r3, [r6, #12]
 800a90c:	061a      	lsls	r2, r3, #24
 800a90e:	d410      	bmi.n	800a932 <__swhatbuf_r+0x3e>
 800a910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a914:	e00e      	b.n	800a934 <__swhatbuf_r+0x40>
 800a916:	466a      	mov	r2, sp
 800a918:	f000 f8fa 	bl	800ab10 <_fstat_r>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	dbf2      	blt.n	800a906 <__swhatbuf_r+0x12>
 800a920:	9a01      	ldr	r2, [sp, #4]
 800a922:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a926:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a92a:	425a      	negs	r2, r3
 800a92c:	415a      	adcs	r2, r3
 800a92e:	602a      	str	r2, [r5, #0]
 800a930:	e7ee      	b.n	800a910 <__swhatbuf_r+0x1c>
 800a932:	2340      	movs	r3, #64	; 0x40
 800a934:	2000      	movs	r0, #0
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	b016      	add	sp, #88	; 0x58
 800a93a:	bd70      	pop	{r4, r5, r6, pc}

0800a93c <__smakebuf_r>:
 800a93c:	898b      	ldrh	r3, [r1, #12]
 800a93e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a940:	079d      	lsls	r5, r3, #30
 800a942:	4606      	mov	r6, r0
 800a944:	460c      	mov	r4, r1
 800a946:	d507      	bpl.n	800a958 <__smakebuf_r+0x1c>
 800a948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	6123      	str	r3, [r4, #16]
 800a950:	2301      	movs	r3, #1
 800a952:	6163      	str	r3, [r4, #20]
 800a954:	b002      	add	sp, #8
 800a956:	bd70      	pop	{r4, r5, r6, pc}
 800a958:	ab01      	add	r3, sp, #4
 800a95a:	466a      	mov	r2, sp
 800a95c:	f7ff ffca 	bl	800a8f4 <__swhatbuf_r>
 800a960:	9900      	ldr	r1, [sp, #0]
 800a962:	4605      	mov	r5, r0
 800a964:	4630      	mov	r0, r6
 800a966:	f7ff fb23 	bl	8009fb0 <_malloc_r>
 800a96a:	b948      	cbnz	r0, 800a980 <__smakebuf_r+0x44>
 800a96c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a970:	059a      	lsls	r2, r3, #22
 800a972:	d4ef      	bmi.n	800a954 <__smakebuf_r+0x18>
 800a974:	f023 0303 	bic.w	r3, r3, #3
 800a978:	f043 0302 	orr.w	r3, r3, #2
 800a97c:	81a3      	strh	r3, [r4, #12]
 800a97e:	e7e3      	b.n	800a948 <__smakebuf_r+0xc>
 800a980:	4b0d      	ldr	r3, [pc, #52]	; (800a9b8 <__smakebuf_r+0x7c>)
 800a982:	62b3      	str	r3, [r6, #40]	; 0x28
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	6020      	str	r0, [r4, #0]
 800a988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a98c:	81a3      	strh	r3, [r4, #12]
 800a98e:	9b00      	ldr	r3, [sp, #0]
 800a990:	6163      	str	r3, [r4, #20]
 800a992:	9b01      	ldr	r3, [sp, #4]
 800a994:	6120      	str	r0, [r4, #16]
 800a996:	b15b      	cbz	r3, 800a9b0 <__smakebuf_r+0x74>
 800a998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a99c:	4630      	mov	r0, r6
 800a99e:	f000 f8c9 	bl	800ab34 <_isatty_r>
 800a9a2:	b128      	cbz	r0, 800a9b0 <__smakebuf_r+0x74>
 800a9a4:	89a3      	ldrh	r3, [r4, #12]
 800a9a6:	f023 0303 	bic.w	r3, r3, #3
 800a9aa:	f043 0301 	orr.w	r3, r3, #1
 800a9ae:	81a3      	strh	r3, [r4, #12]
 800a9b0:	89a0      	ldrh	r0, [r4, #12]
 800a9b2:	4305      	orrs	r5, r0
 800a9b4:	81a5      	strh	r5, [r4, #12]
 800a9b6:	e7cd      	b.n	800a954 <__smakebuf_r+0x18>
 800a9b8:	0800a74d 	.word	0x0800a74d

0800a9bc <_raise_r>:
 800a9bc:	291f      	cmp	r1, #31
 800a9be:	b538      	push	{r3, r4, r5, lr}
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	d904      	bls.n	800a9d0 <_raise_r+0x14>
 800a9c6:	2316      	movs	r3, #22
 800a9c8:	6003      	str	r3, [r0, #0]
 800a9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
 800a9d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9d2:	b112      	cbz	r2, 800a9da <_raise_r+0x1e>
 800a9d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9d8:	b94b      	cbnz	r3, 800a9ee <_raise_r+0x32>
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 f830 	bl	800aa40 <_getpid_r>
 800a9e0:	462a      	mov	r2, r5
 800a9e2:	4601      	mov	r1, r0
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ea:	f000 b817 	b.w	800aa1c <_kill_r>
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d00a      	beq.n	800aa08 <_raise_r+0x4c>
 800a9f2:	1c59      	adds	r1, r3, #1
 800a9f4:	d103      	bne.n	800a9fe <_raise_r+0x42>
 800a9f6:	2316      	movs	r3, #22
 800a9f8:	6003      	str	r3, [r0, #0]
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	e7e7      	b.n	800a9ce <_raise_r+0x12>
 800a9fe:	2400      	movs	r4, #0
 800aa00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa04:	4628      	mov	r0, r5
 800aa06:	4798      	blx	r3
 800aa08:	2000      	movs	r0, #0
 800aa0a:	e7e0      	b.n	800a9ce <_raise_r+0x12>

0800aa0c <raise>:
 800aa0c:	4b02      	ldr	r3, [pc, #8]	; (800aa18 <raise+0xc>)
 800aa0e:	4601      	mov	r1, r0
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	f7ff bfd3 	b.w	800a9bc <_raise_r>
 800aa16:	bf00      	nop
 800aa18:	20000184 	.word	0x20000184

0800aa1c <_kill_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d07      	ldr	r5, [pc, #28]	; (800aa3c <_kill_r+0x20>)
 800aa20:	2300      	movs	r3, #0
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	4611      	mov	r1, r2
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	f7f6 fdf9 	bl	8001620 <_kill>
 800aa2e:	1c43      	adds	r3, r0, #1
 800aa30:	d102      	bne.n	800aa38 <_kill_r+0x1c>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	b103      	cbz	r3, 800aa38 <_kill_r+0x1c>
 800aa36:	6023      	str	r3, [r4, #0]
 800aa38:	bd38      	pop	{r3, r4, r5, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20009c24 	.word	0x20009c24

0800aa40 <_getpid_r>:
 800aa40:	f7f6 bde6 	b.w	8001610 <_getpid>

0800aa44 <__sread>:
 800aa44:	b510      	push	{r4, lr}
 800aa46:	460c      	mov	r4, r1
 800aa48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa4c:	f000 f894 	bl	800ab78 <_read_r>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	bfab      	itete	ge
 800aa54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa56:	89a3      	ldrhlt	r3, [r4, #12]
 800aa58:	181b      	addge	r3, r3, r0
 800aa5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa5e:	bfac      	ite	ge
 800aa60:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa62:	81a3      	strhlt	r3, [r4, #12]
 800aa64:	bd10      	pop	{r4, pc}

0800aa66 <__swrite>:
 800aa66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6a:	461f      	mov	r7, r3
 800aa6c:	898b      	ldrh	r3, [r1, #12]
 800aa6e:	05db      	lsls	r3, r3, #23
 800aa70:	4605      	mov	r5, r0
 800aa72:	460c      	mov	r4, r1
 800aa74:	4616      	mov	r6, r2
 800aa76:	d505      	bpl.n	800aa84 <__swrite+0x1e>
 800aa78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f000 f868 	bl	800ab54 <_lseek_r>
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa8e:	81a3      	strh	r3, [r4, #12]
 800aa90:	4632      	mov	r2, r6
 800aa92:	463b      	mov	r3, r7
 800aa94:	4628      	mov	r0, r5
 800aa96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9a:	f000 b817 	b.w	800aacc <_write_r>

0800aa9e <__sseek>:
 800aa9e:	b510      	push	{r4, lr}
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa6:	f000 f855 	bl	800ab54 <_lseek_r>
 800aaaa:	1c43      	adds	r3, r0, #1
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	bf15      	itete	ne
 800aab0:	6560      	strne	r0, [r4, #84]	; 0x54
 800aab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aaba:	81a3      	strheq	r3, [r4, #12]
 800aabc:	bf18      	it	ne
 800aabe:	81a3      	strhne	r3, [r4, #12]
 800aac0:	bd10      	pop	{r4, pc}

0800aac2 <__sclose>:
 800aac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac6:	f000 b813 	b.w	800aaf0 <_close_r>
	...

0800aacc <_write_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d07      	ldr	r5, [pc, #28]	; (800aaec <_write_r+0x20>)
 800aad0:	4604      	mov	r4, r0
 800aad2:	4608      	mov	r0, r1
 800aad4:	4611      	mov	r1, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f7f6 fdd7 	bl	800168e <_write>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_write_r+0x1e>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_write_r+0x1e>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	20009c24 	.word	0x20009c24

0800aaf0 <_close_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d06      	ldr	r5, [pc, #24]	; (800ab0c <_close_r+0x1c>)
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	4608      	mov	r0, r1
 800aafa:	602b      	str	r3, [r5, #0]
 800aafc:	f7f6 fde3 	bl	80016c6 <_close>
 800ab00:	1c43      	adds	r3, r0, #1
 800ab02:	d102      	bne.n	800ab0a <_close_r+0x1a>
 800ab04:	682b      	ldr	r3, [r5, #0]
 800ab06:	b103      	cbz	r3, 800ab0a <_close_r+0x1a>
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	bd38      	pop	{r3, r4, r5, pc}
 800ab0c:	20009c24 	.word	0x20009c24

0800ab10 <_fstat_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d07      	ldr	r5, [pc, #28]	; (800ab30 <_fstat_r+0x20>)
 800ab14:	2300      	movs	r3, #0
 800ab16:	4604      	mov	r4, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	602b      	str	r3, [r5, #0]
 800ab1e:	f7f6 fdde 	bl	80016de <_fstat>
 800ab22:	1c43      	adds	r3, r0, #1
 800ab24:	d102      	bne.n	800ab2c <_fstat_r+0x1c>
 800ab26:	682b      	ldr	r3, [r5, #0]
 800ab28:	b103      	cbz	r3, 800ab2c <_fstat_r+0x1c>
 800ab2a:	6023      	str	r3, [r4, #0]
 800ab2c:	bd38      	pop	{r3, r4, r5, pc}
 800ab2e:	bf00      	nop
 800ab30:	20009c24 	.word	0x20009c24

0800ab34 <_isatty_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d06      	ldr	r5, [pc, #24]	; (800ab50 <_isatty_r+0x1c>)
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	f7f6 fddd 	bl	80016fe <_isatty>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_isatty_r+0x1a>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_isatty_r+0x1a>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	20009c24 	.word	0x20009c24

0800ab54 <_lseek_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4d07      	ldr	r5, [pc, #28]	; (800ab74 <_lseek_r+0x20>)
 800ab58:	4604      	mov	r4, r0
 800ab5a:	4608      	mov	r0, r1
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	602a      	str	r2, [r5, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f7f6 fdd6 	bl	8001714 <_lseek>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_lseek_r+0x1e>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_lseek_r+0x1e>
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	20009c24 	.word	0x20009c24

0800ab78 <_read_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4d07      	ldr	r5, [pc, #28]	; (800ab98 <_read_r+0x20>)
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	4608      	mov	r0, r1
 800ab80:	4611      	mov	r1, r2
 800ab82:	2200      	movs	r2, #0
 800ab84:	602a      	str	r2, [r5, #0]
 800ab86:	461a      	mov	r2, r3
 800ab88:	f7f6 fd64 	bl	8001654 <_read>
 800ab8c:	1c43      	adds	r3, r0, #1
 800ab8e:	d102      	bne.n	800ab96 <_read_r+0x1e>
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	b103      	cbz	r3, 800ab96 <_read_r+0x1e>
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	20009c24 	.word	0x20009c24

0800ab9c <_init>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr

0800aba8 <_fini>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	bf00      	nop
 800abac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abae:	bc08      	pop	{r3}
 800abb0:	469e      	mov	lr, r3
 800abb2:	4770      	bx	lr
